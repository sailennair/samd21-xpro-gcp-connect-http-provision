
WINC1500_PROVISION_HTTP_EXAMPLE-update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a000  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000288  20000000  0000a000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001bb0  20000288  0000a288  00020288  2**3
                  ALLOC
  3 .stack        00002000  20001e38  0000be38  00020288  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
  6 .debug_info   000524ef  00000000  00000000  00020309  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000075dc  00000000  00000000  000727f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001656b  00000000  00000000  00079dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d50  00000000  00000000  0009033f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000017b8  00000000  00000000  0009108f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021b18  00000000  00000000  00092847  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019a46  00000000  00000000  000b435f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00099423  00000000  00000000  000cdda5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003018  00000000  00000000  001671c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 3e 00 20 31 62 00 00 2d 62 00 00 2d 62 00 00     8>. 1b..-b..-b..
	...
      2c:	2d 62 00 00 00 00 00 00 00 00 00 00 2d 62 00 00     -b..........-b..
      3c:	2d 62 00 00 2d 62 00 00 2d 62 00 00 2d 62 00 00     -b..-b..-b..-b..
      4c:	2d 62 00 00 99 48 00 00 2d 62 00 00 2d 62 00 00     -b...H..-b..-b..
      5c:	2d 62 00 00 2d 62 00 00 05 4e 00 00 15 4e 00 00     -b..-b...N...N..
      6c:	25 4e 00 00 35 4e 00 00 45 4e 00 00 55 4e 00 00     %N..5N..EN..UN..
      7c:	2d 62 00 00 2d 62 00 00 2d 62 00 00 2d 62 00 00     -b..-b..-b..-b..
      8c:	2d 62 00 00 2d 62 00 00 2d 62 00 00 2d 62 00 00     -b..-b..-b..-b..
      9c:	2d 62 00 00 2d 62 00 00 2d 62 00 00 2d 62 00 00     -b..-b..-b..-b..
      ac:	2d 62 00 00 00 00 00 00                             -b......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000288 	.word	0x20000288
      d4:	00000000 	.word	0x00000000
      d8:	0000a000 	.word	0x0000a000

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000028c 	.word	0x2000028c
     108:	0000a000 	.word	0x0000a000
     10c:	0000a000 	.word	0x0000a000
     110:	00000000 	.word	0x00000000

00000114 <at25dfx_chip_check_presence>:

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     114:	b530      	push	{r4, r5, lr}
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     116:	b085      	sub	sp, #20
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     118:	0004      	movs	r4, r0
     11a:	2300      	movs	r3, #0
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     11c:	9303      	str	r3, [sp, #12]
     11e:	6805      	ldr	r5, [r0, #0]
     120:	4b30      	ldr	r3, [pc, #192]	; (1e4 <at25dfx_chip_check_presence+0xd0>)
     122:	4798      	blx	r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     124:	792b      	ldrb	r3, [r5, #4]
     126:	2b00      	cmp	r3, #0
     128:	d158      	bne.n	1dc <at25dfx_chip_check_presence+0xc8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     12a:	3301      	adds	r3, #1
     12c:	712b      	strb	r3, [r5, #4]
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     12e:	4b2e      	ldr	r3, [pc, #184]	; (1e8 <at25dfx_chip_check_presence+0xd4>)
     130:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     132:	229f      	movs	r2, #159	; 0x9f
     134:	ab01      	add	r3, sp, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     136:	701a      	strb	r2, [r3, #0]
		while (!spi_is_ready_to_write(chip->spi)) {
     138:	7962      	ldrb	r2, [r4, #5]
     13a:	09d1      	lsrs	r1, r2, #7
     13c:	2300      	movs	r3, #0
	if (!spi_is_ready_to_write(module)) {
     13e:	2900      	cmp	r1, #0
     140:	d104      	bne.n	14c <at25dfx_chip_check_presence+0x38>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     142:	0953      	lsrs	r3, r2, #5
		while (!spi_is_ready_to_read(chip->spi)) {
     144:	01db      	lsls	r3, r3, #7
	SercomSpi *const spi_module = &(module->hw->SPI);
     146:	4929      	ldr	r1, [pc, #164]	; (1ec <at25dfx_chip_check_presence+0xd8>)
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     148:	468c      	mov	ip, r1
     14a:	4463      	add	r3, ip
     14c:	211f      	movs	r1, #31
     14e:	4011      	ands	r1, r2
	if (!spi_is_ready_to_read(module)) {
     150:	2201      	movs	r2, #1
     152:	408a      	lsls	r2, r1
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     154:	615a      	str	r2, [r3, #20]
     156:	2201      	movs	r2, #1
     158:	a901      	add	r1, sp, #4
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     15a:	6820      	ldr	r0, [r4, #0]
     15c:	4b24      	ldr	r3, [pc, #144]	; (1f0 <at25dfx_chip_check_presence+0xdc>)
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     15e:	4798      	blx	r3
     160:	2300      	movs	r3, #0
     162:	2203      	movs	r2, #3
     164:	a903      	add	r1, sp, #12
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     166:	6820      	ldr	r0, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     168:	4d22      	ldr	r5, [pc, #136]	; (1f4 <at25dfx_chip_check_presence+0xe0>)
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     16a:	47a8      	blx	r5
	if (port_index < PORT_INST_NUM) {
     16c:	7962      	ldrb	r2, [r4, #5]
     16e:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
     170:	2300      	movs	r3, #0
     172:	2900      	cmp	r1, #0
     174:	d104      	bne.n	180 <at25dfx_chip_check_presence+0x6c>
     176:	0953      	lsrs	r3, r2, #5
     178:	01db      	lsls	r3, r3, #7
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     17a:	491c      	ldr	r1, [pc, #112]	; (1ec <at25dfx_chip_check_presence+0xd8>)
     17c:	468c      	mov	ip, r1
     17e:	4463      	add	r3, ip
     180:	211f      	movs	r1, #31

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     182:	4011      	ands	r1, r2

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     184:	2201      	movs	r2, #1
		return STATUS_ERR_IO;
	}
	return STATUS_OK;
     186:	408a      	lsls	r2, r1
     188:	619a      	str	r2, [r3, #24]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);
     18a:	2300      	movs	r3, #0
	module->locked = false;
     18c:	6822      	ldr	r2, [r4, #0]
     18e:	7113      	strb	r3, [r2, #4]

	return status;
     190:	7923      	ldrb	r3, [r4, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     192:	2b0a      	cmp	r3, #10
     194:	d817      	bhi.n	1c6 <at25dfx_chip_check_presence+0xb2>
		return status;
     196:	009b      	lsls	r3, r3, #2
}
     198:	4a17      	ldr	r2, [pc, #92]	; (1f8 <at25dfx_chip_check_presence+0xe4>)
     19a:	58d3      	ldr	r3, [r2, r3]
     19c:	469f      	mov	pc, r3
     19e:	4b17      	ldr	r3, [pc, #92]	; (1fc <at25dfx_chip_check_presence+0xe8>)
     1a0:	e014      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
     1a2:	4b17      	ldr	r3, [pc, #92]	; (200 <at25dfx_chip_check_presence+0xec>)
     1a4:	e012      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
     1a6:	4b17      	ldr	r3, [pc, #92]	; (204 <at25dfx_chip_check_presence+0xf0>)
     1a8:	e010      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
     1aa:	4b17      	ldr	r3, [pc, #92]	; (208 <at25dfx_chip_check_presence+0xf4>)
		return 0x02451f;
     1ac:	e00e      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x01451f;
     1ae:	4b17      	ldr	r3, [pc, #92]	; (20c <at25dfx_chip_check_presence+0xf8>)
     1b0:	e00c      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x02461f;
     1b2:	4b17      	ldr	r3, [pc, #92]	; (210 <at25dfx_chip_check_presence+0xfc>)
     1b4:	e00a      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x03461f;
     1b6:	4b17      	ldr	r3, [pc, #92]	; (214 <at25dfx_chip_check_presence+0x100>)
     1b8:	e008      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x00861f;
     1ba:	4b17      	ldr	r3, [pc, #92]	; (218 <at25dfx_chip_check_presence+0x104>)
     1bc:	e006      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x01471f;
     1be:	4b17      	ldr	r3, [pc, #92]	; (21c <at25dfx_chip_check_presence+0x108>)
     1c0:	e004      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x00481f;
     1c2:	4b17      	ldr	r3, [pc, #92]	; (220 <at25dfx_chip_check_presence+0x10c>)
     1c4:	e002      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0;
     1c6:	2300      	movs	r3, #0
     1c8:	e000      	b.n	1cc <at25dfx_chip_check_presence+0xb8>
		return 0x00651f;
     1ca:	4b16      	ldr	r3, [pc, #88]	; (224 <at25dfx_chip_check_presence+0x110>)
	if (id == _at25dfx_get_device_id(chip->type)) {
     1cc:	9a03      	ldr	r2, [sp, #12]
     1ce:	429a      	cmp	r2, r3
     1d0:	d002      	beq.n	1d8 <at25dfx_chip_check_presence+0xc4>
		return STATUS_ERR_NOT_FOUND;
     1d2:	2014      	movs	r0, #20
}
     1d4:	b005      	add	sp, #20
     1d6:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
     1d8:	2000      	movs	r0, #0
     1da:	e7fb      	b.n	1d4 <at25dfx_chip_check_presence+0xc0>
     1dc:	4b02      	ldr	r3, [pc, #8]	; (1e8 <at25dfx_chip_check_presence+0xd4>)
     1de:	4798      	blx	r3
		return status;
     1e0:	2005      	movs	r0, #5
     1e2:	e7f7      	b.n	1d4 <at25dfx_chip_check_presence+0xc0>
     1e4:	00004785 	.word	0x00004785
     1e8:	000047c5 	.word	0x000047c5
     1ec:	41004400 	.word	0x41004400
     1f0:	00005205 	.word	0x00005205
     1f4:	0000503d 	.word	0x0000503d
     1f8:	00008830 	.word	0x00008830
     1fc:	0000431f 	.word	0x0000431f
     200:	0001441f 	.word	0x0001441f
     204:	0002441f 	.word	0x0002441f
     208:	0002451f 	.word	0x0002451f
     20c:	0001451f 	.word	0x0001451f
     210:	0002461f 	.word	0x0002461f
     214:	0003461f 	.word	0x0003461f
     218:	0000861f 	.word	0x0000861f
     21c:	0001471f 	.word	0x0001471f
     220:	0000481f 	.word	0x0000481f
     224:	0000651f 	.word	0x0000651f

00000228 <at25dfx_chip_read_buffer>:
{
     228:	b5f0      	push	{r4, r5, r6, r7, lr}
     22a:	b085      	sub	sp, #20
     22c:	0004      	movs	r4, r0
     22e:	000e      	movs	r6, r1
     230:	9201      	str	r2, [sp, #4]
     232:	001f      	movs	r7, r3
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     234:	185a      	adds	r2, r3, r1
	switch (type) {
     236:	7903      	ldrb	r3, [r0, #4]
     238:	2b0a      	cmp	r3, #10
     23a:	d815      	bhi.n	268 <at25dfx_chip_read_buffer+0x40>
     23c:	009b      	lsls	r3, r3, #2
     23e:	4932      	ldr	r1, [pc, #200]	; (308 <at25dfx_chip_read_buffer+0xe0>)
     240:	58cb      	ldr	r3, [r1, r3]
     242:	469f      	mov	pc, r3
		return 256 * 1024UL;
     244:	2380      	movs	r3, #128	; 0x80
     246:	02db      	lsls	r3, r3, #11
     248:	e012      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 512 * 1024UL;
     24a:	2380      	movs	r3, #128	; 0x80
     24c:	031b      	lsls	r3, r3, #12
     24e:	e00f      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 1024 * 1024UL;
     250:	2380      	movs	r3, #128	; 0x80
     252:	035b      	lsls	r3, r3, #13
     254:	e00c      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 2048 * 1024UL;
     256:	2380      	movs	r3, #128	; 0x80
     258:	039b      	lsls	r3, r3, #14
     25a:	e009      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 4096 * 1024UL;
     25c:	2380      	movs	r3, #128	; 0x80
     25e:	03db      	lsls	r3, r3, #15
     260:	e006      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 8192 * 1024UL;
     262:	2380      	movs	r3, #128	; 0x80
     264:	041b      	lsls	r3, r3, #16
     266:	e003      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 0;
     268:	2300      	movs	r3, #0
     26a:	e001      	b.n	270 <at25dfx_chip_read_buffer+0x48>
		return 64 * 1024UL;
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
     270:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     272:	429a      	cmp	r2, r3
     274:	d901      	bls.n	27a <at25dfx_chip_read_buffer+0x52>
}
     276:	b005      	add	sp, #20
     278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     27a:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     27c:	4b23      	ldr	r3, [pc, #140]	; (30c <at25dfx_chip_read_buffer+0xe4>)
     27e:	4798      	blx	r3
	if (module->locked) {
     280:	792b      	ldrb	r3, [r5, #4]
     282:	2b00      	cmp	r3, #0
     284:	d13c      	bne.n	300 <at25dfx_chip_read_buffer+0xd8>
		module->locked = true;
     286:	3301      	adds	r3, #1
     288:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     28a:	4b21      	ldr	r3, [pc, #132]	; (310 <at25dfx_chip_read_buffer+0xe8>)
     28c:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     28e:	230b      	movs	r3, #11
     290:	aa02      	add	r2, sp, #8
     292:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     294:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     296:	0a33      	lsrs	r3, r6, #8
     298:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     29a:	0c36      	lsrs	r6, r6, #16
     29c:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     29e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     2a0:	09d1      	lsrs	r1, r2, #7
		return NULL;
     2a2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2a4:	2900      	cmp	r1, #0
     2a6:	d104      	bne.n	2b2 <at25dfx_chip_read_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
     2a8:	0953      	lsrs	r3, r2, #5
     2aa:	01db      	lsls	r3, r3, #7
     2ac:	4919      	ldr	r1, [pc, #100]	; (314 <at25dfx_chip_read_buffer+0xec>)
     2ae:	468c      	mov	ip, r1
     2b0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2b2:	211f      	movs	r1, #31
     2b4:	4011      	ands	r1, r2
     2b6:	2201      	movs	r2, #1
     2b8:	408a      	lsls	r2, r1
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2ba:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     2bc:	2205      	movs	r2, #5
     2be:	a902      	add	r1, sp, #8
     2c0:	6820      	ldr	r0, [r4, #0]
     2c2:	4b15      	ldr	r3, [pc, #84]	; (318 <at25dfx_chip_read_buffer+0xf0>)
     2c4:	4798      	blx	r3
	if (cmd.length) {
     2c6:	2f00      	cmp	r7, #0
     2c8:	d113      	bne.n	2f2 <at25dfx_chip_read_buffer+0xca>
	port_pin_set_output_level(chip->cs_pin, true);
     2ca:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     2cc:	09d1      	lsrs	r1, r2, #7
		return NULL;
     2ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2d0:	2900      	cmp	r1, #0
     2d2:	d104      	bne.n	2de <at25dfx_chip_read_buffer+0xb6>
		return &(ports[port_index]->Group[group_index]);
     2d4:	0953      	lsrs	r3, r2, #5
     2d6:	01db      	lsls	r3, r3, #7
     2d8:	490e      	ldr	r1, [pc, #56]	; (314 <at25dfx_chip_read_buffer+0xec>)
     2da:	468c      	mov	ip, r1
     2dc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2de:	211f      	movs	r1, #31
     2e0:	4011      	ands	r1, r2
     2e2:	2201      	movs	r2, #1
     2e4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     2e6:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
     2e8:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     2ea:	2200      	movs	r2, #0
     2ec:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
     2ee:	2000      	movs	r0, #0
     2f0:	e7c1      	b.n	276 <at25dfx_chip_read_buffer+0x4e>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     2f2:	2300      	movs	r3, #0
     2f4:	003a      	movs	r2, r7
     2f6:	9901      	ldr	r1, [sp, #4]
     2f8:	6820      	ldr	r0, [r4, #0]
     2fa:	4d08      	ldr	r5, [pc, #32]	; (31c <at25dfx_chip_read_buffer+0xf4>)
     2fc:	47a8      	blx	r5
     2fe:	e7e4      	b.n	2ca <at25dfx_chip_read_buffer+0xa2>
     300:	4b03      	ldr	r3, [pc, #12]	; (310 <at25dfx_chip_read_buffer+0xe8>)
     302:	4798      	blx	r3
		return status;
     304:	2005      	movs	r0, #5
     306:	e7b6      	b.n	276 <at25dfx_chip_read_buffer+0x4e>
     308:	0000885c 	.word	0x0000885c
     30c:	00004785 	.word	0x00004785
     310:	000047c5 	.word	0x000047c5
     314:	41004400 	.word	0x41004400
     318:	00005205 	.word	0x00005205
     31c:	0000503d 	.word	0x0000503d

00000320 <at25dfx_chip_write_buffer>:
{
     320:	b5f0      	push	{r4, r5, r6, r7, lr}
     322:	46de      	mov	lr, fp
     324:	4657      	mov	r7, sl
     326:	464e      	mov	r6, r9
     328:	4645      	mov	r5, r8
     32a:	b5e0      	push	{r5, r6, r7, lr}
     32c:	b085      	sub	sp, #20
     32e:	0005      	movs	r5, r0
     330:	000e      	movs	r6, r1
     332:	9201      	str	r2, [sp, #4]
     334:	001f      	movs	r7, r3
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     336:	185a      	adds	r2, r3, r1
	switch (type) {
     338:	7903      	ldrb	r3, [r0, #4]
     33a:	2b0a      	cmp	r3, #10
     33c:	d815      	bhi.n	36a <at25dfx_chip_write_buffer+0x4a>
     33e:	009b      	lsls	r3, r3, #2
     340:	49ae      	ldr	r1, [pc, #696]	; (5fc <at25dfx_chip_write_buffer+0x2dc>)
     342:	58cb      	ldr	r3, [r1, r3]
     344:	469f      	mov	pc, r3
		return 256 * 1024UL;
     346:	2380      	movs	r3, #128	; 0x80
     348:	02db      	lsls	r3, r3, #11
     34a:	e012      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
     34c:	2380      	movs	r3, #128	; 0x80
     34e:	031b      	lsls	r3, r3, #12
     350:	e00f      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
     352:	2380      	movs	r3, #128	; 0x80
     354:	035b      	lsls	r3, r3, #13
     356:	e00c      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
     358:	2380      	movs	r3, #128	; 0x80
     35a:	039b      	lsls	r3, r3, #14
     35c:	e009      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
     35e:	2380      	movs	r3, #128	; 0x80
     360:	03db      	lsls	r3, r3, #15
     362:	e006      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
     364:	2380      	movs	r3, #128	; 0x80
     366:	041b      	lsls	r3, r3, #16
     368:	e003      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 0;
     36a:	2300      	movs	r3, #0
     36c:	e001      	b.n	372 <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
     36e:	2380      	movs	r3, #128	; 0x80
     370:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
     372:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     374:	429a      	cmp	r2, r3
     376:	d906      	bls.n	386 <at25dfx_chip_write_buffer+0x66>
}
     378:	b005      	add	sp, #20
     37a:	bc3c      	pop	{r2, r3, r4, r5}
     37c:	4690      	mov	r8, r2
     37e:	4699      	mov	r9, r3
     380:	46a2      	mov	sl, r4
     382:	46ab      	mov	fp, r5
     384:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     386:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
     388:	4b9d      	ldr	r3, [pc, #628]	; (600 <at25dfx_chip_write_buffer+0x2e0>)
     38a:	4798      	blx	r3
	if (module->locked) {
     38c:	7923      	ldrb	r3, [r4, #4]
     38e:	2b00      	cmp	r3, #0
     390:	d000      	beq.n	394 <at25dfx_chip_write_buffer+0x74>
     392:	e12e      	b.n	5f2 <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
     394:	3301      	adds	r3, #1
     396:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
     398:	4b9a      	ldr	r3, [pc, #616]	; (604 <at25dfx_chip_write_buffer+0x2e4>)
     39a:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     39c:	2306      	movs	r3, #6
     39e:	aa02      	add	r2, sp, #8
     3a0:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     3a2:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     3a4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     3a6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3a8:	2900      	cmp	r1, #0
     3aa:	d104      	bne.n	3b6 <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
     3ac:	0953      	lsrs	r3, r2, #5
     3ae:	01db      	lsls	r3, r3, #7
     3b0:	4995      	ldr	r1, [pc, #596]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     3b2:	468c      	mov	ip, r1
     3b4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3b6:	211f      	movs	r1, #31
     3b8:	4011      	ands	r1, r2
     3ba:	2201      	movs	r2, #1
     3bc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     3be:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     3c0:	2201      	movs	r2, #1
     3c2:	a902      	add	r1, sp, #8
     3c4:	6828      	ldr	r0, [r5, #0]
     3c6:	4b91      	ldr	r3, [pc, #580]	; (60c <at25dfx_chip_write_buffer+0x2ec>)
     3c8:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     3ca:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     3cc:	09d1      	lsrs	r1, r2, #7
		return NULL;
     3ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3d0:	2900      	cmp	r1, #0
     3d2:	d104      	bne.n	3de <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
     3d4:	0953      	lsrs	r3, r2, #5
     3d6:	01db      	lsls	r3, r3, #7
     3d8:	498b      	ldr	r1, [pc, #556]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     3da:	468c      	mov	ip, r1
     3dc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3de:	211f      	movs	r1, #31
     3e0:	4011      	ands	r1, r2
     3e2:	2201      	movs	r2, #1
     3e4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     3e6:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
     3e8:	22ff      	movs	r2, #255	; 0xff
     3ea:	4032      	ands	r2, r6
     3ec:	2380      	movs	r3, #128	; 0x80
     3ee:	005b      	lsls	r3, r3, #1
     3f0:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
     3f2:	1c1a      	adds	r2, r3, #0
     3f4:	b29b      	uxth	r3, r3
     3f6:	42bb      	cmp	r3, r7
     3f8:	d900      	bls.n	3fc <at25dfx_chip_write_buffer+0xdc>
     3fa:	1c3a      	adds	r2, r7, #0
     3fc:	b293      	uxth	r3, r2
     3fe:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
     400:	2302      	movs	r3, #2
     402:	aa02      	add	r2, sp, #8
     404:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     406:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     408:	0a33      	lsrs	r3, r6, #8
     40a:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     40c:	0c33      	lsrs	r3, r6, #16
     40e:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     410:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     412:	09d1      	lsrs	r1, r2, #7
		return NULL;
     414:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     416:	2900      	cmp	r1, #0
     418:	d104      	bne.n	424 <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
     41a:	0953      	lsrs	r3, r2, #5
     41c:	01db      	lsls	r3, r3, #7
     41e:	497a      	ldr	r1, [pc, #488]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     420:	468c      	mov	ip, r1
     422:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     424:	211f      	movs	r1, #31
     426:	4011      	ands	r1, r2
     428:	2201      	movs	r2, #1
     42a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     42c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     42e:	2204      	movs	r2, #4
     430:	a902      	add	r1, sp, #8
     432:	6828      	ldr	r0, [r5, #0]
     434:	4b75      	ldr	r3, [pc, #468]	; (60c <at25dfx_chip_write_buffer+0x2ec>)
     436:	4798      	blx	r3
	if (cmd.length) {
     438:	4653      	mov	r3, sl
     43a:	2b00      	cmp	r3, #0
     43c:	d145      	bne.n	4ca <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
     43e:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     440:	09d1      	lsrs	r1, r2, #7
		return NULL;
     442:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     444:	2900      	cmp	r1, #0
     446:	d104      	bne.n	452 <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
     448:	0953      	lsrs	r3, r2, #5
     44a:	01db      	lsls	r3, r3, #7
     44c:	496e      	ldr	r1, [pc, #440]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     44e:	468c      	mov	ip, r1
     450:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     452:	211f      	movs	r1, #31
     454:	4011      	ands	r1, r2
     456:	2201      	movs	r2, #1
     458:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     45a:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     45c:	682b      	ldr	r3, [r5, #0]
     45e:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
     460:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     462:	7e0b      	ldrb	r3, [r1, #24]
     464:	4213      	tst	r3, r2
     466:	d0fc      	beq.n	462 <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
     468:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     46a:	09d1      	lsrs	r1, r2, #7
		return NULL;
     46c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     46e:	2900      	cmp	r1, #0
     470:	d104      	bne.n	47c <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
     472:	0953      	lsrs	r3, r2, #5
     474:	01db      	lsls	r3, r3, #7
     476:	4964      	ldr	r1, [pc, #400]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     478:	468c      	mov	ip, r1
     47a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     47c:	211f      	movs	r1, #31
     47e:	4011      	ands	r1, r2
     480:	2201      	movs	r2, #1
     482:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     484:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     486:	682b      	ldr	r3, [r5, #0]
     488:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     48a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     48c:	07d2      	lsls	r2, r2, #31
     48e:	d501      	bpl.n	494 <at25dfx_chip_write_buffer+0x174>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     490:	2205      	movs	r2, #5
     492:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     494:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     496:	6802      	ldr	r2, [r0, #0]
     498:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     49a:	7e13      	ldrb	r3, [r2, #24]
     49c:	420b      	tst	r3, r1
     49e:	d0fc      	beq.n	49a <at25dfx_chip_write_buffer+0x17a>
     4a0:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     4a2:	2400      	movs	r4, #0
	if (!spi_is_ready_to_read(module)) {
     4a4:	075b      	lsls	r3, r3, #29
     4a6:	d509      	bpl.n	4bc <at25dfx_chip_write_buffer+0x19c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     4a8:	8b53      	ldrh	r3, [r2, #26]
     4aa:	075b      	lsls	r3, r3, #29
     4ac:	d501      	bpl.n	4b2 <at25dfx_chip_write_buffer+0x192>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     4ae:	2304      	movs	r3, #4
     4b0:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4b2:	7983      	ldrb	r3, [r0, #6]
     4b4:	2b01      	cmp	r3, #1
     4b6:	d00e      	beq.n	4d6 <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4b8:	6a94      	ldr	r4, [r2, #40]	; 0x28
     4ba:	b2e4      	uxtb	r4, r4
		while (!spi_is_ready_to_write(chip->spi)) {
     4bc:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4be:	2300      	movs	r3, #0
     4c0:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(chip->spi)) {
     4c2:	2004      	movs	r0, #4
     4c4:	46b4      	mov	ip, r6
     4c6:	002e      	movs	r6, r5
     4c8:	e010      	b.n	4ec <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     4ca:	4652      	mov	r2, sl
     4cc:	9901      	ldr	r1, [sp, #4]
     4ce:	6828      	ldr	r0, [r5, #0]
     4d0:	4b4e      	ldr	r3, [pc, #312]	; (60c <at25dfx_chip_write_buffer+0x2ec>)
     4d2:	4798      	blx	r3
     4d4:	e7b3      	b.n	43e <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     4d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
     4d8:	05db      	lsls	r3, r3, #23
     4da:	0ddc      	lsrs	r4, r3, #23
     4dc:	e7ee      	b.n	4bc <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4de:	79ab      	ldrb	r3, [r5, #6]
     4e0:	2b01      	cmp	r3, #1
     4e2:	d01a      	beq.n	51a <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4e4:	6a94      	ldr	r4, [r2, #40]	; 0x28
     4e6:	b2e4      	uxtb	r4, r4
	} while (status_reg & AT25DFX_STATUS_BUSY);
     4e8:	4221      	tst	r1, r4
     4ea:	d01a      	beq.n	522 <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
     4ec:	6833      	ldr	r3, [r6, #0]
     4ee:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     4f0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     4f2:	420b      	tst	r3, r1
     4f4:	d0fc      	beq.n	4f0 <at25dfx_chip_write_buffer+0x1d0>
     4f6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     4f8:	420b      	tst	r3, r1
     4fa:	d001      	beq.n	500 <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4fc:	4643      	mov	r3, r8
     4fe:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     500:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     502:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     504:	7e13      	ldrb	r3, [r2, #24]
     506:	4203      	tst	r3, r0
     508:	d0fc      	beq.n	504 <at25dfx_chip_write_buffer+0x1e4>
     50a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     50c:	4203      	tst	r3, r0
     50e:	d0eb      	beq.n	4e8 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     510:	8b53      	ldrh	r3, [r2, #26]
     512:	4203      	tst	r3, r0
     514:	d0e3      	beq.n	4de <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     516:	8350      	strh	r0, [r2, #26]
     518:	e7e1      	b.n	4de <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     51a:	6a94      	ldr	r4, [r2, #40]	; 0x28
     51c:	05e4      	lsls	r4, r4, #23
     51e:	0de4      	lsrs	r4, r4, #23
     520:	e7e2      	b.n	4e8 <at25dfx_chip_write_buffer+0x1c8>
     522:	0035      	movs	r5, r6
     524:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
     526:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     528:	09d1      	lsrs	r1, r2, #7
		return NULL;
     52a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     52c:	2900      	cmp	r1, #0
     52e:	d104      	bne.n	53a <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
     530:	0953      	lsrs	r3, r2, #5
     532:	01db      	lsls	r3, r3, #7
     534:	4934      	ldr	r1, [pc, #208]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     536:	468c      	mov	ip, r1
     538:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     53a:	211f      	movs	r1, #31
     53c:	4011      	ands	r1, r2
     53e:	2201      	movs	r2, #1
     540:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     542:	619a      	str	r2, [r3, #24]
		return STATUS_ERR_IO;
     544:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
     546:	06a3      	lsls	r3, r4, #26
     548:	d44f      	bmi.n	5ea <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
     54a:	4653      	mov	r3, sl
     54c:	1aff      	subs	r7, r7, r3
     54e:	b2bb      	uxth	r3, r7
     550:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
     552:	9a01      	ldr	r2, [sp, #4]
     554:	4691      	mov	r9, r2
	return STATUS_OK;
     556:	2000      	movs	r0, #0
     558:	2b00      	cmp	r3, #0
     55a:	d046      	beq.n	5ea <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     55c:	231f      	movs	r3, #31
     55e:	469b      	mov	fp, r3
     560:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     562:	4b2a      	ldr	r3, [pc, #168]	; (60c <at25dfx_chip_write_buffer+0x2ec>)
     564:	4698      	mov	r8, r3
     566:	4653      	mov	r3, sl
     568:	9301      	str	r3, [sp, #4]
     56a:	468a      	mov	sl, r1
     56c:	e058      	b.n	620 <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     56e:	001a      	movs	r2, r3
     570:	4649      	mov	r1, r9
     572:	6828      	ldr	r0, [r5, #0]
     574:	4b25      	ldr	r3, [pc, #148]	; (60c <at25dfx_chip_write_buffer+0x2ec>)
     576:	4798      	blx	r3
     578:	e0a4      	b.n	6c4 <at25dfx_chip_write_buffer+0x3a4>
     57a:	6a90      	ldr	r0, [r2, #40]	; 0x28
     57c:	05c0      	lsls	r0, r0, #23
     57e:	0dc0      	lsrs	r0, r0, #23
     580:	e0e1      	b.n	746 <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     582:	79bb      	ldrb	r3, [r7, #6]
     584:	2b01      	cmp	r3, #1
     586:	d01a      	beq.n	5be <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     588:	6a90      	ldr	r0, [r2, #40]	; 0x28
     58a:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
     58c:	4204      	tst	r4, r0
     58e:	d01a      	beq.n	5c6 <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
     590:	682b      	ldr	r3, [r5, #0]
     592:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     594:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     596:	4223      	tst	r3, r4
     598:	d0fc      	beq.n	594 <at25dfx_chip_write_buffer+0x274>
     59a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     59c:	4223      	tst	r3, r4
     59e:	d001      	beq.n	5a4 <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     5a0:	2300      	movs	r3, #0
     5a2:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     5a4:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     5a6:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     5a8:	7e13      	ldrb	r3, [r2, #24]
     5aa:	420b      	tst	r3, r1
     5ac:	d0fc      	beq.n	5a8 <at25dfx_chip_write_buffer+0x288>
     5ae:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     5b0:	420b      	tst	r3, r1
     5b2:	d0eb      	beq.n	58c <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     5b4:	8b53      	ldrh	r3, [r2, #26]
     5b6:	420b      	tst	r3, r1
     5b8:	d0e3      	beq.n	582 <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     5ba:	8351      	strh	r1, [r2, #26]
     5bc:	e7e1      	b.n	582 <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     5be:	6a90      	ldr	r0, [r2, #40]	; 0x28
     5c0:	05c0      	lsls	r0, r0, #23
     5c2:	0dc0      	lsrs	r0, r0, #23
     5c4:	e7e2      	b.n	58c <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
     5c6:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     5c8:	09d9      	lsrs	r1, r3, #7
		return NULL;
     5ca:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     5cc:	2900      	cmp	r1, #0
     5ce:	d104      	bne.n	5da <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
     5d0:	095a      	lsrs	r2, r3, #5
     5d2:	01d2      	lsls	r2, r2, #7
     5d4:	490c      	ldr	r1, [pc, #48]	; (608 <at25dfx_chip_write_buffer+0x2e8>)
     5d6:	468c      	mov	ip, r1
     5d8:	4462      	add	r2, ip
     5da:	4659      	mov	r1, fp
     5dc:	400b      	ands	r3, r1
     5de:	0021      	movs	r1, r4
     5e0:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     5e2:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
     5e4:	0683      	lsls	r3, r0, #26
     5e6:	d513      	bpl.n	610 <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
     5e8:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
     5ea:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
     5ec:	2200      	movs	r2, #0
     5ee:	711a      	strb	r2, [r3, #4]
	return status;
     5f0:	e6c2      	b.n	378 <at25dfx_chip_write_buffer+0x58>
     5f2:	4b04      	ldr	r3, [pc, #16]	; (604 <at25dfx_chip_write_buffer+0x2e4>)
     5f4:	4798      	blx	r3
		return status;
     5f6:	2005      	movs	r0, #5
     5f8:	e6be      	b.n	378 <at25dfx_chip_write_buffer+0x58>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	0000888c 	.word	0x0000888c
     600:	00004785 	.word	0x00004785
     604:	000047c5 	.word	0x000047c5
     608:	41004400 	.word	0x41004400
     60c:	00005205 	.word	0x00005205
		length -= cmd.length;
     610:	4653      	mov	r3, sl
     612:	9a01      	ldr	r2, [sp, #4]
     614:	1a9b      	subs	r3, r3, r2
     616:	b29b      	uxth	r3, r3
     618:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
     61a:	2b00      	cmp	r3, #0
     61c:	d100      	bne.n	620 <at25dfx_chip_write_buffer+0x300>
     61e:	e094      	b.n	74a <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
     620:	ab02      	add	r3, sp, #8
     622:	2206      	movs	r2, #6
     624:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     626:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     628:	09d9      	lsrs	r1, r3, #7
		return NULL;
     62a:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     62c:	2900      	cmp	r1, #0
     62e:	d104      	bne.n	63a <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
     630:	095a      	lsrs	r2, r3, #5
     632:	01d2      	lsls	r2, r2, #7
     634:	4946      	ldr	r1, [pc, #280]	; (750 <at25dfx_chip_write_buffer+0x430>)
     636:	468c      	mov	ip, r1
     638:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     63a:	4659      	mov	r1, fp
     63c:	400b      	ands	r3, r1
     63e:	0021      	movs	r1, r4
     640:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     642:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     644:	0022      	movs	r2, r4
     646:	a902      	add	r1, sp, #8
     648:	6828      	ldr	r0, [r5, #0]
     64a:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
     64c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     64e:	09d9      	lsrs	r1, r3, #7
		return NULL;
     650:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     652:	2900      	cmp	r1, #0
     654:	d104      	bne.n	660 <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
     656:	095a      	lsrs	r2, r3, #5
     658:	01d2      	lsls	r2, r2, #7
     65a:	493d      	ldr	r1, [pc, #244]	; (750 <at25dfx_chip_write_buffer+0x430>)
     65c:	468c      	mov	ip, r1
     65e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     660:	4659      	mov	r1, fp
     662:	400b      	ands	r3, r1
     664:	0021      	movs	r1, r4
     666:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     668:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
     66a:	9a01      	ldr	r2, [sp, #4]
     66c:	4694      	mov	ip, r2
     66e:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
     670:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     672:	4657      	mov	r7, sl
     674:	2380      	movs	r3, #128	; 0x80
     676:	005b      	lsls	r3, r3, #1
     678:	459a      	cmp	sl, r3
     67a:	d901      	bls.n	680 <at25dfx_chip_write_buffer+0x360>
     67c:	4b35      	ldr	r3, [pc, #212]	; (754 <at25dfx_chip_write_buffer+0x434>)
     67e:	881f      	ldrh	r7, [r3, #0]
     680:	b2bb      	uxth	r3, r7
     682:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
     684:	2302      	movs	r3, #2
     686:	aa02      	add	r2, sp, #8
     688:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     68a:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     68c:	0a33      	lsrs	r3, r6, #8
     68e:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     690:	0c33      	lsrs	r3, r6, #16
     692:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     694:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     696:	09d9      	lsrs	r1, r3, #7
		return NULL;
     698:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     69a:	2900      	cmp	r1, #0
     69c:	d104      	bne.n	6a8 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
     69e:	095a      	lsrs	r2, r3, #5
     6a0:	01d2      	lsls	r2, r2, #7
     6a2:	492b      	ldr	r1, [pc, #172]	; (750 <at25dfx_chip_write_buffer+0x430>)
     6a4:	468c      	mov	ip, r1
     6a6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6a8:	4659      	mov	r1, fp
     6aa:	400b      	ands	r3, r1
     6ac:	0021      	movs	r1, r4
     6ae:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     6b0:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     6b2:	2204      	movs	r2, #4
     6b4:	a902      	add	r1, sp, #8
     6b6:	6828      	ldr	r0, [r5, #0]
     6b8:	4b27      	ldr	r3, [pc, #156]	; (758 <at25dfx_chip_write_buffer+0x438>)
     6ba:	4798      	blx	r3
	if (cmd.length) {
     6bc:	9b01      	ldr	r3, [sp, #4]
     6be:	2b00      	cmp	r3, #0
     6c0:	d000      	beq.n	6c4 <at25dfx_chip_write_buffer+0x3a4>
     6c2:	e754      	b.n	56e <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
     6c4:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     6c6:	09d9      	lsrs	r1, r3, #7
		return NULL;
     6c8:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     6ca:	2900      	cmp	r1, #0
     6cc:	d104      	bne.n	6d8 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
     6ce:	095a      	lsrs	r2, r3, #5
     6d0:	01d2      	lsls	r2, r2, #7
     6d2:	491f      	ldr	r1, [pc, #124]	; (750 <at25dfx_chip_write_buffer+0x430>)
     6d4:	468c      	mov	ip, r1
     6d6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6d8:	4659      	mov	r1, fp
     6da:	400b      	ands	r3, r1
     6dc:	0021      	movs	r1, r4
     6de:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     6e0:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     6e2:	682b      	ldr	r3, [r5, #0]
     6e4:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     6e6:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
     6e8:	4223      	tst	r3, r4
     6ea:	d0fc      	beq.n	6e6 <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
     6ec:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     6ee:	09d9      	lsrs	r1, r3, #7
		return NULL;
     6f0:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     6f2:	2900      	cmp	r1, #0
     6f4:	d104      	bne.n	700 <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
     6f6:	095a      	lsrs	r2, r3, #5
     6f8:	01d2      	lsls	r2, r2, #7
     6fa:	4915      	ldr	r1, [pc, #84]	; (750 <at25dfx_chip_write_buffer+0x430>)
     6fc:	468c      	mov	ip, r1
     6fe:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     700:	4659      	mov	r1, fp
     702:	400b      	ands	r3, r1
     704:	0021      	movs	r1, r4
     706:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     708:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     70a:	682b      	ldr	r3, [r5, #0]
     70c:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     70e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     710:	4222      	tst	r2, r4
     712:	d001      	beq.n	718 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     714:	2205      	movs	r2, #5
     716:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     718:	682b      	ldr	r3, [r5, #0]
     71a:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     71c:	681a      	ldr	r2, [r3, #0]
     71e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     720:	7e13      	ldrb	r3, [r2, #24]
     722:	420b      	tst	r3, r1
     724:	d0fc      	beq.n	720 <at25dfx_chip_write_buffer+0x400>
     726:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     728:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
     72a:	075b      	lsls	r3, r3, #29
     72c:	d50b      	bpl.n	746 <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     72e:	8b53      	ldrh	r3, [r2, #26]
     730:	075b      	lsls	r3, r3, #29
     732:	d501      	bpl.n	738 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     734:	2304      	movs	r3, #4
     736:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     738:	4663      	mov	r3, ip
     73a:	799b      	ldrb	r3, [r3, #6]
     73c:	2b01      	cmp	r3, #1
     73e:	d100      	bne.n	742 <at25dfx_chip_write_buffer+0x422>
     740:	e71b      	b.n	57a <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     742:	6a90      	ldr	r0, [r2, #40]	; 0x28
     744:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
     746:	2104      	movs	r1, #4
     748:	e722      	b.n	590 <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
     74a:	2000      	movs	r0, #0
     74c:	e74d      	b.n	5ea <at25dfx_chip_write_buffer+0x2ca>
     74e:	46c0      	nop			; (mov r8, r8)
     750:	41004400 	.word	0x41004400
     754:	00008888 	.word	0x00008888
     758:	00005205 	.word	0x00005205

0000075c <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
     75c:	b5f0      	push	{r4, r5, r6, r7, lr}
     75e:	b083      	sub	sp, #12
     760:	0004      	movs	r4, r0
     762:	000e      	movs	r6, r1
     764:	0015      	movs	r5, r2
	switch (type) {
     766:	7903      	ldrb	r3, [r0, #4]
     768:	2b0a      	cmp	r3, #10
     76a:	d900      	bls.n	76e <at25dfx_chip_erase_block+0x12>
     76c:	e0f2      	b.n	954 <at25dfx_chip_erase_block+0x1f8>
     76e:	009b      	lsls	r3, r3, #2
     770:	4a7b      	ldr	r2, [pc, #492]	; (960 <at25dfx_chip_erase_block+0x204>)
     772:	58d3      	ldr	r3, [r2, r3]
     774:	469f      	mov	pc, r3
		return 256 * 1024UL;
     776:	2380      	movs	r3, #128	; 0x80
     778:	02db      	lsls	r3, r3, #11
     77a:	e010      	b.n	79e <at25dfx_chip_erase_block+0x42>
		return 512 * 1024UL;
     77c:	2380      	movs	r3, #128	; 0x80
     77e:	031b      	lsls	r3, r3, #12
     780:	e00d      	b.n	79e <at25dfx_chip_erase_block+0x42>
		return 1024 * 1024UL;
     782:	2380      	movs	r3, #128	; 0x80
     784:	035b      	lsls	r3, r3, #13
     786:	e00a      	b.n	79e <at25dfx_chip_erase_block+0x42>
		return 2048 * 1024UL;
     788:	2380      	movs	r3, #128	; 0x80
     78a:	039b      	lsls	r3, r3, #14
     78c:	e007      	b.n	79e <at25dfx_chip_erase_block+0x42>
		return 4096 * 1024UL;
     78e:	2380      	movs	r3, #128	; 0x80
     790:	03db      	lsls	r3, r3, #15
     792:	e004      	b.n	79e <at25dfx_chip_erase_block+0x42>
		return 8192 * 1024UL;
     794:	2380      	movs	r3, #128	; 0x80
     796:	041b      	lsls	r3, r3, #16
     798:	e001      	b.n	79e <at25dfx_chip_erase_block+0x42>
		return 64 * 1024UL;
     79a:	2380      	movs	r3, #128	; 0x80
     79c:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     79e:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
     7a0:	429e      	cmp	r6, r3
     7a2:	d301      	bcc.n	7a8 <at25dfx_chip_erase_block+0x4c>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
     7a4:	b003      	add	sp, #12
     7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     7a8:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
     7aa:	4b6e      	ldr	r3, [pc, #440]	; (964 <at25dfx_chip_erase_block+0x208>)
     7ac:	4798      	blx	r3
	if (module->locked) {
     7ae:	793b      	ldrb	r3, [r7, #4]
     7b0:	2b00      	cmp	r3, #0
     7b2:	d000      	beq.n	7b6 <at25dfx_chip_erase_block+0x5a>
     7b4:	e0d0      	b.n	958 <at25dfx_chip_erase_block+0x1fc>
		module->locked = true;
     7b6:	3301      	adds	r3, #1
     7b8:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
     7ba:	4b6b      	ldr	r3, [pc, #428]	; (968 <at25dfx_chip_erase_block+0x20c>)
     7bc:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     7be:	2306      	movs	r3, #6
     7c0:	466a      	mov	r2, sp
     7c2:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     7c4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     7c6:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7c8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7ca:	2900      	cmp	r1, #0
     7cc:	d104      	bne.n	7d8 <at25dfx_chip_erase_block+0x7c>
		return &(ports[port_index]->Group[group_index]);
     7ce:	0953      	lsrs	r3, r2, #5
     7d0:	01db      	lsls	r3, r3, #7
     7d2:	4966      	ldr	r1, [pc, #408]	; (96c <at25dfx_chip_erase_block+0x210>)
     7d4:	468c      	mov	ip, r1
     7d6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7d8:	211f      	movs	r1, #31
     7da:	4011      	ands	r1, r2
     7dc:	2201      	movs	r2, #1
     7de:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     7e0:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     7e2:	2201      	movs	r2, #1
     7e4:	4669      	mov	r1, sp
     7e6:	6820      	ldr	r0, [r4, #0]
     7e8:	4b61      	ldr	r3, [pc, #388]	; (970 <at25dfx_chip_erase_block+0x214>)
     7ea:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     7ec:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     7ee:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7f0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7f2:	2900      	cmp	r1, #0
     7f4:	d104      	bne.n	800 <at25dfx_chip_erase_block+0xa4>
		return &(ports[port_index]->Group[group_index]);
     7f6:	0953      	lsrs	r3, r2, #5
     7f8:	01db      	lsls	r3, r3, #7
     7fa:	495c      	ldr	r1, [pc, #368]	; (96c <at25dfx_chip_erase_block+0x210>)
     7fc:	468c      	mov	ip, r1
     7fe:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     800:	211f      	movs	r1, #31
     802:	4011      	ands	r1, r2
     804:	2201      	movs	r2, #1
     806:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     808:	619a      	str	r2, [r3, #24]
	switch (block_size) {
     80a:	2d01      	cmp	r5, #1
     80c:	d006      	beq.n	81c <at25dfx_chip_erase_block+0xc0>
     80e:	2d00      	cmp	r5, #0
     810:	d063      	beq.n	8da <at25dfx_chip_erase_block+0x17e>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
     812:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
     814:	2d02      	cmp	r5, #2
     816:	d002      	beq.n	81e <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = (enum at25dfx_command_opcode)0;
     818:	2300      	movs	r3, #0
     81a:	e000      	b.n	81e <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
     81c:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
     81e:	466a      	mov	r2, sp
     820:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     822:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     824:	0a33      	lsrs	r3, r6, #8
     826:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     828:	0c36      	lsrs	r6, r6, #16
     82a:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     82c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     82e:	09d1      	lsrs	r1, r2, #7
		return NULL;
     830:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     832:	2900      	cmp	r1, #0
     834:	d104      	bne.n	840 <at25dfx_chip_erase_block+0xe4>
		return &(ports[port_index]->Group[group_index]);
     836:	0953      	lsrs	r3, r2, #5
     838:	01db      	lsls	r3, r3, #7
     83a:	494c      	ldr	r1, [pc, #304]	; (96c <at25dfx_chip_erase_block+0x210>)
     83c:	468c      	mov	ip, r1
     83e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     840:	211f      	movs	r1, #31
     842:	4011      	ands	r1, r2
     844:	2201      	movs	r2, #1
     846:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     848:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     84a:	2204      	movs	r2, #4
     84c:	4669      	mov	r1, sp
     84e:	6820      	ldr	r0, [r4, #0]
     850:	4b47      	ldr	r3, [pc, #284]	; (970 <at25dfx_chip_erase_block+0x214>)
     852:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     854:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     856:	09d1      	lsrs	r1, r2, #7
		return NULL;
     858:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     85a:	2900      	cmp	r1, #0
     85c:	d104      	bne.n	868 <at25dfx_chip_erase_block+0x10c>
		return &(ports[port_index]->Group[group_index]);
     85e:	0953      	lsrs	r3, r2, #5
     860:	01db      	lsls	r3, r3, #7
     862:	4942      	ldr	r1, [pc, #264]	; (96c <at25dfx_chip_erase_block+0x210>)
     864:	468c      	mov	ip, r1
     866:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     868:	211f      	movs	r1, #31
     86a:	4011      	ands	r1, r2
     86c:	2201      	movs	r2, #1
     86e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     870:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     872:	6823      	ldr	r3, [r4, #0]
     874:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
     876:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     878:	7e0b      	ldrb	r3, [r1, #24]
     87a:	4213      	tst	r3, r2
     87c:	d0fc      	beq.n	878 <at25dfx_chip_erase_block+0x11c>
	port_pin_set_output_level(chip->cs_pin, false);
     87e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     880:	09d1      	lsrs	r1, r2, #7
		return NULL;
     882:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     884:	2900      	cmp	r1, #0
     886:	d104      	bne.n	892 <at25dfx_chip_erase_block+0x136>
		return &(ports[port_index]->Group[group_index]);
     888:	0953      	lsrs	r3, r2, #5
     88a:	01db      	lsls	r3, r3, #7
     88c:	4937      	ldr	r1, [pc, #220]	; (96c <at25dfx_chip_erase_block+0x210>)
     88e:	468c      	mov	ip, r1
     890:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     892:	211f      	movs	r1, #31
     894:	4011      	ands	r1, r2
     896:	2201      	movs	r2, #1
     898:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     89a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     89c:	6823      	ldr	r3, [r4, #0]
     89e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8a0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     8a2:	07d2      	lsls	r2, r2, #31
     8a4:	d501      	bpl.n	8aa <at25dfx_chip_erase_block+0x14e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8a6:	2205      	movs	r2, #5
     8a8:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     8aa:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     8ac:	6802      	ldr	r2, [r0, #0]
     8ae:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     8b0:	7e13      	ldrb	r3, [r2, #24]
     8b2:	420b      	tst	r3, r1
     8b4:	d0fc      	beq.n	8b0 <at25dfx_chip_erase_block+0x154>
     8b6:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     8b8:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
     8ba:	075b      	lsls	r3, r3, #29
     8bc:	d509      	bpl.n	8d2 <at25dfx_chip_erase_block+0x176>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8be:	8b53      	ldrh	r3, [r2, #26]
     8c0:	075b      	lsls	r3, r3, #29
     8c2:	d501      	bpl.n	8c8 <at25dfx_chip_erase_block+0x16c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     8c4:	2304      	movs	r3, #4
     8c6:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8c8:	7983      	ldrb	r3, [r0, #6]
     8ca:	2b01      	cmp	r3, #1
     8cc:	d007      	beq.n	8de <at25dfx_chip_erase_block+0x182>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8ce:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8d0:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
     8d2:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8d4:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
     8d6:	2004      	movs	r0, #4
     8d8:	e00c      	b.n	8f4 <at25dfx_chip_erase_block+0x198>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
     8da:	2320      	movs	r3, #32
     8dc:	e79f      	b.n	81e <at25dfx_chip_erase_block+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     8de:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8e0:	05ed      	lsls	r5, r5, #23
     8e2:	0ded      	lsrs	r5, r5, #23
     8e4:	e7f5      	b.n	8d2 <at25dfx_chip_erase_block+0x176>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8e6:	79b3      	ldrb	r3, [r6, #6]
     8e8:	2b01      	cmp	r3, #1
     8ea:	d019      	beq.n	920 <at25dfx_chip_erase_block+0x1c4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8ec:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8ee:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
     8f0:	4229      	tst	r1, r5
     8f2:	d019      	beq.n	928 <at25dfx_chip_erase_block+0x1cc>
	SercomSpi *const spi_module = &(module->hw->SPI);
     8f4:	6823      	ldr	r3, [r4, #0]
     8f6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8f8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     8fa:	420b      	tst	r3, r1
     8fc:	d0fc      	beq.n	8f8 <at25dfx_chip_erase_block+0x19c>
     8fe:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     900:	420b      	tst	r3, r1
     902:	d000      	beq.n	906 <at25dfx_chip_erase_block+0x1aa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     904:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     906:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     908:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     90a:	7e13      	ldrb	r3, [r2, #24]
     90c:	4203      	tst	r3, r0
     90e:	d0fc      	beq.n	90a <at25dfx_chip_erase_block+0x1ae>
     910:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     912:	4203      	tst	r3, r0
     914:	d0ec      	beq.n	8f0 <at25dfx_chip_erase_block+0x194>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     916:	8b53      	ldrh	r3, [r2, #26]
     918:	4203      	tst	r3, r0
     91a:	d0e4      	beq.n	8e6 <at25dfx_chip_erase_block+0x18a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     91c:	8350      	strh	r0, [r2, #26]
     91e:	e7e2      	b.n	8e6 <at25dfx_chip_erase_block+0x18a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     920:	6a95      	ldr	r5, [r2, #40]	; 0x28
     922:	05ed      	lsls	r5, r5, #23
     924:	0ded      	lsrs	r5, r5, #23
     926:	e7e3      	b.n	8f0 <at25dfx_chip_erase_block+0x194>
	port_pin_set_output_level(chip->cs_pin, true);
     928:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     92a:	09d1      	lsrs	r1, r2, #7
		return NULL;
     92c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     92e:	2900      	cmp	r1, #0
     930:	d104      	bne.n	93c <at25dfx_chip_erase_block+0x1e0>
		return &(ports[port_index]->Group[group_index]);
     932:	0953      	lsrs	r3, r2, #5
     934:	01db      	lsls	r3, r3, #7
     936:	490d      	ldr	r1, [pc, #52]	; (96c <at25dfx_chip_erase_block+0x210>)
     938:	468c      	mov	ip, r1
     93a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     93c:	211f      	movs	r1, #31
     93e:	4011      	ands	r1, r2
     940:	2201      	movs	r2, #1
     942:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     944:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
     946:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
     948:	0fc0      	lsrs	r0, r0, #31
     94a:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
     94c:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     94e:	2200      	movs	r2, #0
     950:	711a      	strb	r2, [r3, #4]
	return status;
     952:	e727      	b.n	7a4 <at25dfx_chip_erase_block+0x48>
		return STATUS_ERR_INVALID_ARG;
     954:	2017      	movs	r0, #23
     956:	e725      	b.n	7a4 <at25dfx_chip_erase_block+0x48>
     958:	4b03      	ldr	r3, [pc, #12]	; (968 <at25dfx_chip_erase_block+0x20c>)
     95a:	4798      	blx	r3
		return status;
     95c:	2005      	movs	r0, #5
     95e:	e721      	b.n	7a4 <at25dfx_chip_erase_block+0x48>
     960:	000088b8 	.word	0x000088b8
     964:	00004785 	.word	0x00004785
     968:	000047c5 	.word	0x000047c5
     96c:	41004400 	.word	0x41004400
     970:	00005205 	.word	0x00005205

00000974 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
     974:	b570      	push	{r4, r5, r6, lr}
     976:	b082      	sub	sp, #8
     978:	0004      	movs	r4, r0
     97a:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     97c:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
     97e:	4b35      	ldr	r3, [pc, #212]	; (a54 <at25dfx_chip_set_global_sector_protect+0xe0>)
     980:	4798      	blx	r3
	if (module->locked) {
     982:	7933      	ldrb	r3, [r6, #4]
     984:	2b00      	cmp	r3, #0
     986:	d160      	bne.n	a4a <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
     988:	3301      	adds	r3, #1
     98a:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
     98c:	4b32      	ldr	r3, [pc, #200]	; (a58 <at25dfx_chip_set_global_sector_protect+0xe4>)
     98e:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     990:	2306      	movs	r3, #6
     992:	466a      	mov	r2, sp
     994:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     996:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     998:	09d1      	lsrs	r1, r2, #7
		return NULL;
     99a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     99c:	2900      	cmp	r1, #0
     99e:	d104      	bne.n	9aa <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
     9a0:	0953      	lsrs	r3, r2, #5
     9a2:	01db      	lsls	r3, r3, #7
     9a4:	492d      	ldr	r1, [pc, #180]	; (a5c <at25dfx_chip_set_global_sector_protect+0xe8>)
     9a6:	468c      	mov	ip, r1
     9a8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9aa:	211f      	movs	r1, #31
     9ac:	4011      	ands	r1, r2
     9ae:	2201      	movs	r2, #1
     9b0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     9b2:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     9b4:	2201      	movs	r2, #1
     9b6:	4669      	mov	r1, sp
     9b8:	6820      	ldr	r0, [r4, #0]
     9ba:	4b29      	ldr	r3, [pc, #164]	; (a60 <at25dfx_chip_set_global_sector_protect+0xec>)
     9bc:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     9be:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     9c0:	09d1      	lsrs	r1, r2, #7
		return NULL;
     9c2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9c4:	2900      	cmp	r1, #0
     9c6:	d104      	bne.n	9d2 <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
     9c8:	0953      	lsrs	r3, r2, #5
     9ca:	01db      	lsls	r3, r3, #7
     9cc:	4923      	ldr	r1, [pc, #140]	; (a5c <at25dfx_chip_set_global_sector_protect+0xe8>)
     9ce:	468c      	mov	ip, r1
     9d0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9d2:	211f      	movs	r1, #31
     9d4:	4011      	ands	r1, r2
     9d6:	2201      	movs	r2, #1
     9d8:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     9da:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
     9dc:	233c      	movs	r3, #60	; 0x3c
     9de:	1e6a      	subs	r2, r5, #1
     9e0:	4195      	sbcs	r5, r2
     9e2:	426d      	negs	r5, r5
     9e4:	402b      	ands	r3, r5
     9e6:	466a      	mov	r2, sp
     9e8:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
     9ea:	2301      	movs	r3, #1
     9ec:	466a      	mov	r2, sp
     9ee:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     9f0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     9f2:	09d1      	lsrs	r1, r2, #7
		return NULL;
     9f4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9f6:	2900      	cmp	r1, #0
     9f8:	d104      	bne.n	a04 <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
     9fa:	0953      	lsrs	r3, r2, #5
     9fc:	01db      	lsls	r3, r3, #7
     9fe:	4917      	ldr	r1, [pc, #92]	; (a5c <at25dfx_chip_set_global_sector_protect+0xe8>)
     a00:	468c      	mov	ip, r1
     a02:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a04:	211f      	movs	r1, #31
     a06:	4011      	ands	r1, r2
     a08:	2201      	movs	r2, #1
     a0a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     a0c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     a0e:	2201      	movs	r2, #1
     a10:	4669      	mov	r1, sp
     a12:	6820      	ldr	r0, [r4, #0]
     a14:	4d12      	ldr	r5, [pc, #72]	; (a60 <at25dfx_chip_set_global_sector_protect+0xec>)
     a16:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     a18:	2201      	movs	r2, #1
     a1a:	466b      	mov	r3, sp
     a1c:	1dd9      	adds	r1, r3, #7
     a1e:	6820      	ldr	r0, [r4, #0]
     a20:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
     a22:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     a24:	09d1      	lsrs	r1, r2, #7
		return NULL;
     a26:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     a28:	2900      	cmp	r1, #0
     a2a:	d104      	bne.n	a36 <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
     a2c:	0953      	lsrs	r3, r2, #5
     a2e:	01db      	lsls	r3, r3, #7
     a30:	490a      	ldr	r1, [pc, #40]	; (a5c <at25dfx_chip_set_global_sector_protect+0xe8>)
     a32:	468c      	mov	ip, r1
     a34:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a36:	211f      	movs	r1, #31
     a38:	4011      	ands	r1, r2
     a3a:	2201      	movs	r2, #1
     a3c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     a3e:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     a40:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     a42:	2200      	movs	r2, #0
     a44:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     a46:	2000      	movs	r0, #0
     a48:	e002      	b.n	a50 <at25dfx_chip_set_global_sector_protect+0xdc>
     a4a:	4b03      	ldr	r3, [pc, #12]	; (a58 <at25dfx_chip_set_global_sector_protect+0xe4>)
     a4c:	4798      	blx	r3
		return status;
     a4e:	2005      	movs	r0, #5
}
     a50:	b002      	add	sp, #8
     a52:	bd70      	pop	{r4, r5, r6, pc}
     a54:	00004785 	.word	0x00004785
     a58:	000047c5 	.word	0x000047c5
     a5c:	41004400 	.word	0x41004400
     a60:	00005205 	.word	0x00005205

00000a64 <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
     a64:	b5f0      	push	{r4, r5, r6, r7, lr}
     a66:	b083      	sub	sp, #12
     a68:	0004      	movs	r4, r0
     a6a:	000e      	movs	r6, r1
     a6c:	0015      	movs	r5, r2
	switch (type) {
     a6e:	7903      	ldrb	r3, [r0, #4]
     a70:	2b0a      	cmp	r3, #10
     a72:	d900      	bls.n	a76 <at25dfx_chip_set_sector_protect+0x12>
     a74:	e07f      	b.n	b76 <at25dfx_chip_set_sector_protect+0x112>
     a76:	009b      	lsls	r3, r3, #2
     a78:	4a42      	ldr	r2, [pc, #264]	; (b84 <at25dfx_chip_set_sector_protect+0x120>)
     a7a:	58d3      	ldr	r3, [r2, r3]
     a7c:	469f      	mov	pc, r3
		return 256 * 1024UL;
     a7e:	2380      	movs	r3, #128	; 0x80
     a80:	02db      	lsls	r3, r3, #11
     a82:	e010      	b.n	aa6 <at25dfx_chip_set_sector_protect+0x42>
		return 512 * 1024UL;
     a84:	2380      	movs	r3, #128	; 0x80
     a86:	031b      	lsls	r3, r3, #12
     a88:	e00d      	b.n	aa6 <at25dfx_chip_set_sector_protect+0x42>
		return 1024 * 1024UL;
     a8a:	2380      	movs	r3, #128	; 0x80
     a8c:	035b      	lsls	r3, r3, #13
     a8e:	e00a      	b.n	aa6 <at25dfx_chip_set_sector_protect+0x42>
		return 2048 * 1024UL;
     a90:	2380      	movs	r3, #128	; 0x80
     a92:	039b      	lsls	r3, r3, #14
     a94:	e007      	b.n	aa6 <at25dfx_chip_set_sector_protect+0x42>
		return 4096 * 1024UL;
     a96:	2380      	movs	r3, #128	; 0x80
     a98:	03db      	lsls	r3, r3, #15
     a9a:	e004      	b.n	aa6 <at25dfx_chip_set_sector_protect+0x42>
		return 8192 * 1024UL;
     a9c:	2380      	movs	r3, #128	; 0x80
     a9e:	041b      	lsls	r3, r3, #16
     aa0:	e001      	b.n	aa6 <at25dfx_chip_set_sector_protect+0x42>
		return 64 * 1024UL;
     aa2:	2380      	movs	r3, #128	; 0x80
     aa4:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     aa6:	2017      	movs	r0, #23
	if ((address) >= _at25dfx_get_device_size(chip->type)) {
     aa8:	429e      	cmp	r6, r3
     aaa:	d301      	bcc.n	ab0 <at25dfx_chip_set_sector_protect+0x4c>
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
     aac:	b003      	add	sp, #12
     aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     ab0:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
     ab2:	4b35      	ldr	r3, [pc, #212]	; (b88 <at25dfx_chip_set_sector_protect+0x124>)
     ab4:	4798      	blx	r3
	if (module->locked) {
     ab6:	793b      	ldrb	r3, [r7, #4]
     ab8:	2b00      	cmp	r3, #0
     aba:	d15e      	bne.n	b7a <at25dfx_chip_set_sector_protect+0x116>
		module->locked = true;
     abc:	3301      	adds	r3, #1
     abe:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
     ac0:	4b32      	ldr	r3, [pc, #200]	; (b8c <at25dfx_chip_set_sector_protect+0x128>)
     ac2:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     ac4:	2306      	movs	r3, #6
     ac6:	466a      	mov	r2, sp
     ac8:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     aca:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     acc:	09d1      	lsrs	r1, r2, #7
		return NULL;
     ace:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     ad0:	2900      	cmp	r1, #0
     ad2:	d104      	bne.n	ade <at25dfx_chip_set_sector_protect+0x7a>
		return &(ports[port_index]->Group[group_index]);
     ad4:	0953      	lsrs	r3, r2, #5
     ad6:	01db      	lsls	r3, r3, #7
     ad8:	492d      	ldr	r1, [pc, #180]	; (b90 <at25dfx_chip_set_sector_protect+0x12c>)
     ada:	468c      	mov	ip, r1
     adc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ade:	211f      	movs	r1, #31
     ae0:	4011      	ands	r1, r2
     ae2:	2201      	movs	r2, #1
     ae4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     ae6:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     ae8:	2201      	movs	r2, #1
     aea:	4669      	mov	r1, sp
     aec:	6820      	ldr	r0, [r4, #0]
     aee:	4b29      	ldr	r3, [pc, #164]	; (b94 <at25dfx_chip_set_sector_protect+0x130>)
     af0:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     af2:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     af4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     af6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     af8:	2900      	cmp	r1, #0
     afa:	d104      	bne.n	b06 <at25dfx_chip_set_sector_protect+0xa2>
		return &(ports[port_index]->Group[group_index]);
     afc:	0953      	lsrs	r3, r2, #5
     afe:	01db      	lsls	r3, r3, #7
     b00:	4923      	ldr	r1, [pc, #140]	; (b90 <at25dfx_chip_set_sector_protect+0x12c>)
     b02:	468c      	mov	ip, r1
     b04:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b06:	211f      	movs	r1, #31
     b08:	4011      	ands	r1, r2
     b0a:	2201      	movs	r2, #1
     b0c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     b0e:	619a      	str	r2, [r3, #24]
			AT25DFX_COMMAND_PROTECT_SECTOR : AT25DFX_COMMAND_UNPROTECT_SECTOR;
     b10:	2336      	movs	r3, #54	; 0x36
     b12:	2d00      	cmp	r5, #0
     b14:	d100      	bne.n	b18 <at25dfx_chip_set_sector_protect+0xb4>
     b16:	3303      	adds	r3, #3
	cmd_buffer[0] = cmd.opcode;
     b18:	466a      	mov	r2, sp
     b1a:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     b1c:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     b1e:	0a33      	lsrs	r3, r6, #8
     b20:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     b22:	0c36      	lsrs	r6, r6, #16
     b24:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     b26:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     b28:	09d1      	lsrs	r1, r2, #7
		return NULL;
     b2a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     b2c:	2900      	cmp	r1, #0
     b2e:	d104      	bne.n	b3a <at25dfx_chip_set_sector_protect+0xd6>
		return &(ports[port_index]->Group[group_index]);
     b30:	0953      	lsrs	r3, r2, #5
     b32:	01db      	lsls	r3, r3, #7
     b34:	4916      	ldr	r1, [pc, #88]	; (b90 <at25dfx_chip_set_sector_protect+0x12c>)
     b36:	468c      	mov	ip, r1
     b38:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b3a:	211f      	movs	r1, #31
     b3c:	4011      	ands	r1, r2
     b3e:	2201      	movs	r2, #1
     b40:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     b42:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     b44:	2204      	movs	r2, #4
     b46:	4669      	mov	r1, sp
     b48:	6820      	ldr	r0, [r4, #0]
     b4a:	4b12      	ldr	r3, [pc, #72]	; (b94 <at25dfx_chip_set_sector_protect+0x130>)
     b4c:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     b4e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     b50:	09d1      	lsrs	r1, r2, #7
		return NULL;
     b52:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     b54:	2900      	cmp	r1, #0
     b56:	d104      	bne.n	b62 <at25dfx_chip_set_sector_protect+0xfe>
		return &(ports[port_index]->Group[group_index]);
     b58:	0953      	lsrs	r3, r2, #5
     b5a:	01db      	lsls	r3, r3, #7
     b5c:	490c      	ldr	r1, [pc, #48]	; (b90 <at25dfx_chip_set_sector_protect+0x12c>)
     b5e:	468c      	mov	ip, r1
     b60:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b62:	211f      	movs	r1, #31
     b64:	4011      	ands	r1, r2
     b66:	2201      	movs	r2, #1
     b68:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     b6a:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
     b6c:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     b6e:	2200      	movs	r2, #0
     b70:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
     b72:	2000      	movs	r0, #0
     b74:	e79a      	b.n	aac <at25dfx_chip_set_sector_protect+0x48>
		return STATUS_ERR_INVALID_ARG;
     b76:	2017      	movs	r0, #23
     b78:	e798      	b.n	aac <at25dfx_chip_set_sector_protect+0x48>
     b7a:	4b04      	ldr	r3, [pc, #16]	; (b8c <at25dfx_chip_set_sector_protect+0x128>)
     b7c:	4798      	blx	r3
		return status;
     b7e:	2005      	movs	r0, #5
     b80:	e794      	b.n	aac <at25dfx_chip_set_sector_protect+0x48>
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	000088e4 	.word	0x000088e4
     b88:	00004785 	.word	0x00004785
     b8c:	000047c5 	.word	0x000047c5
     b90:	41004400 	.word	0x41004400
     b94:	00005205 	.word	0x00005205

00000b98 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     b98:	b530      	push	{r4, r5, lr}
     b9a:	b083      	sub	sp, #12
     b9c:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     b9e:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
     ba0:	4b1c      	ldr	r3, [pc, #112]	; (c14 <at25dfx_chip_wake+0x7c>)
     ba2:	4798      	blx	r3
	if (module->locked) {
     ba4:	792b      	ldrb	r3, [r5, #4]
     ba6:	2b00      	cmp	r3, #0
     ba8:	d12e      	bne.n	c08 <at25dfx_chip_wake+0x70>
		module->locked = true;
     baa:	3301      	adds	r3, #1
     bac:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     bae:	4b1a      	ldr	r3, [pc, #104]	; (c18 <at25dfx_chip_wake+0x80>)
     bb0:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     bb2:	23ab      	movs	r3, #171	; 0xab
     bb4:	466a      	mov	r2, sp
     bb6:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     bb8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     bba:	09d1      	lsrs	r1, r2, #7
		return NULL;
     bbc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     bbe:	2900      	cmp	r1, #0
     bc0:	d104      	bne.n	bcc <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
     bc2:	0953      	lsrs	r3, r2, #5
     bc4:	01db      	lsls	r3, r3, #7
     bc6:	4915      	ldr	r1, [pc, #84]	; (c1c <at25dfx_chip_wake+0x84>)
     bc8:	468c      	mov	ip, r1
     bca:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bcc:	211f      	movs	r1, #31
     bce:	4011      	ands	r1, r2
     bd0:	2201      	movs	r2, #1
     bd2:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     bd4:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     bd6:	2201      	movs	r2, #1
     bd8:	4669      	mov	r1, sp
     bda:	6820      	ldr	r0, [r4, #0]
     bdc:	4b10      	ldr	r3, [pc, #64]	; (c20 <at25dfx_chip_wake+0x88>)
     bde:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     be0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     be2:	09d1      	lsrs	r1, r2, #7
		return NULL;
     be4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     be6:	2900      	cmp	r1, #0
     be8:	d104      	bne.n	bf4 <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
     bea:	0953      	lsrs	r3, r2, #5
     bec:	01db      	lsls	r3, r3, #7
     bee:	490b      	ldr	r1, [pc, #44]	; (c1c <at25dfx_chip_wake+0x84>)
     bf0:	468c      	mov	ip, r1
     bf2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bf4:	211f      	movs	r1, #31
     bf6:	4011      	ands	r1, r2
     bf8:	2201      	movs	r2, #1
     bfa:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     bfc:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     bfe:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     c00:	2200      	movs	r2, #0
     c02:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     c04:	2000      	movs	r0, #0
     c06:	e002      	b.n	c0e <at25dfx_chip_wake+0x76>
     c08:	4b03      	ldr	r3, [pc, #12]	; (c18 <at25dfx_chip_wake+0x80>)
     c0a:	4798      	blx	r3
		return status;
     c0c:	2005      	movs	r0, #5
     c0e:	b003      	add	sp, #12
     c10:	bd30      	pop	{r4, r5, pc}
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	00004785 	.word	0x00004785
     c18:	000047c5 	.word	0x000047c5
     c1c:	41004400 	.word	0x41004400
     c20:	00005205 	.word	0x00005205

00000c24 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     c24:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     c26:	2000      	movs	r0, #0
     c28:	4b08      	ldr	r3, [pc, #32]	; (c4c <delay_init+0x28>)
     c2a:	4798      	blx	r3
     c2c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     c2e:	4c08      	ldr	r4, [pc, #32]	; (c50 <delay_init+0x2c>)
     c30:	21fa      	movs	r1, #250	; 0xfa
     c32:	0089      	lsls	r1, r1, #2
     c34:	47a0      	blx	r4
     c36:	4b07      	ldr	r3, [pc, #28]	; (c54 <delay_init+0x30>)
     c38:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     c3a:	4907      	ldr	r1, [pc, #28]	; (c58 <delay_init+0x34>)
     c3c:	0028      	movs	r0, r5
     c3e:	47a0      	blx	r4
     c40:	4b06      	ldr	r3, [pc, #24]	; (c5c <delay_init+0x38>)
     c42:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     c44:	2205      	movs	r2, #5
     c46:	4b06      	ldr	r3, [pc, #24]	; (c60 <delay_init+0x3c>)
     c48:	601a      	str	r2, [r3, #0]
}
     c4a:	bd70      	pop	{r4, r5, r6, pc}
     c4c:	00005fbd 	.word	0x00005fbd
     c50:	000070b9 	.word	0x000070b9
     c54:	20000000 	.word	0x20000000
     c58:	000f4240 	.word	0x000f4240
     c5c:	20000004 	.word	0x20000004
     c60:	e000e010 	.word	0xe000e010

00000c64 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     c64:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     c66:	4b08      	ldr	r3, [pc, #32]	; (c88 <delay_cycles_ms+0x24>)
     c68:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     c6a:	4a08      	ldr	r2, [pc, #32]	; (c8c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     c6c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     c6e:	2180      	movs	r1, #128	; 0x80
     c70:	0249      	lsls	r1, r1, #9
	while (n--) {
     c72:	3801      	subs	r0, #1
     c74:	d307      	bcc.n	c86 <delay_cycles_ms+0x22>
	if (n > 0) {
     c76:	2c00      	cmp	r4, #0
     c78:	d0fb      	beq.n	c72 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     c7a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     c7c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     c7e:	6813      	ldr	r3, [r2, #0]
     c80:	420b      	tst	r3, r1
     c82:	d0fc      	beq.n	c7e <delay_cycles_ms+0x1a>
     c84:	e7f5      	b.n	c72 <delay_cycles_ms+0xe>
	}
}
     c86:	bd30      	pop	{r4, r5, pc}
     c88:	20000000 	.word	0x20000000
     c8c:	e000e010 	.word	0xe000e010

00000c90 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     c90:	b510      	push	{r4, lr}
	if (gpfIsr) {
     c92:	4b03      	ldr	r3, [pc, #12]	; (ca0 <chip_isr+0x10>)
     c94:	681b      	ldr	r3, [r3, #0]
     c96:	2b00      	cmp	r3, #0
     c98:	d000      	beq.n	c9c <chip_isr+0xc>
		gpfIsr();
     c9a:	4798      	blx	r3
	}
}
     c9c:	bd10      	pop	{r4, pc}
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	200002a4 	.word	0x200002a4

00000ca4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     ca4:	b570      	push	{r4, r5, r6, lr}
     ca6:	b082      	sub	sp, #8
	gpfIsr = NULL;
     ca8:	2300      	movs	r3, #0
     caa:	4a14      	ldr	r2, [pc, #80]	; (cfc <nm_bsp_init+0x58>)
     cac:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     cae:	ac01      	add	r4, sp, #4
     cb0:	2501      	movs	r5, #1
     cb2:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     cb4:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     cb6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     cb8:	0021      	movs	r1, r4
     cba:	2026      	movs	r0, #38	; 0x26
     cbc:	4e10      	ldr	r6, [pc, #64]	; (d00 <nm_bsp_init+0x5c>)
     cbe:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     cc0:	0021      	movs	r1, r4
     cc2:	2025      	movs	r0, #37	; 0x25
     cc4:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     cc6:	0021      	movs	r1, r4
     cc8:	2027      	movs	r0, #39	; 0x27
     cca:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     ccc:	4b0d      	ldr	r3, [pc, #52]	; (d04 <nm_bsp_init+0x60>)
     cce:	2220      	movs	r2, #32
     cd0:	615a      	str	r2, [r3, #20]
     cd2:	3220      	adds	r2, #32
     cd4:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     cd6:	4b0c      	ldr	r3, [pc, #48]	; (d08 <nm_bsp_init+0x64>)
     cd8:	681b      	ldr	r3, [r3, #0]
     cda:	421d      	tst	r5, r3
     cdc:	d003      	beq.n	ce6 <nm_bsp_init+0x42>
     cde:	4b0a      	ldr	r3, [pc, #40]	; (d08 <nm_bsp_init+0x64>)
     ce0:	681b      	ldr	r3, [r3, #0]
     ce2:	079b      	lsls	r3, r3, #30
     ce4:	d401      	bmi.n	cea <nm_bsp_init+0x46>
	    delay_init();
     ce6:	4b09      	ldr	r3, [pc, #36]	; (d0c <nm_bsp_init+0x68>)
     ce8:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     cea:	2201      	movs	r2, #1
     cec:	4b08      	ldr	r3, [pc, #32]	; (d10 <nm_bsp_init+0x6c>)
     cee:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     cf0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     cf4:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
     cf6:	2000      	movs	r0, #0
     cf8:	b002      	add	sp, #8
     cfa:	bd70      	pop	{r4, r5, r6, pc}
     cfc:	200002a4 	.word	0x200002a4
     d00:	000049fd 	.word	0x000049fd
     d04:	41004480 	.word	0x41004480
     d08:	e000e010 	.word	0xe000e010
     d0c:	00000c25 	.word	0x00000c25
     d10:	2000000a 	.word	0x2000000a

00000d14 <nm_bsp_deinit>:
 *	@fn		nm_bsp_deinit
 *	@brief	De-iInitialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
     d14:	b500      	push	{lr}
     d16:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     d18:	a901      	add	r1, sp, #4
     d1a:	2300      	movs	r3, #0
     d1c:	700b      	strb	r3, [r1, #0]
	config->powersave  = false;
     d1e:	708b      	strb	r3, [r1, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     d20:	704b      	strb	r3, [r1, #1]
		port_base->OUTCLR.reg = pin_mask;
     d22:	4b05      	ldr	r3, [pc, #20]	; (d38 <nm_bsp_deinit+0x24>)
     d24:	2220      	movs	r2, #32
     d26:	615a      	str	r2, [r3, #20]
     d28:	3220      	adds	r2, #32
     d2a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
	port_pin_set_config(CONF_WINC_SPI_INT_PIN, &pin_conf);
     d2c:	2024      	movs	r0, #36	; 0x24
     d2e:	4b03      	ldr	r3, [pc, #12]	; (d3c <nm_bsp_deinit+0x28>)
     d30:	4798      	blx	r3
	return M2M_SUCCESS;
}
     d32:	2000      	movs	r0, #0
     d34:	b003      	add	sp, #12
     d36:	bd00      	pop	{pc}
     d38:	41004480 	.word	0x41004480
     d3c:	000049fd 	.word	0x000049fd

00000d40 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     d40:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     d42:	1e44      	subs	r4, r0, #1
     d44:	2800      	cmp	r0, #0
     d46:	d004      	beq.n	d52 <nm_bsp_sleep+0x12>
		delay_ms(1);
     d48:	4d02      	ldr	r5, [pc, #8]	; (d54 <nm_bsp_sleep+0x14>)
     d4a:	2001      	movs	r0, #1
     d4c:	47a8      	blx	r5
	while (u32TimeMsec--) {
     d4e:	3c01      	subs	r4, #1
     d50:	d2fb      	bcs.n	d4a <nm_bsp_sleep+0xa>
	}
}
     d52:	bd70      	pop	{r4, r5, r6, pc}
     d54:	00000c65 	.word	0x00000c65

00000d58 <nm_bsp_reset>:
{
     d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d5a:	4c06      	ldr	r4, [pc, #24]	; (d74 <nm_bsp_reset+0x1c>)
     d5c:	2720      	movs	r7, #32
     d5e:	6167      	str	r7, [r4, #20]
     d60:	2540      	movs	r5, #64	; 0x40
     d62:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
     d64:	2001      	movs	r0, #1
     d66:	4e04      	ldr	r6, [pc, #16]	; (d78 <nm_bsp_reset+0x20>)
     d68:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     d6a:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
     d6c:	200a      	movs	r0, #10
     d6e:	47b0      	blx	r6
     d70:	61a5      	str	r5, [r4, #24]
}
     d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d74:	41004480 	.word	0x41004480
     d78:	00000d41 	.word	0x00000d41

00000d7c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     d7c:	b510      	push	{r4, lr}
     d7e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     d80:	4b0e      	ldr	r3, [pc, #56]	; (dbc <nm_bsp_register_isr+0x40>)
     d82:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     d84:	ac01      	add	r4, sp, #4
     d86:	0020      	movs	r0, r4
     d88:	4b0d      	ldr	r3, [pc, #52]	; (dc0 <nm_bsp_register_isr+0x44>)
     d8a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     d8c:	2324      	movs	r3, #36	; 0x24
     d8e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     d90:	2300      	movs	r3, #0
     d92:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     d94:	3301      	adds	r3, #1
     d96:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     d98:	3301      	adds	r3, #1
     d9a:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     d9c:	0021      	movs	r1, r4
     d9e:	2004      	movs	r0, #4
     da0:	4b08      	ldr	r3, [pc, #32]	; (dc4 <nm_bsp_register_isr+0x48>)
     da2:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     da4:	2200      	movs	r2, #0
     da6:	2104      	movs	r1, #4
     da8:	4807      	ldr	r0, [pc, #28]	; (dc8 <nm_bsp_register_isr+0x4c>)
     daa:	4b08      	ldr	r3, [pc, #32]	; (dcc <nm_bsp_register_isr+0x50>)
     dac:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     dae:	2100      	movs	r1, #0
     db0:	2004      	movs	r0, #4
     db2:	4b07      	ldr	r3, [pc, #28]	; (dd0 <nm_bsp_register_isr+0x54>)
     db4:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     db6:	b004      	add	sp, #16
     db8:	bd10      	pop	{r4, pc}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	200002a4 	.word	0x200002a4
     dc0:	00004971 	.word	0x00004971
     dc4:	00004985 	.word	0x00004985
     dc8:	00000c91 	.word	0x00000c91
     dcc:	0000482d 	.word	0x0000482d
     dd0:	00004859 	.word	0x00004859

00000dd4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     dd4:	b510      	push	{r4, lr}
	if (u8Enable) {
     dd6:	2800      	cmp	r0, #0
     dd8:	d104      	bne.n	de4 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     dda:	2100      	movs	r1, #0
     ddc:	2004      	movs	r0, #4
     dde:	4b04      	ldr	r3, [pc, #16]	; (df0 <nm_bsp_interrupt_ctrl+0x1c>)
     de0:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     de2:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     de4:	2100      	movs	r1, #0
     de6:	2004      	movs	r0, #4
     de8:	4b02      	ldr	r3, [pc, #8]	; (df4 <nm_bsp_interrupt_ctrl+0x20>)
     dea:	4798      	blx	r3
     dec:	e7f9      	b.n	de2 <nm_bsp_interrupt_ctrl+0xe>
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	00004879 	.word	0x00004879
     df4:	00004859 	.word	0x00004859

00000df8 <spi_rw>:

	return M2M_SUCCESS;
}

sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     df8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfa:	46de      	mov	lr, fp
     dfc:	4657      	mov	r7, sl
     dfe:	464e      	mov	r6, r9
     e00:	4645      	mov	r5, r8
     e02:	b5e0      	push	{r5, r6, r7, lr}
     e04:	b083      	sub	sp, #12
     e06:	0007      	movs	r7, r0
     e08:	000e      	movs	r6, r1
     e0a:	0014      	movs	r4, r2
	uint8 u8Dummy = 0;
     e0c:	2200      	movs	r2, #0
     e0e:	466b      	mov	r3, sp
     e10:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     e12:	2900      	cmp	r1, #0
     e14:	d00c      	beq.n	e30 <spi_rw+0x38>
     e16:	2c00      	cmp	r4, #0
     e18:	d068      	beq.n	eec <spi_rw+0xf4>
		return M2M_ERR_BUS_FAIL;
     e1a:	2006      	movs	r0, #6
     e1c:	4240      	negs	r0, r0
	if (!pu8Mosi) {
     e1e:	2f00      	cmp	r7, #0
     e20:	d15a      	bne.n	ed8 <spi_rw+0xe0>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     e22:	2300      	movs	r3, #0
     e24:	469b      	mov	fp, r3
		u8SkipMosi = 1;
     e26:	3301      	adds	r3, #1
     e28:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     e2a:	466b      	mov	r3, sp
     e2c:	1ddf      	adds	r7, r3, #7
     e2e:	e009      	b.n	e44 <spi_rw+0x4c>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     e30:	2800      	cmp	r0, #0
     e32:	d058      	beq.n	ee6 <spi_rw+0xee>
     e34:	2c00      	cmp	r4, #0
     e36:	d05c      	beq.n	ef2 <spi_rw+0xfa>
		u8SkipMiso = 1;
     e38:	2301      	movs	r3, #1
     e3a:	469b      	mov	fp, r3
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     e3c:	2300      	movs	r3, #0
     e3e:	4698      	mov	r8, r3
		pu8Miso = &u8Dummy;
     e40:	466b      	mov	r3, sp
     e42:	1dde      	adds	r6, r3, #7
	spi_select_slave(&master, &slave_inst, true);
     e44:	2201      	movs	r2, #1
     e46:	492c      	ldr	r1, [pc, #176]	; (ef8 <spi_rw+0x100>)
     e48:	482c      	ldr	r0, [pc, #176]	; (efc <spi_rw+0x104>)
     e4a:	4b2d      	ldr	r3, [pc, #180]	; (f00 <spi_rw+0x108>)
     e4c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     e4e:	4b2b      	ldr	r3, [pc, #172]	; (efc <spi_rw+0x104>)
     e50:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
     e52:	2501      	movs	r5, #1
		while (!spi_is_ready_to_read(&master))
     e54:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e56:	4699      	mov	r9, r3
			pu8Miso++;
     e58:	465a      	mov	r2, fp
     e5a:	4253      	negs	r3, r2
     e5c:	415a      	adcs	r2, r3
     e5e:	4693      	mov	fp, r2
		txd_data = *pu8Mosi;
     e60:	7838      	ldrb	r0, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     e62:	4653      	mov	r3, sl
     e64:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e66:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     e68:	422a      	tst	r2, r5
     e6a:	d0fc      	beq.n	e66 <spi_rw+0x6e>
     e6c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     e6e:	422a      	tst	r2, r5
     e70:	d0fc      	beq.n	e6c <spi_rw+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e72:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e74:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     e76:	420a      	tst	r2, r1
     e78:	d0fc      	beq.n	e74 <spi_rw+0x7c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e7a:	464a      	mov	r2, r9
     e7c:	7992      	ldrb	r2, [r2, #6]
     e7e:	4694      	mov	ip, r2
     e80:	e006      	b.n	e90 <spi_rw+0x98>
     e82:	4660      	mov	r0, ip
     e84:	2801      	cmp	r0, #1
     e86:	d00d      	beq.n	ea4 <spi_rw+0xac>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e88:	6a98      	ldr	r0, [r3, #40]	; 0x28
     e8a:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     e8c:	2a00      	cmp	r2, #0
     e8e:	d00d      	beq.n	eac <spi_rw+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e90:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     e92:	420a      	tst	r2, r1
     e94:	d0fc      	beq.n	e90 <spi_rw+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     e96:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     e98:	2200      	movs	r2, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     e9a:	4208      	tst	r0, r1
     e9c:	d0f1      	beq.n	e82 <spi_rw+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     e9e:	8359      	strh	r1, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     ea0:	321e      	adds	r2, #30
     ea2:	e7ee      	b.n	e82 <spi_rw+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     ea4:	6a98      	ldr	r0, [r3, #40]	; 0x28
     ea6:	05c0      	lsls	r0, r0, #23
     ea8:	0dc0      	lsrs	r0, r0, #23
     eaa:	e7ef      	b.n	e8c <spi_rw+0x94>
		*pu8Miso = rxd_data;
     eac:	7030      	strb	r0, [r6, #0]
		u16Sz--;
     eae:	3c01      	subs	r4, #1
     eb0:	b2a4      	uxth	r4, r4
			pu8Miso++;
     eb2:	445e      	add	r6, fp
			pu8Mosi++;
     eb4:	4643      	mov	r3, r8
     eb6:	425a      	negs	r2, r3
     eb8:	4153      	adcs	r3, r2
     eba:	18ff      	adds	r7, r7, r3
	while (u16Sz) {
     ebc:	2c00      	cmp	r4, #0
     ebe:	d1cf      	bne.n	e60 <spi_rw+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ec0:	4b0e      	ldr	r3, [pc, #56]	; (efc <spi_rw+0x104>)
     ec2:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
     ec4:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ec6:	7e0b      	ldrb	r3, [r1, #24]
     ec8:	4213      	tst	r3, r2
     eca:	d0fc      	beq.n	ec6 <spi_rw+0xce>
	spi_select_slave(&master, &slave_inst, false);
     ecc:	2200      	movs	r2, #0
     ece:	490a      	ldr	r1, [pc, #40]	; (ef8 <spi_rw+0x100>)
     ed0:	480a      	ldr	r0, [pc, #40]	; (efc <spi_rw+0x104>)
     ed2:	4b0b      	ldr	r3, [pc, #44]	; (f00 <spi_rw+0x108>)
     ed4:	4798      	blx	r3
	return M2M_SUCCESS;
     ed6:	2000      	movs	r0, #0
	else
#endif //CONF_WINC_SPI_DMA
	{
		return spi_rw_pio(pu8Mosi, pu8Miso, u16Sz);
	}
}
     ed8:	b003      	add	sp, #12
     eda:	bc3c      	pop	{r2, r3, r4, r5}
     edc:	4690      	mov	r8, r2
     ede:	4699      	mov	r9, r3
     ee0:	46a2      	mov	sl, r4
     ee2:	46ab      	mov	fp, r5
     ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     ee6:	200f      	movs	r0, #15
     ee8:	4240      	negs	r0, r0
     eea:	e7f5      	b.n	ed8 <spi_rw+0xe0>
     eec:	200f      	movs	r0, #15
     eee:	4240      	negs	r0, r0
     ef0:	e7f2      	b.n	ed8 <spi_rw+0xe0>
     ef2:	200f      	movs	r0, #15
     ef4:	4240      	negs	r0, r0
		return spi_rw_pio(pu8Mosi, pu8Miso, u16Sz);
     ef6:	e7ef      	b.n	ed8 <spi_rw+0xe0>
     ef8:	20001460 	.word	0x20001460
     efc:	20001464 	.word	0x20001464
     f00:	00005111 	.word	0x00005111

00000f04 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     f04:	b530      	push	{r4, r5, lr}
     f06:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
     f08:	4c30      	ldr	r4, [pc, #192]	; (fcc <nm_bus_init+0xc8>)
     f0a:	2305      	movs	r3, #5
     f0c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     f0e:	2300      	movs	r3, #0
     f10:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     f12:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     f14:	a901      	add	r1, sp, #4
     f16:	2201      	movs	r2, #1
     f18:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     f1a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     f1c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     f1e:	2005      	movs	r0, #5
     f20:	4b2b      	ldr	r3, [pc, #172]	; (fd0 <nm_bus_init+0xcc>)
     f22:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     f24:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
     f26:	09d1      	lsrs	r1, r2, #7
		return NULL;
     f28:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     f2a:	2900      	cmp	r1, #0
     f2c:	d104      	bne.n	f38 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     f2e:	0953      	lsrs	r3, r2, #5
     f30:	01db      	lsls	r3, r3, #7
     f32:	4928      	ldr	r1, [pc, #160]	; (fd4 <nm_bus_init+0xd0>)
     f34:	468c      	mov	ip, r1
     f36:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f38:	211f      	movs	r1, #31
     f3a:	4011      	ands	r1, r2
     f3c:	2201      	movs	r2, #1
     f3e:	0010      	movs	r0, r2
     f40:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     f42:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     f44:	ac02      	add	r4, sp, #8
     f46:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     f48:	2300      	movs	r3, #0
     f4a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     f4c:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     f4e:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     f50:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     f52:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     f54:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     f56:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     f58:	3223      	adds	r2, #35	; 0x23
     f5a:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     f5c:	3a18      	subs	r2, #24
     f5e:	2100      	movs	r1, #0
     f60:	a808      	add	r0, sp, #32
     f62:	4b1d      	ldr	r3, [pc, #116]	; (fd8 <nm_bus_init+0xd4>)
     f64:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     f66:	2380      	movs	r3, #128	; 0x80
     f68:	025b      	lsls	r3, r3, #9
     f6a:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     f6c:	4b1b      	ldr	r3, [pc, #108]	; (fdc <nm_bus_init+0xd8>)
     f6e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     f70:	2301      	movs	r3, #1
     f72:	425b      	negs	r3, r3
     f74:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     f76:	4b1a      	ldr	r3, [pc, #104]	; (fe0 <nm_bus_init+0xdc>)
     f78:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     f7a:	4b1a      	ldr	r3, [pc, #104]	; (fe4 <nm_bus_init+0xe0>)
     f7c:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     f7e:	4b1a      	ldr	r3, [pc, #104]	; (fe8 <nm_bus_init+0xe4>)
     f80:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     f82:	0022      	movs	r2, r4
     f84:	4919      	ldr	r1, [pc, #100]	; (fec <nm_bus_init+0xe8>)
     f86:	481a      	ldr	r0, [pc, #104]	; (ff0 <nm_bus_init+0xec>)
     f88:	4b1a      	ldr	r3, [pc, #104]	; (ff4 <nm_bus_init+0xf0>)
     f8a:	4798      	blx	r3
     f8c:	2800      	cmp	r0, #0
     f8e:	d11a      	bne.n	fc6 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
     f90:	4d17      	ldr	r5, [pc, #92]	; (ff0 <nm_bus_init+0xec>)
     f92:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     f94:	0020      	movs	r0, r4
     f96:	4b18      	ldr	r3, [pc, #96]	; (ff8 <nm_bus_init+0xf4>)
     f98:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     f9a:	231f      	movs	r3, #31
     f9c:	4018      	ands	r0, r3
     f9e:	3b1e      	subs	r3, #30
     fa0:	4083      	lsls	r3, r0
     fa2:	4a16      	ldr	r2, [pc, #88]	; (ffc <nm_bus_init+0xf8>)
     fa4:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     fa6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     fa8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     faa:	2b00      	cmp	r3, #0
     fac:	d1fc      	bne.n	fa8 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     fae:	6823      	ldr	r3, [r4, #0]
     fb0:	2202      	movs	r2, #2
     fb2:	4313      	orrs	r3, r2
     fb4:	6023      	str	r3, [r4, #0]
		dma_cfg_rx.source_address       = (uint32_t)(&master.hw->SPI.DATA.reg);
		dma_cfg_rx.src_increment_enable = false;
	}
#endif

	nm_bsp_reset();
     fb6:	4b12      	ldr	r3, [pc, #72]	; (1000 <nm_bus_init+0xfc>)
     fb8:	4798      	blx	r3
	nm_bsp_sleep(1);
     fba:	2001      	movs	r0, #1
     fbc:	4b11      	ldr	r3, [pc, #68]	; (1004 <nm_bus_init+0x100>)
     fbe:	4798      	blx	r3
#endif
	return result;
     fc0:	2000      	movs	r0, #0
}
     fc2:	b011      	add	sp, #68	; 0x44
     fc4:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     fc6:	2006      	movs	r0, #6
     fc8:	4240      	negs	r0, r0
     fca:	e7fa      	b.n	fc2 <nm_bus_init+0xbe>
     fcc:	20001460 	.word	0x20001460
     fd0:	000049fd 	.word	0x000049fd
     fd4:	41004400 	.word	0x41004400
     fd8:	00007499 	.word	0x00007499
     fdc:	00040003 	.word	0x00040003
     fe0:	00060003 	.word	0x00060003
     fe4:	00070003 	.word	0x00070003
     fe8:	00b71b00 	.word	0x00b71b00
     fec:	42000800 	.word	0x42000800
     ff0:	20001464 	.word	0x20001464
     ff4:	00004e65 	.word	0x00004e65
     ff8:	00004dd5 	.word	0x00004dd5
     ffc:	e000e100 	.word	0xe000e100
    1000:	00000d59 	.word	0x00000d59
    1004:	00000d41 	.word	0x00000d41

00001008 <nm_bus_ioctl>:
*					Arbitrary parameter depending on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    1008:	b510      	push	{r4, lr}
	sint8 s8Ret = 0;
	switch(u8Cmd)
    100a:	2803      	cmp	r0, #3
    100c:	d106      	bne.n	101c <nm_bus_ioctl+0x14>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    100e:	890a      	ldrh	r2, [r1, #8]
    1010:	684b      	ldr	r3, [r1, #4]
    1012:	6808      	ldr	r0, [r1, #0]
    1014:	0019      	movs	r1, r3
    1016:	4b09      	ldr	r3, [pc, #36]	; (103c <nm_bus_ioctl+0x34>)
    1018:	4798      	blx	r3
			M2M_ERR("invalid ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    101a:	bd10      	pop	{r4, pc}
			M2M_ERR("invalid ioclt cmd\n");
    101c:	22b8      	movs	r2, #184	; 0xb8
    101e:	0052      	lsls	r2, r2, #1
    1020:	4907      	ldr	r1, [pc, #28]	; (1040 <nm_bus_ioctl+0x38>)
    1022:	4808      	ldr	r0, [pc, #32]	; (1044 <nm_bus_ioctl+0x3c>)
    1024:	4b08      	ldr	r3, [pc, #32]	; (1048 <nm_bus_ioctl+0x40>)
    1026:	4798      	blx	r3
    1028:	4808      	ldr	r0, [pc, #32]	; (104c <nm_bus_ioctl+0x44>)
    102a:	4b09      	ldr	r3, [pc, #36]	; (1050 <nm_bus_ioctl+0x48>)
    102c:	4798      	blx	r3
    102e:	200d      	movs	r0, #13
    1030:	4b08      	ldr	r3, [pc, #32]	; (1054 <nm_bus_ioctl+0x4c>)
    1032:	4798      	blx	r3
			s8Ret = -1;
    1034:	2001      	movs	r0, #1
    1036:	4240      	negs	r0, r0
			break;
    1038:	e7ef      	b.n	101a <nm_bus_ioctl+0x12>
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	00000df9 	.word	0x00000df9
    1040:	00008910 	.word	0x00008910
    1044:	00008920 	.word	0x00008920
    1048:	000075f9 	.word	0x000075f9
    104c:	00008934 	.word	0x00008934
    1050:	00007715 	.word	0x00007715
    1054:	0000762d 	.word	0x0000762d

00001058 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    1058:	b530      	push	{r4, r5, lr}
    105a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    105c:	ab01      	add	r3, sp, #4
    105e:	2200      	movs	r2, #0
    1060:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    1062:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    1064:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	nm_bsp_deinit();
    1066:	4b14      	ldr	r3, [pc, #80]	; (10b8 <nm_bus_deinit+0x60>)
    1068:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    106a:	4d14      	ldr	r5, [pc, #80]	; (10bc <nm_bus_deinit+0x64>)
    106c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    106e:	0020      	movs	r0, r4
    1070:	4b13      	ldr	r3, [pc, #76]	; (10c0 <nm_bus_deinit+0x68>)
    1072:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1074:	231f      	movs	r3, #31
    1076:	4018      	ands	r0, r3
    1078:	3b1e      	subs	r3, #30
    107a:	4083      	lsls	r3, r0
    107c:	2280      	movs	r2, #128	; 0x80
    107e:	4911      	ldr	r1, [pc, #68]	; (10c4 <nm_bus_deinit+0x6c>)
    1080:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1082:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1084:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1086:	2b00      	cmp	r3, #0
    1088:	d1fc      	bne.n	1084 <nm_bus_deinit+0x2c>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    108a:	338f      	adds	r3, #143	; 0x8f
    108c:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    108e:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1090:	6823      	ldr	r3, [r4, #0]
    1092:	2202      	movs	r2, #2
    1094:	4393      	bics	r3, r2
    1096:	6023      	str	r3, [r4, #0]

	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    1098:	a901      	add	r1, sp, #4
    109a:	2006      	movs	r0, #6
    109c:	4c0a      	ldr	r4, [pc, #40]	; (10c8 <nm_bus_deinit+0x70>)
    109e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    10a0:	a901      	add	r1, sp, #4
    10a2:	2004      	movs	r0, #4
    10a4:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    10a6:	a901      	add	r1, sp, #4
    10a8:	2007      	movs	r0, #7
    10aa:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    10ac:	a901      	add	r1, sp, #4
    10ae:	2005      	movs	r0, #5
    10b0:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    10b2:	2000      	movs	r0, #0
    10b4:	b003      	add	sp, #12
    10b6:	bd30      	pop	{r4, r5, pc}
    10b8:	00000d15 	.word	0x00000d15
    10bc:	20001464 	.word	0x20001464
    10c0:	00004dd5 	.word	0x00004dd5
    10c4:	e000e100 	.word	0xe000e100
    10c8:	000049fd 	.word	0x000049fd

000010cc <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    10cc:	2a00      	cmp	r2, #0
    10ce:	d006      	beq.n	10de <m2m_memcpy+0x12>
    10d0:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    10d2:	780b      	ldrb	r3, [r1, #0]
    10d4:	7003      	strb	r3, [r0, #0]
		pDst++;
    10d6:	3001      	adds	r0, #1
		pSrc++;
    10d8:	3101      	adds	r1, #1
	}while(--sz);
    10da:	4290      	cmp	r0, r2
    10dc:	d1f9      	bne.n	10d2 <m2m_memcpy+0x6>
}
    10de:	4770      	bx	lr

000010e0 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    10e0:	2a00      	cmp	r2, #0
    10e2:	d004      	beq.n	10ee <m2m_memset+0xe>
    10e4:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    10e6:	7001      	strb	r1, [r0, #0]
		pBuf++;
    10e8:	3001      	adds	r0, #1
	}while(--sz);
    10ea:	4290      	cmp	r0, r2
    10ec:	d1fb      	bne.n	10e6 <m2m_memset+0x6>
}
    10ee:	4770      	bx	lr

000010f0 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    10f0:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    10f2:	7802      	ldrb	r2, [r0, #0]
    10f4:	2a00      	cmp	r2, #0
    10f6:	d007      	beq.n	1108 <m2m_strlen+0x18>
    10f8:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    10fa:	3001      	adds	r0, #1
    10fc:	b280      	uxth	r0, r0
		pcStr++;
    10fe:	3301      	adds	r3, #1
	while(*pcStr)
    1100:	781a      	ldrb	r2, [r3, #0]
    1102:	2a00      	cmp	r2, #0
    1104:	d1f9      	bne.n	10fa <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    1106:	4770      	bx	lr
	uint16	u16StrLen = 0;
    1108:	2000      	movs	r0, #0
    110a:	e7fc      	b.n	1106 <m2m_strlen+0x16>

0000110c <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    110c:	4a02      	ldr	r2, [pc, #8]	; (1118 <isr+0xc>)
    110e:	78d3      	ldrb	r3, [r2, #3]
    1110:	3301      	adds	r3, #1
    1112:	b2db      	uxtb	r3, r3
    1114:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    1116:	4770      	bx	lr
    1118:	200014a0 	.word	0x200014a0

0000111c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    111c:	4770      	bx	lr
	...

00001120 <hif_set_rx_done>:
{
    1120:	b500      	push	{lr}
    1122:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    1124:	2200      	movs	r2, #0
    1126:	4b0a      	ldr	r3, [pc, #40]	; (1150 <hif_set_rx_done+0x30>)
    1128:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    112a:	2001      	movs	r0, #1
    112c:	4b09      	ldr	r3, [pc, #36]	; (1154 <hif_set_rx_done+0x34>)
    112e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    1130:	a901      	add	r1, sp, #4
    1132:	4809      	ldr	r0, [pc, #36]	; (1158 <hif_set_rx_done+0x38>)
    1134:	4b09      	ldr	r3, [pc, #36]	; (115c <hif_set_rx_done+0x3c>)
    1136:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1138:	2800      	cmp	r0, #0
    113a:	d001      	beq.n	1140 <hif_set_rx_done+0x20>
}
    113c:	b003      	add	sp, #12
    113e:	bd00      	pop	{pc}
	reg |= NBIT1;
    1140:	2102      	movs	r1, #2
    1142:	9b01      	ldr	r3, [sp, #4]
    1144:	4319      	orrs	r1, r3
    1146:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1148:	4803      	ldr	r0, [pc, #12]	; (1158 <hif_set_rx_done+0x38>)
    114a:	4b05      	ldr	r3, [pc, #20]	; (1160 <hif_set_rx_done+0x40>)
    114c:	4798      	blx	r3
    114e:	e7f5      	b.n	113c <hif_set_rx_done+0x1c>
    1150:	200014a0 	.word	0x200014a0
    1154:	00000dd5 	.word	0x00000dd5
    1158:	00001070 	.word	0x00001070
    115c:	00002df9 	.word	0x00002df9
    1160:	00002e05 	.word	0x00002e05

00001164 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    1164:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    1166:	4b0c      	ldr	r3, [pc, #48]	; (1198 <hif_chip_wake+0x34>)
    1168:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    116a:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    116c:	2b00      	cmp	r3, #0
    116e:	d10d      	bne.n	118c <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    1170:	4b09      	ldr	r3, [pc, #36]	; (1198 <hif_chip_wake+0x34>)
    1172:	785b      	ldrb	r3, [r3, #1]
    1174:	2b00      	cmp	r3, #0
    1176:	d103      	bne.n	1180 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    1178:	4b07      	ldr	r3, [pc, #28]	; (1198 <hif_chip_wake+0x34>)
    117a:	781b      	ldrb	r3, [r3, #0]
    117c:	2b00      	cmp	r3, #0
    117e:	d106      	bne.n	118e <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    1180:	4a05      	ldr	r2, [pc, #20]	; (1198 <hif_chip_wake+0x34>)
    1182:	7853      	ldrb	r3, [r2, #1]
    1184:	3301      	adds	r3, #1
    1186:	b2db      	uxtb	r3, r3
    1188:	7053      	strb	r3, [r2, #1]
    118a:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    118c:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    118e:	4b03      	ldr	r3, [pc, #12]	; (119c <hif_chip_wake+0x38>)
    1190:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    1192:	2800      	cmp	r0, #0
    1194:	d0f4      	beq.n	1180 <hif_chip_wake+0x1c>
    1196:	e7f9      	b.n	118c <hif_chip_wake+0x28>
    1198:	200014a0 	.word	0x200014a0
    119c:	000029b5 	.word	0x000029b5

000011a0 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    11a0:	4b05      	ldr	r3, [pc, #20]	; (11b8 <hif_chip_sleep_sc+0x18>)
    11a2:	785b      	ldrb	r3, [r3, #1]
    11a4:	2b00      	cmp	r3, #0
    11a6:	d004      	beq.n	11b2 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    11a8:	4a03      	ldr	r2, [pc, #12]	; (11b8 <hif_chip_sleep_sc+0x18>)
    11aa:	7853      	ldrb	r3, [r2, #1]
    11ac:	3b01      	subs	r3, #1
    11ae:	b2db      	uxtb	r3, r3
    11b0:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    11b2:	2000      	movs	r0, #0
    11b4:	4770      	bx	lr
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	200014a0 	.word	0x200014a0

000011bc <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    11bc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    11be:	4b0b      	ldr	r3, [pc, #44]	; (11ec <hif_chip_sleep+0x30>)
    11c0:	785b      	ldrb	r3, [r3, #1]
    11c2:	2b00      	cmp	r3, #0
    11c4:	d004      	beq.n	11d0 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    11c6:	4a09      	ldr	r2, [pc, #36]	; (11ec <hif_chip_sleep+0x30>)
    11c8:	7853      	ldrb	r3, [r2, #1]
    11ca:	3b01      	subs	r3, #1
    11cc:	b2db      	uxtb	r3, r3
    11ce:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    11d0:	4b06      	ldr	r3, [pc, #24]	; (11ec <hif_chip_sleep+0x30>)
    11d2:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    11d4:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    11d6:	2b00      	cmp	r3, #0
    11d8:	d103      	bne.n	11e2 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    11da:	4b04      	ldr	r3, [pc, #16]	; (11ec <hif_chip_sleep+0x30>)
    11dc:	781b      	ldrb	r3, [r3, #0]
    11de:	2b00      	cmp	r3, #0
    11e0:	d100      	bne.n	11e4 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    11e2:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    11e4:	4b02      	ldr	r3, [pc, #8]	; (11f0 <hif_chip_sleep+0x34>)
    11e6:	4798      	blx	r3
    11e8:	e7fb      	b.n	11e2 <hif_chip_sleep+0x26>
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	200014a0 	.word	0x200014a0
    11f0:	0000294d 	.word	0x0000294d

000011f4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    11f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11f6:	46de      	mov	lr, fp
    11f8:	4657      	mov	r7, sl
    11fa:	b580      	push	{r7, lr}
    11fc:	b089      	sub	sp, #36	; 0x24
    11fe:	4683      	mov	fp, r0
    1200:	468a      	mov	sl, r1
    1202:	9201      	str	r2, [sp, #4]
    1204:	9300      	str	r3, [sp, #0]
    1206:	ab10      	add	r3, sp, #64	; 0x40
    1208:	cb80      	ldmia	r3!, {r7}
    120a:	881e      	ldrh	r6, [r3, #0]
    120c:	ab12      	add	r3, sp, #72	; 0x48
    120e:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    1210:	aa07      	add	r2, sp, #28
    1212:	237f      	movs	r3, #127	; 0x7f
    1214:	400b      	ands	r3, r1
    1216:	7053      	strb	r3, [r2, #1]
	strHif.u8Gid		= u8Gid;
    1218:	7010      	strb	r0, [r2, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
	if(pu8DataBuf != NULL)
    121a:	2f00      	cmp	r7, #0
    121c:	d042      	beq.n	12a4 <hif_send+0xb0>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    121e:	0033      	movs	r3, r6
    1220:	3308      	adds	r3, #8
    1222:	18eb      	adds	r3, r5, r3
    1224:	8053      	strh	r3, [r2, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
    if (strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
    1226:	4b72      	ldr	r3, [pc, #456]	; (13f0 <hif_send+0x1fc>)
    1228:	aa07      	add	r2, sp, #28
    122a:	8852      	ldrh	r2, [r2, #2]
    122c:	429a      	cmp	r2, r3
    122e:	d900      	bls.n	1232 <hif_send+0x3e>
    1230:	e0cd      	b.n	13ce <hif_send+0x1da>
    {
	ret = hif_chip_wake();
    1232:	4b70      	ldr	r3, [pc, #448]	; (13f4 <hif_send+0x200>)
    1234:	4798      	blx	r3
    1236:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    1238:	d000      	beq.n	123c <hif_send+0x48>
    123a:	e0bb      	b.n	13b4 <hif_send+0x1c0>
	{
		volatile uint32 reg, dma_addr = 0;
    123c:	2300      	movs	r3, #0
    123e:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    1240:	aa02      	add	r2, sp, #8
    1242:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    1244:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    1246:	9b04      	ldr	r3, [sp, #16]
    1248:	465a      	mov	r2, fp
    124a:	431a      	orrs	r2, r3
    124c:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    124e:	9a04      	ldr	r2, [sp, #16]
    1250:	4653      	mov	r3, sl
    1252:	021b      	lsls	r3, r3, #8
    1254:	4313      	orrs	r3, r2
    1256:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    1258:	9a04      	ldr	r2, [sp, #16]
    125a:	ab07      	add	r3, sp, #28
    125c:	885b      	ldrh	r3, [r3, #2]
    125e:	041b      	lsls	r3, r3, #16
    1260:	4313      	orrs	r3, r2
    1262:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    1264:	9904      	ldr	r1, [sp, #16]
    1266:	4864      	ldr	r0, [pc, #400]	; (13f8 <hif_send+0x204>)
    1268:	4b64      	ldr	r3, [pc, #400]	; (13fc <hif_send+0x208>)
    126a:	4798      	blx	r3
    126c:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    126e:	d154      	bne.n	131a <hif_send+0x126>

		reg = 0UL;
    1270:	2300      	movs	r3, #0
    1272:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    1274:	9b04      	ldr	r3, [sp, #16]
    1276:	2202      	movs	r2, #2
    1278:	4313      	orrs	r3, r2
    127a:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    127c:	9904      	ldr	r1, [sp, #16]
    127e:	4860      	ldr	r0, [pc, #384]	; (1400 <hif_send+0x20c>)
    1280:	4b5e      	ldr	r3, [pc, #376]	; (13fc <hif_send+0x208>)
    1282:	4798      	blx	r3
    1284:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    1286:	d148      	bne.n	131a <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    1288:	2200      	movs	r2, #0
    128a:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    128c:	ab02      	add	r3, sp, #8
    128e:	80da      	strh	r2, [r3, #6]
    1290:	3306      	adds	r3, #6
    1292:	881b      	ldrh	r3, [r3, #0]
    1294:	b29b      	uxth	r3, r3
    1296:	4a5b      	ldr	r2, [pc, #364]	; (1404 <hif_send+0x210>)
    1298:	4293      	cmp	r3, r2
    129a:	d846      	bhi.n	132a <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    129c:	4c5a      	ldr	r4, [pc, #360]	; (1408 <hif_send+0x214>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    129e:	4b5b      	ldr	r3, [pc, #364]	; (140c <hif_send+0x218>)
    12a0:	469a      	mov	sl, r3
    12a2:	e014      	b.n	12ce <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    12a4:	9b00      	ldr	r3, [sp, #0]
    12a6:	3308      	adds	r3, #8
    12a8:	aa07      	add	r2, sp, #28
    12aa:	8053      	strh	r3, [r2, #2]
    12ac:	e7bb      	b.n	1226 <hif_send+0x32>
				nm_bsp_sleep(1);
    12ae:	2001      	movs	r0, #1
    12b0:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    12b2:	9b04      	ldr	r3, [sp, #16]
    12b4:	079b      	lsls	r3, r3, #30
    12b6:	d528      	bpl.n	130a <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    12b8:	ab02      	add	r3, sp, #8
    12ba:	1d9a      	adds	r2, r3, #6
    12bc:	88db      	ldrh	r3, [r3, #6]
    12be:	3301      	adds	r3, #1
    12c0:	b29b      	uxth	r3, r3
    12c2:	8013      	strh	r3, [r2, #0]
    12c4:	8813      	ldrh	r3, [r2, #0]
    12c6:	b29b      	uxth	r3, r3
    12c8:	4a4e      	ldr	r2, [pc, #312]	; (1404 <hif_send+0x210>)
    12ca:	4293      	cmp	r3, r2
    12cc:	d82d      	bhi.n	132a <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    12ce:	a904      	add	r1, sp, #16
    12d0:	484b      	ldr	r0, [pc, #300]	; (1400 <hif_send+0x20c>)
    12d2:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    12d4:	2800      	cmp	r0, #0
    12d6:	d128      	bne.n	132a <hif_send+0x136>
			if(cnt >= 500) {
    12d8:	ab02      	add	r3, sp, #8
    12da:	3306      	adds	r3, #6
    12dc:	881b      	ldrh	r3, [r3, #0]
    12de:	b29b      	uxth	r3, r3
    12e0:	22f4      	movs	r2, #244	; 0xf4
    12e2:	32ff      	adds	r2, #255	; 0xff
    12e4:	4293      	cmp	r3, r2
    12e6:	d9e4      	bls.n	12b2 <hif_send+0xbe>
				if(cnt < 501) {
    12e8:	ab02      	add	r3, sp, #8
    12ea:	3306      	adds	r3, #6
    12ec:	881b      	ldrh	r3, [r3, #0]
    12ee:	b29b      	uxth	r3, r3
    12f0:	3201      	adds	r2, #1
    12f2:	4293      	cmp	r3, r2
    12f4:	d8db      	bhi.n	12ae <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    12f6:	4846      	ldr	r0, [pc, #280]	; (1410 <hif_send+0x21c>)
    12f8:	4b46      	ldr	r3, [pc, #280]	; (1414 <hif_send+0x220>)
    12fa:	4798      	blx	r3
    12fc:	4846      	ldr	r0, [pc, #280]	; (1418 <hif_send+0x224>)
    12fe:	4b47      	ldr	r3, [pc, #284]	; (141c <hif_send+0x228>)
    1300:	4798      	blx	r3
    1302:	200d      	movs	r0, #13
    1304:	4b46      	ldr	r3, [pc, #280]	; (1420 <hif_send+0x22c>)
    1306:	4798      	blx	r3
    1308:	e7d1      	b.n	12ae <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    130a:	a905      	add	r1, sp, #20
    130c:	4845      	ldr	r0, [pc, #276]	; (1424 <hif_send+0x230>)
    130e:	4b3e      	ldr	r3, [pc, #248]	; (1408 <hif_send+0x214>)
    1310:	4798      	blx	r3
    1312:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    1314:	d009      	beq.n	132a <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    1316:	2300      	movs	r3, #0
    1318:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    131a:	4b43      	ldr	r3, [pc, #268]	; (1428 <hif_send+0x234>)
    131c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    131e:	0020      	movs	r0, r4
    1320:	b009      	add	sp, #36	; 0x24
    1322:	bc0c      	pop	{r2, r3}
    1324:	4692      	mov	sl, r2
    1326:	469b      	mov	fp, r3
    1328:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    132a:	9b05      	ldr	r3, [sp, #20]
    132c:	2b00      	cmp	r3, #0
    132e:	d03c      	beq.n	13aa <hif_send+0x1b6>
			u32CurrAddr = dma_addr;
    1330:	9b05      	ldr	r3, [sp, #20]
    1332:	9306      	str	r3, [sp, #24]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    1334:	9806      	ldr	r0, [sp, #24]
    1336:	2208      	movs	r2, #8
    1338:	a907      	add	r1, sp, #28
    133a:	4b3c      	ldr	r3, [pc, #240]	; (142c <hif_send+0x238>)
    133c:	4798      	blx	r3
    133e:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    1340:	d1eb      	bne.n	131a <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    1342:	9b06      	ldr	r3, [sp, #24]
    1344:	3308      	adds	r3, #8
    1346:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    1348:	9b01      	ldr	r3, [sp, #4]
    134a:	2b00      	cmp	r3, #0
    134c:	d00b      	beq.n	1366 <hif_send+0x172>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    134e:	9806      	ldr	r0, [sp, #24]
    1350:	9a00      	ldr	r2, [sp, #0]
    1352:	0019      	movs	r1, r3
    1354:	4b35      	ldr	r3, [pc, #212]	; (142c <hif_send+0x238>)
    1356:	4798      	blx	r3
    1358:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    135a:	d1de      	bne.n	131a <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    135c:	9b06      	ldr	r3, [sp, #24]
    135e:	9a00      	ldr	r2, [sp, #0]
    1360:	4694      	mov	ip, r2
    1362:	4463      	add	r3, ip
    1364:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    1366:	2f00      	cmp	r7, #0
    1368:	d00e      	beq.n	1388 <hif_send+0x194>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    136a:	9b06      	ldr	r3, [sp, #24]
    136c:	9a00      	ldr	r2, [sp, #0]
    136e:	1aad      	subs	r5, r5, r2
    1370:	18ed      	adds	r5, r5, r3
    1372:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    1374:	9806      	ldr	r0, [sp, #24]
    1376:	0032      	movs	r2, r6
    1378:	0039      	movs	r1, r7
    137a:	4b2c      	ldr	r3, [pc, #176]	; (142c <hif_send+0x238>)
    137c:	4798      	blx	r3
    137e:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    1380:	d1cb      	bne.n	131a <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    1382:	9b06      	ldr	r3, [sp, #24]
    1384:	18f3      	adds	r3, r6, r3
    1386:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    1388:	9b05      	ldr	r3, [sp, #20]
    138a:	009b      	lsls	r3, r3, #2
    138c:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    138e:	9b04      	ldr	r3, [sp, #16]
    1390:	2202      	movs	r2, #2
    1392:	4313      	orrs	r3, r2
    1394:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    1396:	9904      	ldr	r1, [sp, #16]
    1398:	4825      	ldr	r0, [pc, #148]	; (1430 <hif_send+0x23c>)
    139a:	4b18      	ldr	r3, [pc, #96]	; (13fc <hif_send+0x208>)
    139c:	4798      	blx	r3
    139e:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    13a0:	d1bb      	bne.n	131a <hif_send+0x126>
 	ret = hif_chip_sleep();
    13a2:	4b24      	ldr	r3, [pc, #144]	; (1434 <hif_send+0x240>)
    13a4:	4798      	blx	r3
    13a6:	0004      	movs	r4, r0
	return ret;
    13a8:	e7b9      	b.n	131e <hif_send+0x12a>
			ret = hif_chip_sleep();
    13aa:	4b22      	ldr	r3, [pc, #136]	; (1434 <hif_send+0x240>)
    13ac:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    13ae:	2403      	movs	r4, #3
    13b0:	4264      	negs	r4, r4
			goto ERR2;
    13b2:	e7b4      	b.n	131e <hif_send+0x12a>
            M2M_ERR("(HIF)Failed to wakeup the chip\n");
    13b4:	22cb      	movs	r2, #203	; 0xcb
    13b6:	0052      	lsls	r2, r2, #1
    13b8:	491f      	ldr	r1, [pc, #124]	; (1438 <hif_send+0x244>)
    13ba:	4820      	ldr	r0, [pc, #128]	; (143c <hif_send+0x248>)
    13bc:	4b15      	ldr	r3, [pc, #84]	; (1414 <hif_send+0x220>)
    13be:	4798      	blx	r3
    13c0:	481f      	ldr	r0, [pc, #124]	; (1440 <hif_send+0x24c>)
    13c2:	4b16      	ldr	r3, [pc, #88]	; (141c <hif_send+0x228>)
    13c4:	4798      	blx	r3
    13c6:	200d      	movs	r0, #13
    13c8:	4b15      	ldr	r3, [pc, #84]	; (1420 <hif_send+0x22c>)
    13ca:	4798      	blx	r3
            goto ERR2;
    13cc:	e7a7      	b.n	131e <hif_send+0x12a>
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n",strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
    13ce:	22ce      	movs	r2, #206	; 0xce
    13d0:	0052      	lsls	r2, r2, #1
    13d2:	4919      	ldr	r1, [pc, #100]	; (1438 <hif_send+0x244>)
    13d4:	4819      	ldr	r0, [pc, #100]	; (143c <hif_send+0x248>)
    13d6:	4c0f      	ldr	r4, [pc, #60]	; (1414 <hif_send+0x220>)
    13d8:	47a0      	blx	r4
    13da:	ab07      	add	r3, sp, #28
    13dc:	8859      	ldrh	r1, [r3, #2]
    13de:	4a04      	ldr	r2, [pc, #16]	; (13f0 <hif_send+0x1fc>)
    13e0:	4818      	ldr	r0, [pc, #96]	; (1444 <hif_send+0x250>)
    13e2:	47a0      	blx	r4
    13e4:	200d      	movs	r0, #13
    13e6:	4b0e      	ldr	r3, [pc, #56]	; (1420 <hif_send+0x22c>)
    13e8:	4798      	blx	r3
        ret = M2M_ERR_SEND;
    13ea:	2401      	movs	r4, #1
    13ec:	4264      	negs	r4, r4
		goto ERR2;
    13ee:	e796      	b.n	131e <hif_send+0x12a>
    13f0:	0000063c 	.word	0x0000063c
    13f4:	00001165 	.word	0x00001165
    13f8:	0000108c 	.word	0x0000108c
    13fc:	00002e05 	.word	0x00002e05
    1400:	00001078 	.word	0x00001078
    1404:	000003e7 	.word	0x000003e7
    1408:	00002df9 	.word	0x00002df9
    140c:	00000d41 	.word	0x00000d41
    1410:	00008cc0 	.word	0x00008cc0
    1414:	000075f9 	.word	0x000075f9
    1418:	00008ccc 	.word	0x00008ccc
    141c:	00007715 	.word	0x00007715
    1420:	0000762d 	.word	0x0000762d
    1424:	00150400 	.word	0x00150400
    1428:	000011a1 	.word	0x000011a1
    142c:	00002e79 	.word	0x00002e79
    1430:	0000106c 	.word	0x0000106c
    1434:	000011bd 	.word	0x000011bd
    1438:	00008968 	.word	0x00008968
    143c:	00008920 	.word	0x00008920
    1440:	00008cdc 	.word	0x00008cdc
    1444:	00008cfc 	.word	0x00008cfc

00001448 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    1448:	b5f0      	push	{r4, r5, r6, r7, lr}
    144a:	46de      	mov	lr, fp
    144c:	4657      	mov	r7, sl
    144e:	464e      	mov	r6, r9
    1450:	b5c0      	push	{r6, r7, lr}
    1452:	b086      	sub	sp, #24
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    1454:	2200      	movs	r2, #0
    1456:	4bd8      	ldr	r3, [pc, #864]	; (17b8 <hif_handle_isr+0x370>)
    1458:	711a      	strb	r2, [r3, #4]
	sint8 ret = M2M_SUCCESS;	
    145a:	2600      	movs	r6, #0
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
    145c:	4699      	mov	r9, r3
    145e:	469a      	mov	sl, r3
    1460:	e149      	b.n	16f6 <hif_handle_isr+0x2ae>
				gstrHifCxt.u32RxAddr = address;
    1462:	4bd5      	ldr	r3, [pc, #852]	; (17b8 <hif_handle_isr+0x370>)
    1464:	9a05      	ldr	r2, [sp, #20]
    1466:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    1468:	465a      	mov	r2, fp
    146a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    146c:	2204      	movs	r2, #4
    146e:	a904      	add	r1, sp, #16
    1470:	9805      	ldr	r0, [sp, #20]
    1472:	4bd2      	ldr	r3, [pc, #840]	; (17bc <hif_handle_isr+0x374>)
    1474:	4798      	blx	r3
    1476:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    1478:	466b      	mov	r3, sp
    147a:	8a5b      	ldrh	r3, [r3, #18]
    147c:	b29b      	uxth	r3, r3
    147e:	466a      	mov	r2, sp
    1480:	8253      	strh	r3, [r2, #18]
				if(M2M_SUCCESS != ret)
    1482:	2800      	cmp	r0, #0
    1484:	d135      	bne.n	14f2 <hif_handle_isr+0xaa>
				if(strHif.u16Length != size)
    1486:	ab04      	add	r3, sp, #16
    1488:	885b      	ldrh	r3, [r3, #2]
    148a:	b29b      	uxth	r3, r3
    148c:	459b      	cmp	fp, r3
    148e:	d005      	beq.n	149c <hif_handle_isr+0x54>
					if((size - strHif.u16Length) > 4)
    1490:	ab04      	add	r3, sp, #16
    1492:	885b      	ldrh	r3, [r3, #2]
    1494:	465a      	mov	r2, fp
    1496:	1ad3      	subs	r3, r2, r3
    1498:	2b04      	cmp	r3, #4
    149a:	dc37      	bgt.n	150c <hif_handle_isr+0xc4>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    149c:	ab04      	add	r3, sp, #16
    149e:	781b      	ldrb	r3, [r3, #0]
    14a0:	2b01      	cmp	r3, #1
    14a2:	d049      	beq.n	1538 <hif_handle_isr+0xf0>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    14a4:	ab04      	add	r3, sp, #16
    14a6:	781b      	ldrb	r3, [r3, #0]
    14a8:	2b02      	cmp	r3, #2
    14aa:	d07b      	beq.n	15a4 <hif_handle_isr+0x15c>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    14ac:	ab04      	add	r3, sp, #16
    14ae:	781b      	ldrb	r3, [r3, #0]
    14b0:	2b04      	cmp	r3, #4
    14b2:	d100      	bne.n	14b6 <hif_handle_isr+0x6e>
    14b4:	e093      	b.n	15de <hif_handle_isr+0x196>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    14b6:	ab04      	add	r3, sp, #16
    14b8:	781b      	ldrb	r3, [r3, #0]
    14ba:	2b06      	cmp	r3, #6
    14bc:	d100      	bne.n	14c0 <hif_handle_isr+0x78>
    14be:	e0ab      	b.n	1618 <hif_handle_isr+0x1d0>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    14c0:	ab04      	add	r3, sp, #16
    14c2:	781b      	ldrb	r3, [r3, #0]
    14c4:	2b07      	cmp	r3, #7
    14c6:	d100      	bne.n	14ca <hif_handle_isr+0x82>
    14c8:	e0c3      	b.n	1652 <hif_handle_isr+0x20a>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    14ca:	ab04      	add	r3, sp, #16
    14cc:	781b      	ldrb	r3, [r3, #0]
    14ce:	2b05      	cmp	r3, #5
    14d0:	d100      	bne.n	14d4 <hif_handle_isr+0x8c>
    14d2:	e0da      	b.n	168a <hif_handle_isr+0x242>
					M2M_ERR("(hif) invalid group ID\n");
    14d4:	2284      	movs	r2, #132	; 0x84
    14d6:	0092      	lsls	r2, r2, #2
    14d8:	49b9      	ldr	r1, [pc, #740]	; (17c0 <hif_handle_isr+0x378>)
    14da:	48ba      	ldr	r0, [pc, #744]	; (17c4 <hif_handle_isr+0x37c>)
    14dc:	4bba      	ldr	r3, [pc, #744]	; (17c8 <hif_handle_isr+0x380>)
    14de:	4798      	blx	r3
    14e0:	48ba      	ldr	r0, [pc, #744]	; (17cc <hif_handle_isr+0x384>)
    14e2:	4bbb      	ldr	r3, [pc, #748]	; (17d0 <hif_handle_isr+0x388>)
    14e4:	4798      	blx	r3
    14e6:	200d      	movs	r0, #13
    14e8:	4bba      	ldr	r3, [pc, #744]	; (17d4 <hif_handle_isr+0x38c>)
    14ea:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    14ec:	2406      	movs	r4, #6
    14ee:	4264      	negs	r4, r4
    14f0:	e123      	b.n	173a <hif_handle_isr+0x2f2>
					M2M_ERR("(hif) address bus fail\n");
    14f2:	22eb      	movs	r2, #235	; 0xeb
    14f4:	0052      	lsls	r2, r2, #1
    14f6:	49b2      	ldr	r1, [pc, #712]	; (17c0 <hif_handle_isr+0x378>)
    14f8:	48b2      	ldr	r0, [pc, #712]	; (17c4 <hif_handle_isr+0x37c>)
    14fa:	4bb3      	ldr	r3, [pc, #716]	; (17c8 <hif_handle_isr+0x380>)
    14fc:	4798      	blx	r3
    14fe:	48b6      	ldr	r0, [pc, #728]	; (17d8 <hif_handle_isr+0x390>)
    1500:	4bb3      	ldr	r3, [pc, #716]	; (17d0 <hif_handle_isr+0x388>)
    1502:	4798      	blx	r3
    1504:	200d      	movs	r0, #13
    1506:	4bb3      	ldr	r3, [pc, #716]	; (17d4 <hif_handle_isr+0x38c>)
    1508:	4798      	blx	r3
    150a:	e116      	b.n	173a <hif_handle_isr+0x2f2>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    150c:	22ef      	movs	r2, #239	; 0xef
    150e:	0052      	lsls	r2, r2, #1
    1510:	49ab      	ldr	r1, [pc, #684]	; (17c0 <hif_handle_isr+0x378>)
    1512:	48ac      	ldr	r0, [pc, #688]	; (17c4 <hif_handle_isr+0x37c>)
    1514:	4cac      	ldr	r4, [pc, #688]	; (17c8 <hif_handle_isr+0x380>)
    1516:	47a0      	blx	r4
    1518:	a904      	add	r1, sp, #16
    151a:	884a      	ldrh	r2, [r1, #2]
    151c:	b292      	uxth	r2, r2
    151e:	780b      	ldrb	r3, [r1, #0]
    1520:	b2db      	uxtb	r3, r3
    1522:	7849      	ldrb	r1, [r1, #1]
    1524:	9100      	str	r1, [sp, #0]
    1526:	4659      	mov	r1, fp
    1528:	48ac      	ldr	r0, [pc, #688]	; (17dc <hif_handle_isr+0x394>)
    152a:	47a0      	blx	r4
    152c:	200d      	movs	r0, #13
    152e:	4ba9      	ldr	r3, [pc, #676]	; (17d4 <hif_handle_isr+0x38c>)
    1530:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    1532:	2406      	movs	r4, #6
    1534:	4264      	negs	r4, r4
    1536:	e100      	b.n	173a <hif_handle_isr+0x2f2>
					if(gstrHifCxt.pfWifiCb)
    1538:	4b9f      	ldr	r3, [pc, #636]	; (17b8 <hif_handle_isr+0x370>)
    153a:	691b      	ldr	r3, [r3, #16]
    153c:	2b00      	cmp	r3, #0
    153e:	d024      	beq.n	158a <hif_handle_isr+0x142>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1540:	4b9d      	ldr	r3, [pc, #628]	; (17b8 <hif_handle_isr+0x370>)
    1542:	691b      	ldr	r3, [r3, #16]
    1544:	aa04      	add	r2, sp, #16
    1546:	7850      	ldrb	r0, [r2, #1]
    1548:	b2c0      	uxtb	r0, r0
    154a:	8851      	ldrh	r1, [r2, #2]
    154c:	9a05      	ldr	r2, [sp, #20]
    154e:	3208      	adds	r2, #8
    1550:	3908      	subs	r1, #8
    1552:	b289      	uxth	r1, r1
    1554:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    1556:	4b98      	ldr	r3, [pc, #608]	; (17b8 <hif_handle_isr+0x370>)
    1558:	789b      	ldrb	r3, [r3, #2]
    155a:	2b00      	cmp	r3, #0
    155c:	d100      	bne.n	1560 <hif_handle_isr+0x118>
    155e:	e0ca      	b.n	16f6 <hif_handle_isr+0x2ae>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    1560:	4a9f      	ldr	r2, [pc, #636]	; (17e0 <hif_handle_isr+0x398>)
    1562:	4997      	ldr	r1, [pc, #604]	; (17c0 <hif_handle_isr+0x378>)
    1564:	4897      	ldr	r0, [pc, #604]	; (17c4 <hif_handle_isr+0x37c>)
    1566:	4c98      	ldr	r4, [pc, #608]	; (17c8 <hif_handle_isr+0x380>)
    1568:	47a0      	blx	r4
    156a:	ab04      	add	r3, sp, #16
    156c:	7819      	ldrb	r1, [r3, #0]
    156e:	b2c9      	uxtb	r1, r1
    1570:	785a      	ldrb	r2, [r3, #1]
    1572:	b2d2      	uxtb	r2, r2
    1574:	489b      	ldr	r0, [pc, #620]	; (17e4 <hif_handle_isr+0x39c>)
    1576:	47a0      	blx	r4
    1578:	200d      	movs	r0, #13
    157a:	4b96      	ldr	r3, [pc, #600]	; (17d4 <hif_handle_isr+0x38c>)
    157c:	4798      	blx	r3
					ret = hif_set_rx_done();
    157e:	4b9a      	ldr	r3, [pc, #616]	; (17e8 <hif_handle_isr+0x3a0>)
    1580:	4798      	blx	r3
    1582:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    1584:	d000      	beq.n	1588 <hif_handle_isr+0x140>
    1586:	e0d8      	b.n	173a <hif_handle_isr+0x2f2>
    1588:	e0b5      	b.n	16f6 <hif_handle_isr+0x2ae>
						M2M_ERR("WIFI callback is not registered\n");
    158a:	22ea      	movs	r2, #234	; 0xea
    158c:	32ff      	adds	r2, #255	; 0xff
    158e:	498c      	ldr	r1, [pc, #560]	; (17c0 <hif_handle_isr+0x378>)
    1590:	488c      	ldr	r0, [pc, #560]	; (17c4 <hif_handle_isr+0x37c>)
    1592:	4b8d      	ldr	r3, [pc, #564]	; (17c8 <hif_handle_isr+0x380>)
    1594:	4798      	blx	r3
    1596:	4895      	ldr	r0, [pc, #596]	; (17ec <hif_handle_isr+0x3a4>)
    1598:	4b8d      	ldr	r3, [pc, #564]	; (17d0 <hif_handle_isr+0x388>)
    159a:	4798      	blx	r3
    159c:	200d      	movs	r0, #13
    159e:	4b8d      	ldr	r3, [pc, #564]	; (17d4 <hif_handle_isr+0x38c>)
    15a0:	4798      	blx	r3
    15a2:	e7d8      	b.n	1556 <hif_handle_isr+0x10e>
					if(gstrHifCxt.pfIpCb)
    15a4:	4b84      	ldr	r3, [pc, #528]	; (17b8 <hif_handle_isr+0x370>)
    15a6:	695b      	ldr	r3, [r3, #20]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d00b      	beq.n	15c4 <hif_handle_isr+0x17c>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    15ac:	4b82      	ldr	r3, [pc, #520]	; (17b8 <hif_handle_isr+0x370>)
    15ae:	695b      	ldr	r3, [r3, #20]
    15b0:	aa04      	add	r2, sp, #16
    15b2:	7850      	ldrb	r0, [r2, #1]
    15b4:	b2c0      	uxtb	r0, r0
    15b6:	8851      	ldrh	r1, [r2, #2]
    15b8:	9a05      	ldr	r2, [sp, #20]
    15ba:	3208      	adds	r2, #8
    15bc:	3908      	subs	r1, #8
    15be:	b289      	uxth	r1, r1
    15c0:	4798      	blx	r3
    15c2:	e7c8      	b.n	1556 <hif_handle_isr+0x10e>
						M2M_ERR("Socket callback is not registered\n");
    15c4:	22f8      	movs	r2, #248	; 0xf8
    15c6:	0052      	lsls	r2, r2, #1
    15c8:	497d      	ldr	r1, [pc, #500]	; (17c0 <hif_handle_isr+0x378>)
    15ca:	487e      	ldr	r0, [pc, #504]	; (17c4 <hif_handle_isr+0x37c>)
    15cc:	4b7e      	ldr	r3, [pc, #504]	; (17c8 <hif_handle_isr+0x380>)
    15ce:	4798      	blx	r3
    15d0:	4887      	ldr	r0, [pc, #540]	; (17f0 <hif_handle_isr+0x3a8>)
    15d2:	4b7f      	ldr	r3, [pc, #508]	; (17d0 <hif_handle_isr+0x388>)
    15d4:	4798      	blx	r3
    15d6:	200d      	movs	r0, #13
    15d8:	4b7e      	ldr	r3, [pc, #504]	; (17d4 <hif_handle_isr+0x38c>)
    15da:	4798      	blx	r3
    15dc:	e7bb      	b.n	1556 <hif_handle_isr+0x10e>
					if(gstrHifCxt.pfOtaCb)
    15de:	4b76      	ldr	r3, [pc, #472]	; (17b8 <hif_handle_isr+0x370>)
    15e0:	699b      	ldr	r3, [r3, #24]
    15e2:	2b00      	cmp	r3, #0
    15e4:	d00b      	beq.n	15fe <hif_handle_isr+0x1b6>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    15e6:	4b74      	ldr	r3, [pc, #464]	; (17b8 <hif_handle_isr+0x370>)
    15e8:	699b      	ldr	r3, [r3, #24]
    15ea:	aa04      	add	r2, sp, #16
    15ec:	7850      	ldrb	r0, [r2, #1]
    15ee:	b2c0      	uxtb	r0, r0
    15f0:	8851      	ldrh	r1, [r2, #2]
    15f2:	9a05      	ldr	r2, [sp, #20]
    15f4:	3208      	adds	r2, #8
    15f6:	3908      	subs	r1, #8
    15f8:	b289      	uxth	r1, r1
    15fa:	4798      	blx	r3
    15fc:	e7ab      	b.n	1556 <hif_handle_isr+0x10e>
						M2M_ERR("Ota callback is not registered\n");
    15fe:	22f8      	movs	r2, #248	; 0xf8
    1600:	32ff      	adds	r2, #255	; 0xff
    1602:	496f      	ldr	r1, [pc, #444]	; (17c0 <hif_handle_isr+0x378>)
    1604:	486f      	ldr	r0, [pc, #444]	; (17c4 <hif_handle_isr+0x37c>)
    1606:	4b70      	ldr	r3, [pc, #448]	; (17c8 <hif_handle_isr+0x380>)
    1608:	4798      	blx	r3
    160a:	487a      	ldr	r0, [pc, #488]	; (17f4 <hif_handle_isr+0x3ac>)
    160c:	4b70      	ldr	r3, [pc, #448]	; (17d0 <hif_handle_isr+0x388>)
    160e:	4798      	blx	r3
    1610:	200d      	movs	r0, #13
    1612:	4b70      	ldr	r3, [pc, #448]	; (17d4 <hif_handle_isr+0x38c>)
    1614:	4798      	blx	r3
    1616:	e79e      	b.n	1556 <hif_handle_isr+0x10e>
					if(gstrHifCxt.pfCryptoCb)
    1618:	4b67      	ldr	r3, [pc, #412]	; (17b8 <hif_handle_isr+0x370>)
    161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    161c:	2b00      	cmp	r3, #0
    161e:	d00b      	beq.n	1638 <hif_handle_isr+0x1f0>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1620:	4b65      	ldr	r3, [pc, #404]	; (17b8 <hif_handle_isr+0x370>)
    1622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1624:	aa04      	add	r2, sp, #16
    1626:	7850      	ldrb	r0, [r2, #1]
    1628:	b2c0      	uxtb	r0, r0
    162a:	8851      	ldrh	r1, [r2, #2]
    162c:	9a05      	ldr	r2, [sp, #20]
    162e:	3208      	adds	r2, #8
    1630:	3908      	subs	r1, #8
    1632:	b289      	uxth	r1, r1
    1634:	4798      	blx	r3
    1636:	e78e      	b.n	1556 <hif_handle_isr+0x10e>
						M2M_ERR("Crypto callback is not registered\n");
    1638:	22ff      	movs	r2, #255	; 0xff
    163a:	0052      	lsls	r2, r2, #1
    163c:	4960      	ldr	r1, [pc, #384]	; (17c0 <hif_handle_isr+0x378>)
    163e:	4861      	ldr	r0, [pc, #388]	; (17c4 <hif_handle_isr+0x37c>)
    1640:	4b61      	ldr	r3, [pc, #388]	; (17c8 <hif_handle_isr+0x380>)
    1642:	4798      	blx	r3
    1644:	486c      	ldr	r0, [pc, #432]	; (17f8 <hif_handle_isr+0x3b0>)
    1646:	4b62      	ldr	r3, [pc, #392]	; (17d0 <hif_handle_isr+0x388>)
    1648:	4798      	blx	r3
    164a:	200d      	movs	r0, #13
    164c:	4b61      	ldr	r3, [pc, #388]	; (17d4 <hif_handle_isr+0x38c>)
    164e:	4798      	blx	r3
    1650:	e781      	b.n	1556 <hif_handle_isr+0x10e>
					if(gstrHifCxt.pfSigmaCb)
    1652:	4b59      	ldr	r3, [pc, #356]	; (17b8 <hif_handle_isr+0x370>)
    1654:	69db      	ldr	r3, [r3, #28]
    1656:	2b00      	cmp	r3, #0
    1658:	d00b      	beq.n	1672 <hif_handle_isr+0x22a>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    165a:	4b57      	ldr	r3, [pc, #348]	; (17b8 <hif_handle_isr+0x370>)
    165c:	69db      	ldr	r3, [r3, #28]
    165e:	aa04      	add	r2, sp, #16
    1660:	7850      	ldrb	r0, [r2, #1]
    1662:	b2c0      	uxtb	r0, r0
    1664:	8851      	ldrh	r1, [r2, #2]
    1666:	9a05      	ldr	r2, [sp, #20]
    1668:	3208      	adds	r2, #8
    166a:	3908      	subs	r1, #8
    166c:	b289      	uxth	r1, r1
    166e:	4798      	blx	r3
    1670:	e771      	b.n	1556 <hif_handle_isr+0x10e>
						M2M_ERR("Sigma callback is not registered\n");
    1672:	4a62      	ldr	r2, [pc, #392]	; (17fc <hif_handle_isr+0x3b4>)
    1674:	4952      	ldr	r1, [pc, #328]	; (17c0 <hif_handle_isr+0x378>)
    1676:	4853      	ldr	r0, [pc, #332]	; (17c4 <hif_handle_isr+0x37c>)
    1678:	4b53      	ldr	r3, [pc, #332]	; (17c8 <hif_handle_isr+0x380>)
    167a:	4798      	blx	r3
    167c:	4860      	ldr	r0, [pc, #384]	; (1800 <hif_handle_isr+0x3b8>)
    167e:	4b54      	ldr	r3, [pc, #336]	; (17d0 <hif_handle_isr+0x388>)
    1680:	4798      	blx	r3
    1682:	200d      	movs	r0, #13
    1684:	4b53      	ldr	r3, [pc, #332]	; (17d4 <hif_handle_isr+0x38c>)
    1686:	4798      	blx	r3
    1688:	e765      	b.n	1556 <hif_handle_isr+0x10e>
				    if(gstrHifCxt.pfSslCb)
    168a:	4b4b      	ldr	r3, [pc, #300]	; (17b8 <hif_handle_isr+0x370>)
    168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    168e:	2b00      	cmp	r3, #0
    1690:	d00b      	beq.n	16aa <hif_handle_isr+0x262>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1692:	4b49      	ldr	r3, [pc, #292]	; (17b8 <hif_handle_isr+0x370>)
    1694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1696:	aa04      	add	r2, sp, #16
    1698:	7850      	ldrb	r0, [r2, #1]
    169a:	b2c0      	uxtb	r0, r0
    169c:	8851      	ldrh	r1, [r2, #2]
    169e:	9a05      	ldr	r2, [sp, #20]
    16a0:	3208      	adds	r2, #8
    16a2:	3908      	subs	r1, #8
    16a4:	b289      	uxth	r1, r1
    16a6:	4798      	blx	r3
    16a8:	e755      	b.n	1556 <hif_handle_isr+0x10e>
                        M2M_ERR("SSL callback is not registered\n");
    16aa:	2283      	movs	r2, #131	; 0x83
    16ac:	0092      	lsls	r2, r2, #2
    16ae:	4944      	ldr	r1, [pc, #272]	; (17c0 <hif_handle_isr+0x378>)
    16b0:	4844      	ldr	r0, [pc, #272]	; (17c4 <hif_handle_isr+0x37c>)
    16b2:	4b45      	ldr	r3, [pc, #276]	; (17c8 <hif_handle_isr+0x380>)
    16b4:	4798      	blx	r3
    16b6:	4853      	ldr	r0, [pc, #332]	; (1804 <hif_handle_isr+0x3bc>)
    16b8:	4b45      	ldr	r3, [pc, #276]	; (17d0 <hif_handle_isr+0x388>)
    16ba:	4798      	blx	r3
    16bc:	200d      	movs	r0, #13
    16be:	4b45      	ldr	r3, [pc, #276]	; (17d4 <hif_handle_isr+0x38c>)
    16c0:	4798      	blx	r3
    16c2:	e748      	b.n	1556 <hif_handle_isr+0x10e>
				M2M_ERR("(hif) Wrong Size\n");
    16c4:	4a50      	ldr	r2, [pc, #320]	; (1808 <hif_handle_isr+0x3c0>)
    16c6:	493e      	ldr	r1, [pc, #248]	; (17c0 <hif_handle_isr+0x378>)
    16c8:	483e      	ldr	r0, [pc, #248]	; (17c4 <hif_handle_isr+0x37c>)
    16ca:	4b3f      	ldr	r3, [pc, #252]	; (17c8 <hif_handle_isr+0x380>)
    16cc:	4798      	blx	r3
    16ce:	484f      	ldr	r0, [pc, #316]	; (180c <hif_handle_isr+0x3c4>)
    16d0:	4b3f      	ldr	r3, [pc, #252]	; (17d0 <hif_handle_isr+0x388>)
    16d2:	4798      	blx	r3
    16d4:	200d      	movs	r0, #13
    16d6:	4b3f      	ldr	r3, [pc, #252]	; (17d4 <hif_handle_isr+0x38c>)
    16d8:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    16da:	2402      	movs	r4, #2
    16dc:	4264      	negs	r4, r4
    16de:	e02c      	b.n	173a <hif_handle_isr+0x2f2>
			M2M_ERR("(hif) False interrupt %lx",reg);
    16e0:	4a4b      	ldr	r2, [pc, #300]	; (1810 <hif_handle_isr+0x3c8>)
    16e2:	4937      	ldr	r1, [pc, #220]	; (17c0 <hif_handle_isr+0x378>)
    16e4:	4837      	ldr	r0, [pc, #220]	; (17c4 <hif_handle_isr+0x37c>)
    16e6:	4c38      	ldr	r4, [pc, #224]	; (17c8 <hif_handle_isr+0x380>)
    16e8:	47a0      	blx	r4
    16ea:	9903      	ldr	r1, [sp, #12]
    16ec:	4849      	ldr	r0, [pc, #292]	; (1814 <hif_handle_isr+0x3cc>)
    16ee:	47a0      	blx	r4
    16f0:	200d      	movs	r0, #13
    16f2:	4b38      	ldr	r3, [pc, #224]	; (17d4 <hif_handle_isr+0x38c>)
    16f4:	4798      	blx	r3
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
    16f6:	464b      	mov	r3, r9
    16f8:	78db      	ldrb	r3, [r3, #3]
    16fa:	2b00      	cmp	r3, #0
    16fc:	d100      	bne.n	1700 <hif_handle_isr+0x2b8>
    16fe:	e0ae      	b.n	185e <hif_handle_isr+0x416>
    1700:	4653      	mov	r3, sl
    1702:	791b      	ldrb	r3, [r3, #4]
    1704:	2b00      	cmp	r3, #0
    1706:	d000      	beq.n	170a <hif_handle_isr+0x2c2>
    1708:	e0a9      	b.n	185e <hif_handle_isr+0x416>
         * during which the ISR could fire again.
         * If LEVEL interrupt is used instead of EDGE then the atomicity isn't needed since the interrupt
         * is turned off in the ISR and back on again only after the interrupt has been serviced in hif_isr(). */

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(0);
    170a:	2000      	movs	r0, #0
    170c:	4c42      	ldr	r4, [pc, #264]	; (1818 <hif_handle_isr+0x3d0>)
    170e:	47a0      	blx	r4
#endif

		gstrHifCxt.u8Interrupt--;
    1710:	4a29      	ldr	r2, [pc, #164]	; (17b8 <hif_handle_isr+0x370>)
    1712:	78d3      	ldrb	r3, [r2, #3]
    1714:	3b01      	subs	r3, #1
    1716:	b2db      	uxtb	r3, r3
    1718:	70d3      	strb	r3, [r2, #3]

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(1);
    171a:	2001      	movs	r0, #1
    171c:	47a0      	blx	r4
    171e:	2504      	movs	r5, #4
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1720:	4f3e      	ldr	r7, [pc, #248]	; (181c <hif_handle_isr+0x3d4>)
    1722:	e01a      	b.n	175a <hif_handle_isr+0x312>
		M2M_ERR("(hif) Failed to Read interrupt reg\n");
    1724:	4a3e      	ldr	r2, [pc, #248]	; (1820 <hif_handle_isr+0x3d8>)
    1726:	4926      	ldr	r1, [pc, #152]	; (17c0 <hif_handle_isr+0x378>)
    1728:	4826      	ldr	r0, [pc, #152]	; (17c4 <hif_handle_isr+0x37c>)
    172a:	4b27      	ldr	r3, [pc, #156]	; (17c8 <hif_handle_isr+0x380>)
    172c:	4798      	blx	r3
    172e:	483d      	ldr	r0, [pc, #244]	; (1824 <hif_handle_isr+0x3dc>)
    1730:	4b27      	ldr	r3, [pc, #156]	; (17d0 <hif_handle_isr+0x388>)
    1732:	4798      	blx	r3
    1734:	200d      	movs	r0, #13
    1736:	4b27      	ldr	r3, [pc, #156]	; (17d4 <hif_handle_isr+0x38c>)
    1738:	4798      	blx	r3
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				retries--;
				if(!retries)
    173a:	2d00      	cmp	r5, #0
    173c:	d100      	bne.n	1740 <hif_handle_isr+0x2f8>
    173e:	e081      	b.n	1844 <hif_handle_isr+0x3fc>
				{
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
					break;
				}
				else
					M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
    1740:	4a39      	ldr	r2, [pc, #228]	; (1828 <hif_handle_isr+0x3e0>)
    1742:	493a      	ldr	r1, [pc, #232]	; (182c <hif_handle_isr+0x3e4>)
    1744:	481f      	ldr	r0, [pc, #124]	; (17c4 <hif_handle_isr+0x37c>)
    1746:	4e20      	ldr	r6, [pc, #128]	; (17c8 <hif_handle_isr+0x380>)
    1748:	47b0      	blx	r6
    174a:	002a      	movs	r2, r5
    174c:	0021      	movs	r1, r4
    174e:	4838      	ldr	r0, [pc, #224]	; (1830 <hif_handle_isr+0x3e8>)
    1750:	47b0      	blx	r6
    1752:	200d      	movs	r0, #13
    1754:	4b1f      	ldr	r3, [pc, #124]	; (17d4 <hif_handle_isr+0x38c>)
    1756:	4798      	blx	r3
    1758:	3d01      	subs	r5, #1
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    175a:	a903      	add	r1, sp, #12
    175c:	4835      	ldr	r0, [pc, #212]	; (1834 <hif_handle_isr+0x3ec>)
    175e:	47b8      	blx	r7
    1760:	0004      	movs	r4, r0
    1762:	1e06      	subs	r6, r0, #0
	if(M2M_SUCCESS == ret)
    1764:	d1de      	bne.n	1724 <hif_handle_isr+0x2dc>
		if(reg & 0x1)	/* New interrupt has been received */
    1766:	9903      	ldr	r1, [sp, #12]
    1768:	07cb      	lsls	r3, r1, #31
    176a:	d5b9      	bpl.n	16e0 <hif_handle_isr+0x298>
			reg &= ~NBIT0;
    176c:	2301      	movs	r3, #1
    176e:	4399      	bics	r1, r3
    1770:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1772:	4830      	ldr	r0, [pc, #192]	; (1834 <hif_handle_isr+0x3ec>)
    1774:	4b30      	ldr	r3, [pc, #192]	; (1838 <hif_handle_isr+0x3f0>)
    1776:	4798      	blx	r3
    1778:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    177a:	d1de      	bne.n	173a <hif_handle_isr+0x2f2>
			gstrHifCxt.u8HifRXDone = 1;
    177c:	2201      	movs	r2, #1
    177e:	4b0e      	ldr	r3, [pc, #56]	; (17b8 <hif_handle_isr+0x370>)
    1780:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1782:	9b03      	ldr	r3, [sp, #12]
    1784:	049b      	lsls	r3, r3, #18
    1786:	0d1b      	lsrs	r3, r3, #20
    1788:	469b      	mov	fp, r3
			if (size > 0) {
    178a:	d09b      	beq.n	16c4 <hif_handle_isr+0x27c>
				uint32 address = 0;
    178c:	2300      	movs	r3, #0
    178e:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1790:	a905      	add	r1, sp, #20
    1792:	482a      	ldr	r0, [pc, #168]	; (183c <hif_handle_isr+0x3f4>)
    1794:	4b21      	ldr	r3, [pc, #132]	; (181c <hif_handle_isr+0x3d4>)
    1796:	4798      	blx	r3
    1798:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    179a:	d100      	bne.n	179e <hif_handle_isr+0x356>
    179c:	e661      	b.n	1462 <hif_handle_isr+0x1a>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    179e:	22ce      	movs	r2, #206	; 0xce
    17a0:	32ff      	adds	r2, #255	; 0xff
    17a2:	4907      	ldr	r1, [pc, #28]	; (17c0 <hif_handle_isr+0x378>)
    17a4:	4807      	ldr	r0, [pc, #28]	; (17c4 <hif_handle_isr+0x37c>)
    17a6:	4b08      	ldr	r3, [pc, #32]	; (17c8 <hif_handle_isr+0x380>)
    17a8:	4798      	blx	r3
    17aa:	4825      	ldr	r0, [pc, #148]	; (1840 <hif_handle_isr+0x3f8>)
    17ac:	4b08      	ldr	r3, [pc, #32]	; (17d0 <hif_handle_isr+0x388>)
    17ae:	4798      	blx	r3
    17b0:	200d      	movs	r0, #13
    17b2:	4b08      	ldr	r3, [pc, #32]	; (17d4 <hif_handle_isr+0x38c>)
    17b4:	4798      	blx	r3
    17b6:	e7c0      	b.n	173a <hif_handle_isr+0x2f2>
    17b8:	200014a0 	.word	0x200014a0
    17bc:	00002e11 	.word	0x00002e11
    17c0:	00008974 	.word	0x00008974
    17c4:	00008920 	.word	0x00008920
    17c8:	000075f9 	.word	0x000075f9
    17cc:	00008af0 	.word	0x00008af0
    17d0:	00007715 	.word	0x00007715
    17d4:	0000762d 	.word	0x0000762d
    17d8:	000089cc 	.word	0x000089cc
    17dc:	000089e4 	.word	0x000089e4
    17e0:	00000216 	.word	0x00000216
    17e4:	00008b08 	.word	0x00008b08
    17e8:	00001121 	.word	0x00001121
    17ec:	00008a24 	.word	0x00008a24
    17f0:	00008a44 	.word	0x00008a44
    17f4:	00008a68 	.word	0x00008a68
    17f8:	00008a88 	.word	0x00008a88
    17fc:	00000205 	.word	0x00000205
    1800:	00008aac 	.word	0x00008aac
    1804:	00008ad0 	.word	0x00008ad0
    1808:	0000021d 	.word	0x0000021d
    180c:	00008b34 	.word	0x00008b34
    1810:	00000225 	.word	0x00000225
    1814:	00008b48 	.word	0x00008b48
    1818:	00000dd5 	.word	0x00000dd5
    181c:	00002df9 	.word	0x00002df9
    1820:	0000022d 	.word	0x0000022d
    1824:	00008b64 	.word	0x00008b64
    1828:	0000026b 	.word	0x0000026b
    182c:	0000897c 	.word	0x0000897c
    1830:	00008bd0 	.word	0x00008bd0
    1834:	00001070 	.word	0x00001070
    1838:	00002e05 	.word	0x00002e05
    183c:	00001084 	.word	0x00001084
    1840:	000089a8 	.word	0x000089a8
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
    1844:	4a09      	ldr	r2, [pc, #36]	; (186c <hif_handle_isr+0x424>)
    1846:	490a      	ldr	r1, [pc, #40]	; (1870 <hif_handle_isr+0x428>)
    1848:	480a      	ldr	r0, [pc, #40]	; (1874 <hif_handle_isr+0x42c>)
    184a:	4d0b      	ldr	r5, [pc, #44]	; (1878 <hif_handle_isr+0x430>)
    184c:	47a8      	blx	r5
    184e:	0021      	movs	r1, r4
    1850:	480a      	ldr	r0, [pc, #40]	; (187c <hif_handle_isr+0x434>)
    1852:	47a8      	blx	r5
    1854:	200d      	movs	r0, #13
    1856:	4b0a      	ldr	r3, [pc, #40]	; (1880 <hif_handle_isr+0x438>)
    1858:	4798      	blx	r3
					break;
    185a:	0026      	movs	r6, r4
    185c:	e74b      	b.n	16f6 <hif_handle_isr+0x2ae>
			}
		}
	}

	return ret;
}
    185e:	0030      	movs	r0, r6
    1860:	b006      	add	sp, #24
    1862:	bc1c      	pop	{r2, r3, r4}
    1864:	4691      	mov	r9, r2
    1866:	469a      	mov	sl, r3
    1868:	46a3      	mov	fp, r4
    186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    186c:	00000267 	.word	0x00000267
    1870:	0000897c 	.word	0x0000897c
    1874:	00008920 	.word	0x00008920
    1878:	000075f9 	.word	0x000075f9
    187c:	00008b88 	.word	0x00008b88
    1880:	0000762d 	.word	0x0000762d

00001884 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1884:	b570      	push	{r4, r5, r6, lr}
    1886:	0014      	movs	r4, r2
    1888:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    188a:	2800      	cmp	r0, #0
    188c:	d003      	beq.n	1896 <hif_receive+0x12>
    188e:	2900      	cmp	r1, #0
    1890:	d001      	beq.n	1896 <hif_receive+0x12>
    1892:	2a00      	cmp	r2, #0
    1894:	d113      	bne.n	18be <hif_receive+0x3a>
	{
		if(isDone)
    1896:	2d00      	cmp	r5, #0
    1898:	d002      	beq.n	18a0 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    189a:	4b28      	ldr	r3, [pc, #160]	; (193c <hif_receive+0xb8>)
    189c:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    189e:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    18a0:	22a3      	movs	r2, #163	; 0xa3
    18a2:	0092      	lsls	r2, r2, #2
    18a4:	4926      	ldr	r1, [pc, #152]	; (1940 <hif_receive+0xbc>)
    18a6:	4827      	ldr	r0, [pc, #156]	; (1944 <hif_receive+0xc0>)
    18a8:	4b27      	ldr	r3, [pc, #156]	; (1948 <hif_receive+0xc4>)
    18aa:	4798      	blx	r3
    18ac:	4827      	ldr	r0, [pc, #156]	; (194c <hif_receive+0xc8>)
    18ae:	4b28      	ldr	r3, [pc, #160]	; (1950 <hif_receive+0xcc>)
    18b0:	4798      	blx	r3
    18b2:	200d      	movs	r0, #13
    18b4:	4b27      	ldr	r3, [pc, #156]	; (1954 <hif_receive+0xd0>)
    18b6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    18b8:	200c      	movs	r0, #12
    18ba:	4240      	negs	r0, r0
    18bc:	e7ef      	b.n	189e <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    18be:	4b26      	ldr	r3, [pc, #152]	; (1958 <hif_receive+0xd4>)
    18c0:	68db      	ldr	r3, [r3, #12]
    18c2:	429a      	cmp	r2, r3
    18c4:	d81a      	bhi.n	18fc <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    18c6:	4b24      	ldr	r3, [pc, #144]	; (1958 <hif_receive+0xd4>)
    18c8:	689b      	ldr	r3, [r3, #8]
    18ca:	4298      	cmp	r0, r3
    18cc:	d327      	bcc.n	191e <hif_receive+0x9a>
    18ce:	1886      	adds	r6, r0, r2
    18d0:	4a21      	ldr	r2, [pc, #132]	; (1958 <hif_receive+0xd4>)
    18d2:	6893      	ldr	r3, [r2, #8]
    18d4:	68d2      	ldr	r2, [r2, #12]
    18d6:	189b      	adds	r3, r3, r2
    18d8:	429e      	cmp	r6, r3
    18da:	d820      	bhi.n	191e <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    18dc:	0022      	movs	r2, r4
    18de:	4b1f      	ldr	r3, [pc, #124]	; (195c <hif_receive+0xd8>)
    18e0:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    18e2:	2800      	cmp	r0, #0
    18e4:	d1db      	bne.n	189e <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    18e6:	4a1c      	ldr	r2, [pc, #112]	; (1958 <hif_receive+0xd4>)
    18e8:	6893      	ldr	r3, [r2, #8]
    18ea:	68d2      	ldr	r2, [r2, #12]
    18ec:	189b      	adds	r3, r3, r2
    18ee:	429e      	cmp	r6, r3
    18f0:	d001      	beq.n	18f6 <hif_receive+0x72>
    18f2:	2d00      	cmp	r5, #0
    18f4:	d0d3      	beq.n	189e <hif_receive+0x1a>
		ret = hif_set_rx_done();
    18f6:	4b11      	ldr	r3, [pc, #68]	; (193c <hif_receive+0xb8>)
    18f8:	4798      	blx	r3
    18fa:	e7d0      	b.n	189e <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the received buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    18fc:	22a5      	movs	r2, #165	; 0xa5
    18fe:	0092      	lsls	r2, r2, #2
    1900:	490f      	ldr	r1, [pc, #60]	; (1940 <hif_receive+0xbc>)
    1902:	4810      	ldr	r0, [pc, #64]	; (1944 <hif_receive+0xc0>)
    1904:	4d10      	ldr	r5, [pc, #64]	; (1948 <hif_receive+0xc4>)
    1906:	47a8      	blx	r5
    1908:	4b13      	ldr	r3, [pc, #76]	; (1958 <hif_receive+0xd4>)
    190a:	68da      	ldr	r2, [r3, #12]
    190c:	0021      	movs	r1, r4
    190e:	4814      	ldr	r0, [pc, #80]	; (1960 <hif_receive+0xdc>)
    1910:	47a8      	blx	r5
    1912:	200d      	movs	r0, #13
    1914:	4b0f      	ldr	r3, [pc, #60]	; (1954 <hif_receive+0xd0>)
    1916:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1918:	200c      	movs	r0, #12
    191a:	4240      	negs	r0, r0
		goto ERR1;
    191c:	e7bf      	b.n	189e <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
    191e:	4a11      	ldr	r2, [pc, #68]	; (1964 <hif_receive+0xe0>)
    1920:	4907      	ldr	r1, [pc, #28]	; (1940 <hif_receive+0xbc>)
    1922:	4808      	ldr	r0, [pc, #32]	; (1944 <hif_receive+0xc0>)
    1924:	4b08      	ldr	r3, [pc, #32]	; (1948 <hif_receive+0xc4>)
    1926:	4798      	blx	r3
    1928:	480f      	ldr	r0, [pc, #60]	; (1968 <hif_receive+0xe4>)
    192a:	4b09      	ldr	r3, [pc, #36]	; (1950 <hif_receive+0xcc>)
    192c:	4798      	blx	r3
    192e:	200d      	movs	r0, #13
    1930:	4b08      	ldr	r3, [pc, #32]	; (1954 <hif_receive+0xd0>)
    1932:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1934:	200c      	movs	r0, #12
    1936:	4240      	negs	r0, r0
		goto ERR1;
    1938:	e7b1      	b.n	189e <hif_receive+0x1a>
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	00001121 	.word	0x00001121
    1940:	0000898c 	.word	0x0000898c
    1944:	00008920 	.word	0x00008920
    1948:	000075f9 	.word	0x000075f9
    194c:	00008c08 	.word	0x00008c08
    1950:	00007715 	.word	0x00007715
    1954:	0000762d 	.word	0x0000762d
    1958:	200014a0 	.word	0x200014a0
    195c:	00002e11 	.word	0x00002e11
    1960:	00008c28 	.word	0x00008c28
    1964:	0000029a 	.word	0x0000029a
    1968:	00008c70 	.word	0x00008c70

0000196c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    196c:	b570      	push	{r4, r5, r6, lr}
    196e:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1970:	2807      	cmp	r0, #7
    1972:	d81f      	bhi.n	19b4 <hif_register_cb+0x48>
    1974:	0083      	lsls	r3, r0, #2
    1976:	4a16      	ldr	r2, [pc, #88]	; (19d0 <hif_register_cb+0x64>)
    1978:	58d3      	ldr	r3, [r2, r3]
    197a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    197c:	4b15      	ldr	r3, [pc, #84]	; (19d4 <hif_register_cb+0x68>)
    197e:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    1980:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    1982:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    1984:	4b13      	ldr	r3, [pc, #76]	; (19d4 <hif_register_cb+0x68>)
    1986:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    1988:	2000      	movs	r0, #0
			break;
    198a:	e7fa      	b.n	1982 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    198c:	4b11      	ldr	r3, [pc, #68]	; (19d4 <hif_register_cb+0x68>)
    198e:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    1990:	2000      	movs	r0, #0
			break;
    1992:	e7f6      	b.n	1982 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    1994:	4b0f      	ldr	r3, [pc, #60]	; (19d4 <hif_register_cb+0x68>)
    1996:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    1998:	2000      	movs	r0, #0
			break;
    199a:	e7f2      	b.n	1982 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    199c:	4b0d      	ldr	r3, [pc, #52]	; (19d4 <hif_register_cb+0x68>)
    199e:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    19a0:	2000      	movs	r0, #0
			break;
    19a2:	e7ee      	b.n	1982 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    19a4:	4b0b      	ldr	r3, [pc, #44]	; (19d4 <hif_register_cb+0x68>)
    19a6:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    19a8:	2000      	movs	r0, #0
			break;
    19aa:	e7ea      	b.n	1982 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    19ac:	4b09      	ldr	r3, [pc, #36]	; (19d4 <hif_register_cb+0x68>)
    19ae:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    19b0:	2000      	movs	r0, #0
			break;
    19b2:	e7e6      	b.n	1982 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    19b4:	4a08      	ldr	r2, [pc, #32]	; (19d8 <hif_register_cb+0x6c>)
    19b6:	4909      	ldr	r1, [pc, #36]	; (19dc <hif_register_cb+0x70>)
    19b8:	4809      	ldr	r0, [pc, #36]	; (19e0 <hif_register_cb+0x74>)
    19ba:	4d0a      	ldr	r5, [pc, #40]	; (19e4 <hif_register_cb+0x78>)
    19bc:	47a8      	blx	r5
    19be:	0021      	movs	r1, r4
    19c0:	4809      	ldr	r0, [pc, #36]	; (19e8 <hif_register_cb+0x7c>)
    19c2:	47a8      	blx	r5
    19c4:	200d      	movs	r0, #13
    19c6:	4b09      	ldr	r3, [pc, #36]	; (19ec <hif_register_cb+0x80>)
    19c8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    19ca:	200c      	movs	r0, #12
    19cc:	4240      	negs	r0, r0
			break;
    19ce:	e7d8      	b.n	1982 <hif_register_cb+0x16>
    19d0:	00008948 	.word	0x00008948
    19d4:	200014a0 	.word	0x200014a0
    19d8:	000002d2 	.word	0x000002d2
    19dc:	00008998 	.word	0x00008998
    19e0:	00008920 	.word	0x00008920
    19e4:	000075f9 	.word	0x000075f9
    19e8:	00008cb4 	.word	0x00008cb4
    19ec:	0000762d 	.word	0x0000762d

000019f0 <hif_init>:
{
    19f0:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    19f2:	222c      	movs	r2, #44	; 0x2c
    19f4:	2100      	movs	r1, #0
    19f6:	4806      	ldr	r0, [pc, #24]	; (1a10 <hif_init+0x20>)
    19f8:	4b06      	ldr	r3, [pc, #24]	; (1a14 <hif_init+0x24>)
    19fa:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    19fc:	4806      	ldr	r0, [pc, #24]	; (1a18 <hif_init+0x28>)
    19fe:	4b07      	ldr	r3, [pc, #28]	; (1a1c <hif_init+0x2c>)
    1a00:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    1a02:	4907      	ldr	r1, [pc, #28]	; (1a20 <hif_init+0x30>)
    1a04:	2003      	movs	r0, #3
    1a06:	4b07      	ldr	r3, [pc, #28]	; (1a24 <hif_init+0x34>)
    1a08:	4798      	blx	r3
}
    1a0a:	2000      	movs	r0, #0
    1a0c:	bd10      	pop	{r4, pc}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	200014a0 	.word	0x200014a0
    1a14:	000010e1 	.word	0x000010e1
    1a18:	0000110d 	.word	0x0000110d
    1a1c:	00000d7d 	.word	0x00000d7d
    1a20:	0000111d 	.word	0x0000111d
    1a24:	0000196d 	.word	0x0000196d

00001a28 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1a28:	b530      	push	{r4, r5, lr}
    1a2a:	b09f      	sub	sp, #124	; 0x7c
    1a2c:	0004      	movs	r4, r0
    1a2e:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1a30:	282c      	cmp	r0, #44	; 0x2c
    1a32:	d036      	beq.n	1aa2 <m2m_wifi_cb+0x7a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1a34:	281b      	cmp	r0, #27
    1a36:	d044      	beq.n	1ac2 <m2m_wifi_cb+0x9a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1a38:	2806      	cmp	r0, #6
    1a3a:	d052      	beq.n	1ae2 <m2m_wifi_cb+0xba>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1a3c:	280e      	cmp	r0, #14
    1a3e:	d02e      	beq.n	1a9e <m2m_wifi_cb+0x76>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1a40:	2832      	cmp	r0, #50	; 0x32
    1a42:	d05e      	beq.n	1b02 <m2m_wifi_cb+0xda>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_FAILURE)
    1a44:	283d      	cmp	r0, #61	; 0x3d
    1a46:	d100      	bne.n	1a4a <m2m_wifi_cb+0x22>
    1a48:	e06b      	b.n	1b22 <m2m_wifi_cb+0xfa>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_FAILURE, NULL);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1a4a:	282f      	cmp	r0, #47	; 0x2f
    1a4c:	d100      	bne.n	1a50 <m2m_wifi_cb+0x28>
    1a4e:	e078      	b.n	1b42 <m2m_wifi_cb+0x11a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1a50:	2834      	cmp	r0, #52	; 0x34
    1a52:	d100      	bne.n	1a56 <m2m_wifi_cb+0x2e>
    1a54:	e08a      	b.n	1b6c <m2m_wifi_cb+0x144>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1a56:	2811      	cmp	r0, #17
    1a58:	d100      	bne.n	1a5c <m2m_wifi_cb+0x34>
    1a5a:	e0aa      	b.n	1bb2 <m2m_wifi_cb+0x18a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1a5c:	2813      	cmp	r0, #19
    1a5e:	d100      	bne.n	1a62 <m2m_wifi_cb+0x3a>
    1a60:	e0c0      	b.n	1be4 <m2m_wifi_cb+0x1bc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1a62:	2804      	cmp	r0, #4
    1a64:	d100      	bne.n	1a68 <m2m_wifi_cb+0x40>
    1a66:	e0cf      	b.n	1c08 <m2m_wifi_cb+0x1e0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1a68:	2865      	cmp	r0, #101	; 0x65
    1a6a:	d100      	bne.n	1a6e <m2m_wifi_cb+0x46>
    1a6c:	e0de      	b.n	1c2c <m2m_wifi_cb+0x204>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1a6e:	2809      	cmp	r0, #9
    1a70:	d100      	bne.n	1a74 <m2m_wifi_cb+0x4c>
    1a72:	e0ed      	b.n	1c50 <m2m_wifi_cb+0x228>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1a74:	282a      	cmp	r0, #42	; 0x2a
    1a76:	d100      	bne.n	1a7a <m2m_wifi_cb+0x52>
    1a78:	e0fc      	b.n	1c74 <m2m_wifi_cb+0x24c>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQRSP_DELETE_APID)
    1a7a:	2827      	cmp	r0, #39	; 0x27
    1a7c:	d100      	bne.n	1a80 <m2m_wifi_cb+0x58>
    1a7e:	e10b      	b.n	1c98 <m2m_wifi_cb+0x270>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1a80:	2820      	cmp	r0, #32
    1a82:	d100      	bne.n	1a86 <m2m_wifi_cb+0x5e>
    1a84:	e11a      	b.n	1cbc <m2m_wifi_cb+0x294>
			}
		}
#endif	/* ETH_MODE */
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1a86:	2210      	movs	r2, #16
    1a88:	32ff      	adds	r2, #255	; 0xff
    1a8a:	499b      	ldr	r1, [pc, #620]	; (1cf8 <m2m_wifi_cb+0x2d0>)
    1a8c:	489b      	ldr	r0, [pc, #620]	; (1cfc <m2m_wifi_cb+0x2d4>)
    1a8e:	4d9c      	ldr	r5, [pc, #624]	; (1d00 <m2m_wifi_cb+0x2d8>)
    1a90:	47a8      	blx	r5
    1a92:	0021      	movs	r1, r4
    1a94:	489b      	ldr	r0, [pc, #620]	; (1d04 <m2m_wifi_cb+0x2dc>)
    1a96:	47a8      	blx	r5
    1a98:	200d      	movs	r0, #13
    1a9a:	4b9b      	ldr	r3, [pc, #620]	; (1d08 <m2m_wifi_cb+0x2e0>)
    1a9c:	4798      	blx	r3
	}
}
    1a9e:	b01f      	add	sp, #124	; 0x7c
    1aa0:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1aa2:	2300      	movs	r3, #0
    1aa4:	2204      	movs	r2, #4
    1aa6:	a903      	add	r1, sp, #12
    1aa8:	0028      	movs	r0, r5
    1aaa:	4c98      	ldr	r4, [pc, #608]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1aac:	47a0      	blx	r4
    1aae:	2800      	cmp	r0, #0
    1ab0:	d1f5      	bne.n	1a9e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    1ab2:	4b97      	ldr	r3, [pc, #604]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1ab4:	681b      	ldr	r3, [r3, #0]
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	d0f1      	beq.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1aba:	a903      	add	r1, sp, #12
    1abc:	302c      	adds	r0, #44	; 0x2c
    1abe:	4798      	blx	r3
    1ac0:	e7ed      	b.n	1a9e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1ac2:	2300      	movs	r3, #0
    1ac4:	2208      	movs	r2, #8
    1ac6:	a903      	add	r1, sp, #12
    1ac8:	0028      	movs	r0, r5
    1aca:	4c90      	ldr	r4, [pc, #576]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1acc:	47a0      	blx	r4
    1ace:	2800      	cmp	r0, #0
    1ad0:	d1e5      	bne.n	1a9e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    1ad2:	4b8f      	ldr	r3, [pc, #572]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1ad4:	681b      	ldr	r3, [r3, #0]
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d0e1      	beq.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1ada:	a903      	add	r1, sp, #12
    1adc:	301b      	adds	r0, #27
    1ade:	4798      	blx	r3
    1ae0:	e7dd      	b.n	1a9e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1ae2:	2301      	movs	r3, #1
    1ae4:	2230      	movs	r2, #48	; 0x30
    1ae6:	a903      	add	r1, sp, #12
    1ae8:	0028      	movs	r0, r5
    1aea:	4c88      	ldr	r4, [pc, #544]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1aec:	47a0      	blx	r4
    1aee:	2800      	cmp	r0, #0
    1af0:	d1d5      	bne.n	1a9e <m2m_wifi_cb+0x76>
			if(gpfAppWifiCb)
    1af2:	4b87      	ldr	r3, [pc, #540]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1af4:	681b      	ldr	r3, [r3, #0]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d0d1      	beq.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1afa:	a903      	add	r1, sp, #12
    1afc:	3006      	adds	r0, #6
    1afe:	4798      	blx	r3
    1b00:	e7cd      	b.n	1a9e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1b02:	2300      	movs	r3, #0
    1b04:	2218      	movs	r2, #24
    1b06:	a903      	add	r1, sp, #12
    1b08:	0028      	movs	r0, r5
    1b0a:	4c80      	ldr	r4, [pc, #512]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1b0c:	47a0      	blx	r4
    1b0e:	2800      	cmp	r0, #0
    1b10:	d1c5      	bne.n	1a9e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    1b12:	4b7f      	ldr	r3, [pc, #508]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1b14:	681b      	ldr	r3, [r3, #0]
    1b16:	2b00      	cmp	r3, #0
    1b18:	d0c1      	beq.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1b1a:	a903      	add	r1, sp, #12
    1b1c:	3032      	adds	r0, #50	; 0x32
    1b1e:	4798      	blx	r3
    1b20:	e7bd      	b.n	1a9e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, NULL, 0, 1) == M2M_SUCCESS)
    1b22:	2301      	movs	r3, #1
    1b24:	2200      	movs	r2, #0
    1b26:	2100      	movs	r1, #0
    1b28:	0028      	movs	r0, r5
    1b2a:	4c78      	ldr	r4, [pc, #480]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1b2c:	47a0      	blx	r4
    1b2e:	2800      	cmp	r0, #0
    1b30:	d1b5      	bne.n	1a9e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    1b32:	4b77      	ldr	r3, [pc, #476]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1b34:	681b      	ldr	r3, [r3, #0]
    1b36:	2b00      	cmp	r3, #0
    1b38:	d0b1      	beq.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_FAILURE, NULL);
    1b3a:	2100      	movs	r1, #0
    1b3c:	303d      	adds	r0, #61	; 0x3d
    1b3e:	4798      	blx	r3
    1b40:	e7ad      	b.n	1a9e <m2m_wifi_cb+0x76>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1b42:	2264      	movs	r2, #100	; 0x64
    1b44:	2100      	movs	r1, #0
    1b46:	a803      	add	r0, sp, #12
    1b48:	4b72      	ldr	r3, [pc, #456]	; (1d14 <m2m_wifi_cb+0x2ec>)
    1b4a:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1b4c:	2300      	movs	r3, #0
    1b4e:	2264      	movs	r2, #100	; 0x64
    1b50:	a903      	add	r1, sp, #12
    1b52:	0028      	movs	r0, r5
    1b54:	4c6d      	ldr	r4, [pc, #436]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1b56:	47a0      	blx	r4
    1b58:	2800      	cmp	r0, #0
    1b5a:	d1a0      	bne.n	1a9e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    1b5c:	4b6c      	ldr	r3, [pc, #432]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1b5e:	681b      	ldr	r3, [r3, #0]
    1b60:	2b00      	cmp	r3, #0
    1b62:	d09c      	beq.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1b64:	a903      	add	r1, sp, #12
    1b66:	302f      	adds	r0, #47	; 0x2f
    1b68:	4798      	blx	r3
    1b6a:	e798      	b.n	1a9e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1b6c:	2300      	movs	r3, #0
    1b6e:	2204      	movs	r2, #4
    1b70:	a903      	add	r1, sp, #12
    1b72:	0028      	movs	r0, r5
    1b74:	4c65      	ldr	r4, [pc, #404]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1b76:	47a0      	blx	r4
    1b78:	2800      	cmp	r0, #0
    1b7a:	d000      	beq.n	1b7e <m2m_wifi_cb+0x156>
    1b7c:	e78f      	b.n	1a9e <m2m_wifi_cb+0x76>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1b7e:	4866      	ldr	r0, [pc, #408]	; (1d18 <m2m_wifi_cb+0x2f0>)
    1b80:	4c5f      	ldr	r4, [pc, #380]	; (1d00 <m2m_wifi_cb+0x2d8>)
    1b82:	47a0      	blx	r4
    1b84:	9803      	ldr	r0, [sp, #12]
    1b86:	0c03      	lsrs	r3, r0, #16
    1b88:	21ff      	movs	r1, #255	; 0xff
    1b8a:	400b      	ands	r3, r1
    1b8c:	0a02      	lsrs	r2, r0, #8
    1b8e:	400a      	ands	r2, r1
    1b90:	4001      	ands	r1, r0
    1b92:	0e00      	lsrs	r0, r0, #24
    1b94:	9000      	str	r0, [sp, #0]
    1b96:	4861      	ldr	r0, [pc, #388]	; (1d1c <m2m_wifi_cb+0x2f4>)
    1b98:	47a0      	blx	r4
    1b9a:	200d      	movs	r0, #13
    1b9c:	4b5a      	ldr	r3, [pc, #360]	; (1d08 <m2m_wifi_cb+0x2e0>)
    1b9e:	4798      	blx	r3
			if (gpfAppWifiCb)
    1ba0:	4b5b      	ldr	r3, [pc, #364]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1ba2:	681b      	ldr	r3, [r3, #0]
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d100      	bne.n	1baa <m2m_wifi_cb+0x182>
    1ba8:	e779      	b.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1baa:	2100      	movs	r1, #0
    1bac:	2034      	movs	r0, #52	; 0x34
    1bae:	4798      	blx	r3
    1bb0:	e775      	b.n	1a9e <m2m_wifi_cb+0x76>
		gu8scanInProgress = 0;
    1bb2:	2200      	movs	r2, #0
    1bb4:	4b5a      	ldr	r3, [pc, #360]	; (1d20 <m2m_wifi_cb+0x2f8>)
    1bb6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1bb8:	2300      	movs	r3, #0
    1bba:	3204      	adds	r2, #4
    1bbc:	a903      	add	r1, sp, #12
    1bbe:	0028      	movs	r0, r5
    1bc0:	4c52      	ldr	r4, [pc, #328]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1bc2:	47a0      	blx	r4
    1bc4:	2800      	cmp	r0, #0
    1bc6:	d000      	beq.n	1bca <m2m_wifi_cb+0x1a2>
    1bc8:	e769      	b.n	1a9e <m2m_wifi_cb+0x76>
			gu8ChNum = strState.u8NumofCh;
    1bca:	ab03      	add	r3, sp, #12
    1bcc:	781a      	ldrb	r2, [r3, #0]
    1bce:	4b55      	ldr	r3, [pc, #340]	; (1d24 <m2m_wifi_cb+0x2fc>)
    1bd0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1bd2:	4b4f      	ldr	r3, [pc, #316]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1bd4:	681b      	ldr	r3, [r3, #0]
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d100      	bne.n	1bdc <m2m_wifi_cb+0x1b4>
    1bda:	e760      	b.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1bdc:	a903      	add	r1, sp, #12
    1bde:	3011      	adds	r0, #17
    1be0:	4798      	blx	r3
    1be2:	e75c      	b.n	1a9e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1be4:	2300      	movs	r3, #0
    1be6:	222c      	movs	r2, #44	; 0x2c
    1be8:	a903      	add	r1, sp, #12
    1bea:	0028      	movs	r0, r5
    1bec:	4c47      	ldr	r4, [pc, #284]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1bee:	47a0      	blx	r4
    1bf0:	2800      	cmp	r0, #0
    1bf2:	d000      	beq.n	1bf6 <m2m_wifi_cb+0x1ce>
    1bf4:	e753      	b.n	1a9e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    1bf6:	4b46      	ldr	r3, [pc, #280]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1bf8:	681b      	ldr	r3, [r3, #0]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d100      	bne.n	1c00 <m2m_wifi_cb+0x1d8>
    1bfe:	e74e      	b.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1c00:	a903      	add	r1, sp, #12
    1c02:	3013      	adds	r0, #19
    1c04:	4798      	blx	r3
    1c06:	e74a      	b.n	1a9e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1c08:	2300      	movs	r3, #0
    1c0a:	2204      	movs	r2, #4
    1c0c:	a91c      	add	r1, sp, #112	; 0x70
    1c0e:	0028      	movs	r0, r5
    1c10:	4c3e      	ldr	r4, [pc, #248]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1c12:	47a0      	blx	r4
    1c14:	2800      	cmp	r0, #0
    1c16:	d000      	beq.n	1c1a <m2m_wifi_cb+0x1f2>
    1c18:	e741      	b.n	1a9e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    1c1a:	4b3d      	ldr	r3, [pc, #244]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1c1c:	681b      	ldr	r3, [r3, #0]
    1c1e:	2b00      	cmp	r3, #0
    1c20:	d100      	bne.n	1c24 <m2m_wifi_cb+0x1fc>
    1c22:	e73c      	b.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1c24:	a91c      	add	r1, sp, #112	; 0x70
    1c26:	3004      	adds	r0, #4
    1c28:	4798      	blx	r3
    1c2a:	e738      	b.n	1a9e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1c2c:	2300      	movs	r3, #0
    1c2e:	2204      	movs	r2, #4
    1c30:	a91c      	add	r1, sp, #112	; 0x70
    1c32:	0028      	movs	r0, r5
    1c34:	4c35      	ldr	r4, [pc, #212]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1c36:	47a0      	blx	r4
    1c38:	2800      	cmp	r0, #0
    1c3a:	d000      	beq.n	1c3e <m2m_wifi_cb+0x216>
    1c3c:	e72f      	b.n	1a9e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    1c3e:	4b34      	ldr	r3, [pc, #208]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1c40:	681b      	ldr	r3, [r3, #0]
    1c42:	2b00      	cmp	r3, #0
    1c44:	d100      	bne.n	1c48 <m2m_wifi_cb+0x220>
    1c46:	e72a      	b.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1c48:	a91c      	add	r1, sp, #112	; 0x70
    1c4a:	3065      	adds	r0, #101	; 0x65
    1c4c:	4798      	blx	r3
    1c4e:	e726      	b.n	1a9e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1c50:	2301      	movs	r3, #1
    1c52:	2264      	movs	r2, #100	; 0x64
    1c54:	a903      	add	r1, sp, #12
    1c56:	0028      	movs	r0, r5
    1c58:	4c2c      	ldr	r4, [pc, #176]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1c5a:	47a0      	blx	r4
    1c5c:	2800      	cmp	r0, #0
    1c5e:	d000      	beq.n	1c62 <m2m_wifi_cb+0x23a>
    1c60:	e71d      	b.n	1a9e <m2m_wifi_cb+0x76>
			if(gpfAppWifiCb)
    1c62:	4b2b      	ldr	r3, [pc, #172]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1c64:	681b      	ldr	r3, [r3, #0]
    1c66:	2b00      	cmp	r3, #0
    1c68:	d100      	bne.n	1c6c <m2m_wifi_cb+0x244>
    1c6a:	e718      	b.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1c6c:	a903      	add	r1, sp, #12
    1c6e:	3009      	adds	r0, #9
    1c70:	4798      	blx	r3
    1c72:	e714      	b.n	1a9e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1c74:	2301      	movs	r3, #1
    1c76:	2204      	movs	r2, #4
    1c78:	a903      	add	r1, sp, #12
    1c7a:	0028      	movs	r0, r5
    1c7c:	4c23      	ldr	r4, [pc, #140]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1c7e:	47a0      	blx	r4
    1c80:	2800      	cmp	r0, #0
    1c82:	d000      	beq.n	1c86 <m2m_wifi_cb+0x25e>
    1c84:	e70b      	b.n	1a9e <m2m_wifi_cb+0x76>
			if(gpfAppWifiCb)
    1c86:	4b22      	ldr	r3, [pc, #136]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1c88:	681b      	ldr	r3, [r3, #0]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d100      	bne.n	1c90 <m2m_wifi_cb+0x268>
    1c8e:	e706      	b.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1c90:	a903      	add	r1, sp, #12
    1c92:	302a      	adds	r0, #42	; 0x2a
    1c94:	4798      	blx	r3
    1c96:	e702      	b.n	1a9e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MGenericResp), 0) == M2M_SUCCESS)
    1c98:	2300      	movs	r3, #0
    1c9a:	2204      	movs	r2, #4
    1c9c:	a903      	add	r1, sp, #12
    1c9e:	0028      	movs	r0, r5
    1ca0:	4c1a      	ldr	r4, [pc, #104]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1ca2:	47a0      	blx	r4
    1ca4:	2800      	cmp	r0, #0
    1ca6:	d000      	beq.n	1caa <m2m_wifi_cb+0x282>
    1ca8:	e6f9      	b.n	1a9e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    1caa:	4b19      	ldr	r3, [pc, #100]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1cac:	681b      	ldr	r3, [r3, #0]
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d100      	bne.n	1cb4 <m2m_wifi_cb+0x28c>
    1cb2:	e6f4      	b.n	1a9e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
    1cb4:	a903      	add	r1, sp, #12
    1cb6:	3027      	adds	r0, #39	; 0x27
    1cb8:	4798      	blx	r3
    1cba:	e6f0      	b.n	1a9e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1cbc:	2300      	movs	r3, #0
    1cbe:	2208      	movs	r2, #8
    1cc0:	a903      	add	r1, sp, #12
    1cc2:	0028      	movs	r0, r5
    1cc4:	4c11      	ldr	r4, [pc, #68]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1cc6:	47a0      	blx	r4
    1cc8:	2800      	cmp	r0, #0
    1cca:	d000      	beq.n	1cce <m2m_wifi_cb+0x2a6>
    1ccc:	e6e7      	b.n	1a9e <m2m_wifi_cb+0x76>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    1cce:	ab03      	add	r3, sp, #12
    1cd0:	889a      	ldrh	r2, [r3, #4]
    1cd2:	0028      	movs	r0, r5
    1cd4:	3008      	adds	r0, #8
    1cd6:	2301      	movs	r3, #1
    1cd8:	9903      	ldr	r1, [sp, #12]
    1cda:	4c0c      	ldr	r4, [pc, #48]	; (1d0c <m2m_wifi_cb+0x2e4>)
    1cdc:	47a0      	blx	r4
    1cde:	2800      	cmp	r0, #0
    1ce0:	d000      	beq.n	1ce4 <m2m_wifi_cb+0x2bc>
    1ce2:	e6dc      	b.n	1a9e <m2m_wifi_cb+0x76>
				if(gpfAppWifiCb)
    1ce4:	4b0a      	ldr	r3, [pc, #40]	; (1d10 <m2m_wifi_cb+0x2e8>)
    1ce6:	681b      	ldr	r3, [r3, #0]
    1ce8:	2b00      	cmp	r3, #0
    1cea:	d100      	bne.n	1cee <m2m_wifi_cb+0x2c6>
    1cec:	e6d7      	b.n	1a9e <m2m_wifi_cb+0x76>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    1cee:	a903      	add	r1, sp, #12
    1cf0:	3020      	adds	r0, #32
    1cf2:	4798      	blx	r3
    1cf4:	e6d3      	b.n	1a9e <m2m_wifi_cb+0x76>
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	00008d30 	.word	0x00008d30
    1cfc:	00008920 	.word	0x00008920
    1d00:	000075f9 	.word	0x000075f9
    1d04:	00008e68 	.word	0x00008e68
    1d08:	0000762d 	.word	0x0000762d
    1d0c:	00001885 	.word	0x00001885
    1d10:	200002a8 	.word	0x200002a8
    1d14:	000010e1 	.word	0x000010e1
    1d18:	00008cc0 	.word	0x00008cc0
    1d1c:	00008e48 	.word	0x00008e48
    1d20:	200002ae 	.word	0x200002ae
    1d24:	200002ac 	.word	0x200002ac

00001d28 <m2m_wifi_connect_prepare_msg>:
	tenuM2mSecType		enuAuthType,
	uint16				u16AuthSize,
	tstrNetworkId		*pstrNetworkId,
	tstrM2mWifiConnHdr	*pstrWifiConn
)
{
    1d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d2a:	46c6      	mov	lr, r8
    1d2c:	b500      	push	{lr}
    1d2e:	0007      	movs	r7, r0
    1d30:	4688      	mov	r8, r1
    1d32:	001d      	movs	r5, r3
    1d34:	9c06      	ldr	r4, [sp, #24]
	sint8	ret = M2M_ERR_FAIL;
	uint16	u16CredSize = sizeof(tstrM2mConnCredCmn) + u16AuthSize;
    1d36:	322c      	adds	r2, #44	; 0x2c
    1d38:	b296      	uxth	r6, r2

	/* Check application params. */
	if (
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d043      	beq.n	1dc6 <m2m_wifi_connect_prepare_msg+0x9e>
			(pstrNetworkId == NULL)
		||	(pstrNetworkId->pu8Ssid == NULL)
    1d3e:	685b      	ldr	r3, [r3, #4]
    1d40:	2b00      	cmp	r3, #0
    1d42:	d043      	beq.n	1dcc <m2m_wifi_connect_prepare_msg+0xa4>
		||	(pstrNetworkId->u8SsidLen >= M2M_MAX_SSID_LEN)
    1d44:	7a2b      	ldrb	r3, [r5, #8]
    1d46:	2b20      	cmp	r3, #32
    1d48:	d843      	bhi.n	1dd2 <m2m_wifi_connect_prepare_msg+0xaa>
	)
		goto INVALID_ARG;

	if (pstrWifiConn != NULL)
    1d4a:	2c00      	cmp	r4, #0
    1d4c:	d044      	beq.n	1dd8 <m2m_wifi_connect_prepare_msg+0xb0>
	{
		tstrM2mConnCredHdr	*pstrHdr = &pstrWifiConn->strConnCredHdr;
		tstrM2mConnCredCmn	*pstrCmn = &pstrWifiConn->strConnCredCmn;

		m2m_memset((uint8*)pstrWifiConn, 0, sizeof(tstrM2mWifiConnHdr));
    1d4e:	2230      	movs	r2, #48	; 0x30
    1d50:	2100      	movs	r1, #0
    1d52:	0020      	movs	r0, r4
    1d54:	4b27      	ldr	r3, [pc, #156]	; (1df4 <m2m_wifi_connect_prepare_msg+0xcc>)
    1d56:	4798      	blx	r3

		pstrHdr->u16CredSize = u16CredSize;
    1d58:	8026      	strh	r6, [r4, #0]
		switch (enuCredStoreOption)
    1d5a:	2f01      	cmp	r7, #1
    1d5c:	d007      	beq.n	1d6e <m2m_wifi_connect_prepare_msg+0x46>
    1d5e:	2f00      	cmp	r7, #0
    1d60:	d009      	beq.n	1d76 <m2m_wifi_connect_prepare_msg+0x4e>
    1d62:	2f02      	cmp	r7, #2
    1d64:	d13b      	bne.n	1dde <m2m_wifi_connect_prepare_msg+0xb6>
		{
			case WIFI_CRED_SAVE_ENCRYPTED:
				pstrHdr->u8CredStoreFlags |= M2M_CRED_ENCRYPT_FLAG;
    1d66:	78a3      	ldrb	r3, [r4, #2]
    1d68:	2202      	movs	r2, #2
    1d6a:	4313      	orrs	r3, r2
    1d6c:	70a3      	strb	r3, [r4, #2]
			// intentional fall through...
			case WIFI_CRED_SAVE_UNENCRYPTED:
				pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
    1d6e:	78a3      	ldrb	r3, [r4, #2]
    1d70:	2201      	movs	r2, #1
    1d72:	4313      	orrs	r3, r2
    1d74:	70a3      	strb	r3, [r4, #2]
				break;
			default:
				goto INVALID_ARG;
		}

		if (pstrNetworkId->enuChannel == M2M_WIFI_CH_ALL)
    1d76:	7a6b      	ldrb	r3, [r5, #9]
    1d78:	2bff      	cmp	r3, #255	; 0xff
    1d7a:	d022      	beq.n	1dc2 <m2m_wifi_connect_prepare_msg+0x9a>
			pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel);
		else if ((pstrNetworkId->enuChannel <= M2M_WIFI_CH_14) && (pstrNetworkId->enuChannel >= M2M_WIFI_CH_1))
    1d7c:	3b01      	subs	r3, #1
    1d7e:	b2db      	uxtb	r3, r3
    1d80:	2b0d      	cmp	r3, #13
    1d82:	d82f      	bhi.n	1de4 <m2m_wifi_connect_prepare_msg+0xbc>
			pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel) - 1;
    1d84:	70e3      	strb	r3, [r4, #3]
		else
			goto INVALID_ARG;

		if ((enuAuthType == M2M_WIFI_SEC_INVALID) || (enuAuthType >= M2M_WIFI_NUM_AUTH_TYPES))
    1d86:	4643      	mov	r3, r8
    1d88:	3b01      	subs	r3, #1
    1d8a:	2b03      	cmp	r3, #3
    1d8c:	d82d      	bhi.n	1dea <m2m_wifi_connect_prepare_msg+0xc2>
			goto INVALID_ARG;
		pstrCmn->u8AuthType = (uint8)enuAuthType;
    1d8e:	232c      	movs	r3, #44	; 0x2c
    1d90:	4642      	mov	r2, r8
    1d92:	54e2      	strb	r2, [r4, r3]

		pstrCmn->u8SsidLen = pstrNetworkId->u8SsidLen;
    1d94:	7a2b      	ldrb	r3, [r5, #8]
    1d96:	7123      	strb	r3, [r4, #4]
		m2m_memcpy(pstrCmn->au8Ssid, pstrNetworkId->pu8Ssid, pstrNetworkId->u8SsidLen);
    1d98:	7a2a      	ldrb	r2, [r5, #8]
    1d9a:	1d60      	adds	r0, r4, #5
    1d9c:	6869      	ldr	r1, [r5, #4]
    1d9e:	4b16      	ldr	r3, [pc, #88]	; (1df8 <m2m_wifi_connect_prepare_msg+0xd0>)
    1da0:	4798      	blx	r3
		if (pstrNetworkId->pu8Bssid != NULL)
    1da2:	682b      	ldr	r3, [r5, #0]
    1da4:	2b00      	cmp	r3, #0
    1da6:	d023      	beq.n	1df0 <m2m_wifi_connect_prepare_msg+0xc8>
		{
			pstrCmn->u8Options = M2M_WIFI_CONN_BSSID_FLAG;
    1da8:	2201      	movs	r2, #1
    1daa:	2325      	movs	r3, #37	; 0x25
    1dac:	54e2      	strb	r2, [r4, r3]
			m2m_memcpy(pstrCmn->au8Bssid, pstrNetworkId->pu8Bssid, M2M_MAC_ADDRES_LEN);
    1dae:	6829      	ldr	r1, [r5, #0]
    1db0:	0020      	movs	r0, r4
    1db2:	3026      	adds	r0, #38	; 0x26
    1db4:	3205      	adds	r2, #5
    1db6:	4b10      	ldr	r3, [pc, #64]	; (1df8 <m2m_wifi_connect_prepare_msg+0xd0>)
    1db8:	4798      	blx	r3
		}
		/* Everything is ok, set return value. */
		ret = M2M_SUCCESS;
    1dba:	2000      	movs	r0, #0
	}
	return ret;
INVALID_ARG:
	return M2M_ERR_INVALID_ARG;
}
    1dbc:	bc04      	pop	{r2}
    1dbe:	4690      	mov	r8, r2
    1dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel);
    1dc2:	70e3      	strb	r3, [r4, #3]
    1dc4:	e7df      	b.n	1d86 <m2m_wifi_connect_prepare_msg+0x5e>
	return M2M_ERR_INVALID_ARG;
    1dc6:	200f      	movs	r0, #15
    1dc8:	4240      	negs	r0, r0
    1dca:	e7f7      	b.n	1dbc <m2m_wifi_connect_prepare_msg+0x94>
    1dcc:	200f      	movs	r0, #15
    1dce:	4240      	negs	r0, r0
    1dd0:	e7f4      	b.n	1dbc <m2m_wifi_connect_prepare_msg+0x94>
    1dd2:	200f      	movs	r0, #15
    1dd4:	4240      	negs	r0, r0
    1dd6:	e7f1      	b.n	1dbc <m2m_wifi_connect_prepare_msg+0x94>
	sint8	ret = M2M_ERR_FAIL;
    1dd8:	200c      	movs	r0, #12
    1dda:	4240      	negs	r0, r0
    1ddc:	e7ee      	b.n	1dbc <m2m_wifi_connect_prepare_msg+0x94>
	return M2M_ERR_INVALID_ARG;
    1dde:	200f      	movs	r0, #15
    1de0:	4240      	negs	r0, r0
    1de2:	e7eb      	b.n	1dbc <m2m_wifi_connect_prepare_msg+0x94>
    1de4:	200f      	movs	r0, #15
    1de6:	4240      	negs	r0, r0
    1de8:	e7e8      	b.n	1dbc <m2m_wifi_connect_prepare_msg+0x94>
    1dea:	200f      	movs	r0, #15
    1dec:	4240      	negs	r0, r0
    1dee:	e7e5      	b.n	1dbc <m2m_wifi_connect_prepare_msg+0x94>
		ret = M2M_SUCCESS;
    1df0:	2000      	movs	r0, #0
    1df2:	e7e3      	b.n	1dbc <m2m_wifi_connect_prepare_msg+0x94>
    1df4:	000010e1 	.word	0x000010e1
    1df8:	000010cd 	.word	0x000010cd

00001dfc <m2m_validate_ap_parameters>:
{
    1dfc:	b510      	push	{r4, lr}
    1dfe:	1e04      	subs	r4, r0, #0
	if(pstrM2MAPModeConfig == NULL)
    1e00:	d02b      	beq.n	1e5a <m2m_validate_ap_parameters+0x5e>
	if((m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8SSID) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8SSID) >= M2M_MAX_SSID_LEN))
    1e02:	4b67      	ldr	r3, [pc, #412]	; (1fa0 <m2m_validate_ap_parameters+0x1a4>)
    1e04:	4798      	blx	r3
    1e06:	2800      	cmp	r0, #0
    1e08:	d036      	beq.n	1e78 <m2m_validate_ap_parameters+0x7c>
    1e0a:	0020      	movs	r0, r4
    1e0c:	4b64      	ldr	r3, [pc, #400]	; (1fa0 <m2m_validate_ap_parameters+0x1a4>)
    1e0e:	4798      	blx	r3
    1e10:	2820      	cmp	r0, #32
    1e12:	d831      	bhi.n	1e78 <m2m_validate_ap_parameters+0x7c>
	if(pstrM2MAPModeConfig->strApConfig.u8ListenChannel > M2M_WIFI_CH_14 || pstrM2MAPModeConfig->strApConfig.u8ListenChannel < M2M_WIFI_CH_1)
    1e14:	2321      	movs	r3, #33	; 0x21
    1e16:	5ce3      	ldrb	r3, [r4, r3]
    1e18:	3b01      	subs	r3, #1
    1e1a:	2b0d      	cmp	r3, #13
    1e1c:	d83b      	bhi.n	1e96 <m2m_validate_ap_parameters+0x9a>
	if(!(pstrM2MAPModeConfig->strApConfig.au8DHCPServerIP[0] || pstrM2MAPModeConfig->strApConfig.au8DHCPServerIP[1]))
    1e1e:	2341      	movs	r3, #65	; 0x41
    1e20:	5ce3      	ldrb	r3, [r4, r3]
    1e22:	2b00      	cmp	r3, #0
    1e24:	d107      	bne.n	1e36 <m2m_validate_ap_parameters+0x3a>
    1e26:	3342      	adds	r3, #66	; 0x42
    1e28:	5ce3      	ldrb	r3, [r4, r3]
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	d103      	bne.n	1e36 <m2m_validate_ap_parameters+0x3a>
		if(!(pstrM2MAPModeConfig->strApConfig.au8DHCPServerIP[2]))
    1e2e:	3343      	adds	r3, #67	; 0x43
    1e30:	5ce3      	ldrb	r3, [r4, r3]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d03e      	beq.n	1eb4 <m2m_validate_ap_parameters+0xb8>
	if(pstrM2MAPModeConfig->strApConfig.u8SecType == M2M_WIFI_SEC_OPEN)
    1e36:	233f      	movs	r3, #63	; 0x3f
    1e38:	5ce3      	ldrb	r3, [r4, r3]
    1e3a:	2b01      	cmp	r3, #1
    1e3c:	d100      	bne.n	1e40 <m2m_validate_ap_parameters+0x44>
    1e3e:	e0ac      	b.n	1f9a <m2m_validate_ap_parameters+0x19e>
	else if(pstrM2MAPModeConfig->strApConfig.u8SecType == M2M_WIFI_SEC_WEP)
    1e40:	2b03      	cmp	r3, #3
    1e42:	d046      	beq.n	1ed2 <m2m_validate_ap_parameters+0xd6>
	else if(pstrM2MAPModeConfig->strApConfig.u8SecType == M2M_WIFI_SEC_WPA_PSK)
    1e44:	2b02      	cmp	r3, #2
    1e46:	d000      	beq.n	1e4a <m2m_validate_ap_parameters+0x4e>
    1e48:	e098      	b.n	1f7c <m2m_validate_ap_parameters+0x180>
		if(	((pstrM2MAPModeConfig->strApConfig.u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPModeConfig->strApConfig.u8KeySz + 1) > M2M_MAX_PSK_LEN))
    1e4a:	3321      	adds	r3, #33	; 0x21
    1e4c:	5ce3      	ldrb	r3, [r4, r3]
    1e4e:	3b08      	subs	r3, #8
	sint8 s8Ret = M2M_SUCCESS;
    1e50:	2000      	movs	r0, #0
		if(	((pstrM2MAPModeConfig->strApConfig.u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPModeConfig->strApConfig.u8KeySz + 1) > M2M_MAX_PSK_LEN))
    1e52:	2b38      	cmp	r3, #56	; 0x38
    1e54:	d900      	bls.n	1e58 <m2m_validate_ap_parameters+0x5c>
    1e56:	e082      	b.n	1f5e <m2m_validate_ap_parameters+0x162>
}
    1e58:	bd10      	pop	{r4, pc}
		M2M_ERR("INVALID POINTER\n");
    1e5a:	2228      	movs	r2, #40	; 0x28
    1e5c:	32ff      	adds	r2, #255	; 0xff
    1e5e:	4951      	ldr	r1, [pc, #324]	; (1fa4 <m2m_validate_ap_parameters+0x1a8>)
    1e60:	4851      	ldr	r0, [pc, #324]	; (1fa8 <m2m_validate_ap_parameters+0x1ac>)
    1e62:	4b52      	ldr	r3, [pc, #328]	; (1fac <m2m_validate_ap_parameters+0x1b0>)
    1e64:	4798      	blx	r3
    1e66:	4852      	ldr	r0, [pc, #328]	; (1fb0 <m2m_validate_ap_parameters+0x1b4>)
    1e68:	4b52      	ldr	r3, [pc, #328]	; (1fb4 <m2m_validate_ap_parameters+0x1b8>)
    1e6a:	4798      	blx	r3
    1e6c:	200d      	movs	r0, #13
    1e6e:	4b52      	ldr	r3, [pc, #328]	; (1fb8 <m2m_validate_ap_parameters+0x1bc>)
    1e70:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
    1e72:	200c      	movs	r0, #12
    1e74:	4240      	negs	r0, r0
		goto ERR1;
    1e76:	e7ef      	b.n	1e58 <m2m_validate_ap_parameters+0x5c>
		M2M_ERR("INVALID SSID\n");
    1e78:	2297      	movs	r2, #151	; 0x97
    1e7a:	0052      	lsls	r2, r2, #1
    1e7c:	4949      	ldr	r1, [pc, #292]	; (1fa4 <m2m_validate_ap_parameters+0x1a8>)
    1e7e:	484a      	ldr	r0, [pc, #296]	; (1fa8 <m2m_validate_ap_parameters+0x1ac>)
    1e80:	4b4a      	ldr	r3, [pc, #296]	; (1fac <m2m_validate_ap_parameters+0x1b0>)
    1e82:	4798      	blx	r3
    1e84:	484d      	ldr	r0, [pc, #308]	; (1fbc <m2m_validate_ap_parameters+0x1c0>)
    1e86:	4b4b      	ldr	r3, [pc, #300]	; (1fb4 <m2m_validate_ap_parameters+0x1b8>)
    1e88:	4798      	blx	r3
    1e8a:	200d      	movs	r0, #13
    1e8c:	4b4a      	ldr	r3, [pc, #296]	; (1fb8 <m2m_validate_ap_parameters+0x1bc>)
    1e8e:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
    1e90:	200c      	movs	r0, #12
    1e92:	4240      	negs	r0, r0
		goto ERR1;
    1e94:	e7e0      	b.n	1e58 <m2m_validate_ap_parameters+0x5c>
		M2M_ERR("INVALID CH\n");
    1e96:	2236      	movs	r2, #54	; 0x36
    1e98:	32ff      	adds	r2, #255	; 0xff
    1e9a:	4942      	ldr	r1, [pc, #264]	; (1fa4 <m2m_validate_ap_parameters+0x1a8>)
    1e9c:	4842      	ldr	r0, [pc, #264]	; (1fa8 <m2m_validate_ap_parameters+0x1ac>)
    1e9e:	4b43      	ldr	r3, [pc, #268]	; (1fac <m2m_validate_ap_parameters+0x1b0>)
    1ea0:	4798      	blx	r3
    1ea2:	4847      	ldr	r0, [pc, #284]	; (1fc0 <m2m_validate_ap_parameters+0x1c4>)
    1ea4:	4b43      	ldr	r3, [pc, #268]	; (1fb4 <m2m_validate_ap_parameters+0x1b8>)
    1ea6:	4798      	blx	r3
    1ea8:	200d      	movs	r0, #13
    1eaa:	4b43      	ldr	r3, [pc, #268]	; (1fb8 <m2m_validate_ap_parameters+0x1bc>)
    1eac:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
    1eae:	200c      	movs	r0, #12
    1eb0:	4240      	negs	r0, r0
		goto ERR1;
    1eb2:	e7d1      	b.n	1e58 <m2m_validate_ap_parameters+0x5c>
			M2M_ERR("INVALID DHCP SERVER IP\n");
    1eb4:	229f      	movs	r2, #159	; 0x9f
    1eb6:	0052      	lsls	r2, r2, #1
    1eb8:	493a      	ldr	r1, [pc, #232]	; (1fa4 <m2m_validate_ap_parameters+0x1a8>)
    1eba:	483b      	ldr	r0, [pc, #236]	; (1fa8 <m2m_validate_ap_parameters+0x1ac>)
    1ebc:	4b3b      	ldr	r3, [pc, #236]	; (1fac <m2m_validate_ap_parameters+0x1b0>)
    1ebe:	4798      	blx	r3
    1ec0:	4840      	ldr	r0, [pc, #256]	; (1fc4 <m2m_validate_ap_parameters+0x1c8>)
    1ec2:	4b3c      	ldr	r3, [pc, #240]	; (1fb4 <m2m_validate_ap_parameters+0x1b8>)
    1ec4:	4798      	blx	r3
    1ec6:	200d      	movs	r0, #13
    1ec8:	4b3b      	ldr	r3, [pc, #236]	; (1fb8 <m2m_validate_ap_parameters+0x1bc>)
    1eca:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    1ecc:	200c      	movs	r0, #12
    1ece:	4240      	negs	r0, r0
			goto ERR1;
    1ed0:	e7c2      	b.n	1e58 <m2m_validate_ap_parameters+0x5c>
		if((pstrM2MAPModeConfig->strApConfig.u8KeyIndx == 0) || (pstrM2MAPModeConfig->strApConfig.u8KeyIndx > WEP_KEY_MAX_INDEX))
    1ed2:	331f      	adds	r3, #31
    1ed4:	5ce3      	ldrb	r3, [r4, r3]
    1ed6:	3b01      	subs	r3, #1
    1ed8:	2b03      	cmp	r3, #3
    1eda:	d814      	bhi.n	1f06 <m2m_validate_ap_parameters+0x10a>
		if(	(pstrM2MAPModeConfig->strApConfig.u8KeySz != WEP_40_KEY_STRING_SIZE) &&
    1edc:	2323      	movs	r3, #35	; 0x23
    1ede:	5ce3      	ldrb	r3, [r4, r3]
    1ee0:	2210      	movs	r2, #16
    1ee2:	4393      	bics	r3, r2
    1ee4:	2b0a      	cmp	r3, #10
    1ee6:	d01d      	beq.n	1f24 <m2m_validate_ap_parameters+0x128>
			M2M_ERR("INVALID KEY STRING SIZE\n");
    1ee8:	3247      	adds	r2, #71	; 0x47
    1eea:	32ff      	adds	r2, #255	; 0xff
    1eec:	492d      	ldr	r1, [pc, #180]	; (1fa4 <m2m_validate_ap_parameters+0x1a8>)
    1eee:	482e      	ldr	r0, [pc, #184]	; (1fa8 <m2m_validate_ap_parameters+0x1ac>)
    1ef0:	4b2e      	ldr	r3, [pc, #184]	; (1fac <m2m_validate_ap_parameters+0x1b0>)
    1ef2:	4798      	blx	r3
    1ef4:	4834      	ldr	r0, [pc, #208]	; (1fc8 <m2m_validate_ap_parameters+0x1cc>)
    1ef6:	4b2f      	ldr	r3, [pc, #188]	; (1fb4 <m2m_validate_ap_parameters+0x1b8>)
    1ef8:	4798      	blx	r3
    1efa:	200d      	movs	r0, #13
    1efc:	4b2e      	ldr	r3, [pc, #184]	; (1fb8 <m2m_validate_ap_parameters+0x1bc>)
    1efe:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    1f00:	200c      	movs	r0, #12
    1f02:	4240      	negs	r0, r0
			goto ERR1;
    1f04:	e7a8      	b.n	1e58 <m2m_validate_ap_parameters+0x5c>
			M2M_ERR("INVALID KEY INDEX\n");
    1f06:	224e      	movs	r2, #78	; 0x4e
    1f08:	32ff      	adds	r2, #255	; 0xff
    1f0a:	4926      	ldr	r1, [pc, #152]	; (1fa4 <m2m_validate_ap_parameters+0x1a8>)
    1f0c:	4826      	ldr	r0, [pc, #152]	; (1fa8 <m2m_validate_ap_parameters+0x1ac>)
    1f0e:	4b27      	ldr	r3, [pc, #156]	; (1fac <m2m_validate_ap_parameters+0x1b0>)
    1f10:	4798      	blx	r3
    1f12:	482e      	ldr	r0, [pc, #184]	; (1fcc <m2m_validate_ap_parameters+0x1d0>)
    1f14:	4b27      	ldr	r3, [pc, #156]	; (1fb4 <m2m_validate_ap_parameters+0x1b8>)
    1f16:	4798      	blx	r3
    1f18:	200d      	movs	r0, #13
    1f1a:	4b27      	ldr	r3, [pc, #156]	; (1fb8 <m2m_validate_ap_parameters+0x1bc>)
    1f1c:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    1f1e:	200c      	movs	r0, #12
    1f20:	4240      	negs	r0, r0
			goto ERR1;
    1f22:	e799      	b.n	1e58 <m2m_validate_ap_parameters+0x5c>
		if((m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8WepKey) > WEP_104_KEY_STRING_SIZE))
    1f24:	3424      	adds	r4, #36	; 0x24
    1f26:	0020      	movs	r0, r4
    1f28:	4b1d      	ldr	r3, [pc, #116]	; (1fa0 <m2m_validate_ap_parameters+0x1a4>)
    1f2a:	4798      	blx	r3
    1f2c:	2800      	cmp	r0, #0
    1f2e:	d007      	beq.n	1f40 <m2m_validate_ap_parameters+0x144>
    1f30:	0020      	movs	r0, r4
    1f32:	4b1b      	ldr	r3, [pc, #108]	; (1fa0 <m2m_validate_ap_parameters+0x1a4>)
    1f34:	4798      	blx	r3
    1f36:	0003      	movs	r3, r0
	sint8 s8Ret = M2M_SUCCESS;
    1f38:	2000      	movs	r0, #0
		if((m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPModeConfig->strApConfig.au8WepKey) > WEP_104_KEY_STRING_SIZE))
    1f3a:	2b1a      	cmp	r3, #26
    1f3c:	d800      	bhi.n	1f40 <m2m_validate_ap_parameters+0x144>
    1f3e:	e78b      	b.n	1e58 <m2m_validate_ap_parameters+0x5c>
			M2M_ERR("INVALID KEY SIZE\n");
    1f40:	225e      	movs	r2, #94	; 0x5e
    1f42:	32ff      	adds	r2, #255	; 0xff
    1f44:	4917      	ldr	r1, [pc, #92]	; (1fa4 <m2m_validate_ap_parameters+0x1a8>)
    1f46:	4818      	ldr	r0, [pc, #96]	; (1fa8 <m2m_validate_ap_parameters+0x1ac>)
    1f48:	4b18      	ldr	r3, [pc, #96]	; (1fac <m2m_validate_ap_parameters+0x1b0>)
    1f4a:	4798      	blx	r3
    1f4c:	4820      	ldr	r0, [pc, #128]	; (1fd0 <m2m_validate_ap_parameters+0x1d4>)
    1f4e:	4b19      	ldr	r3, [pc, #100]	; (1fb4 <m2m_validate_ap_parameters+0x1b8>)
    1f50:	4798      	blx	r3
    1f52:	200d      	movs	r0, #13
    1f54:	4b18      	ldr	r3, [pc, #96]	; (1fb8 <m2m_validate_ap_parameters+0x1bc>)
    1f56:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    1f58:	200c      	movs	r0, #12
    1f5a:	4240      	negs	r0, r0
			goto ERR1;
    1f5c:	e77c      	b.n	1e58 <m2m_validate_ap_parameters+0x5c>
			M2M_ERR("INVALID WPA KEY SIZE\n");
    1f5e:	2268      	movs	r2, #104	; 0x68
    1f60:	32ff      	adds	r2, #255	; 0xff
    1f62:	4910      	ldr	r1, [pc, #64]	; (1fa4 <m2m_validate_ap_parameters+0x1a8>)
    1f64:	4810      	ldr	r0, [pc, #64]	; (1fa8 <m2m_validate_ap_parameters+0x1ac>)
    1f66:	4b11      	ldr	r3, [pc, #68]	; (1fac <m2m_validate_ap_parameters+0x1b0>)
    1f68:	4798      	blx	r3
    1f6a:	481a      	ldr	r0, [pc, #104]	; (1fd4 <m2m_validate_ap_parameters+0x1d8>)
    1f6c:	4b11      	ldr	r3, [pc, #68]	; (1fb4 <m2m_validate_ap_parameters+0x1b8>)
    1f6e:	4798      	blx	r3
    1f70:	200d      	movs	r0, #13
    1f72:	4b11      	ldr	r3, [pc, #68]	; (1fb8 <m2m_validate_ap_parameters+0x1bc>)
    1f74:	4798      	blx	r3
			s8Ret = M2M_ERR_FAIL;
    1f76:	200c      	movs	r0, #12
    1f78:	4240      	negs	r0, r0
			goto ERR1;
    1f7a:	e76d      	b.n	1e58 <m2m_validate_ap_parameters+0x5c>
		M2M_ERR("INVALID AUTHENTICATION MODE\n");
    1f7c:	22b7      	movs	r2, #183	; 0xb7
    1f7e:	0052      	lsls	r2, r2, #1
    1f80:	4908      	ldr	r1, [pc, #32]	; (1fa4 <m2m_validate_ap_parameters+0x1a8>)
    1f82:	4809      	ldr	r0, [pc, #36]	; (1fa8 <m2m_validate_ap_parameters+0x1ac>)
    1f84:	4b09      	ldr	r3, [pc, #36]	; (1fac <m2m_validate_ap_parameters+0x1b0>)
    1f86:	4798      	blx	r3
    1f88:	4813      	ldr	r0, [pc, #76]	; (1fd8 <m2m_validate_ap_parameters+0x1dc>)
    1f8a:	4b0a      	ldr	r3, [pc, #40]	; (1fb4 <m2m_validate_ap_parameters+0x1b8>)
    1f8c:	4798      	blx	r3
    1f8e:	200d      	movs	r0, #13
    1f90:	4b09      	ldr	r3, [pc, #36]	; (1fb8 <m2m_validate_ap_parameters+0x1bc>)
    1f92:	4798      	blx	r3
		s8Ret = M2M_ERR_FAIL;
    1f94:	200c      	movs	r0, #12
    1f96:	4240      	negs	r0, r0
		goto ERR1;
    1f98:	e75e      	b.n	1e58 <m2m_validate_ap_parameters+0x5c>
	sint8 s8Ret = M2M_SUCCESS;
    1f9a:	2000      	movs	r0, #0
    1f9c:	e75c      	b.n	1e58 <m2m_validate_ap_parameters+0x5c>
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	000010f1 	.word	0x000010f1
    1fa4:	00008d3c 	.word	0x00008d3c
    1fa8:	00008920 	.word	0x00008920
    1fac:	000075f9 	.word	0x000075f9
    1fb0:	00008d90 	.word	0x00008d90
    1fb4:	00007715 	.word	0x00007715
    1fb8:	0000762d 	.word	0x0000762d
    1fbc:	00008da0 	.word	0x00008da0
    1fc0:	00008db0 	.word	0x00008db0
    1fc4:	00008dbc 	.word	0x00008dbc
    1fc8:	00008de8 	.word	0x00008de8
    1fcc:	00008dd4 	.word	0x00008dd4
    1fd0:	00008e00 	.word	0x00008e00
    1fd4:	00008e14 	.word	0x00008e14
    1fd8:	00008e2c 	.word	0x00008e2c

00001fdc <hexstr_2_bytes>:
		return ch + 10;
	return 0xFF;
	}
/* Convert hexstring to bytes */
static sint8 hexstr_2_bytes(uint8 *pu8Out, uint8 *pu8In, uint8 u8SizeOut)
	{
    1fdc:	b570      	push	{r4, r5, r6, lr}
	while (u8SizeOut--)
    1fde:	1e53      	subs	r3, r2, #1
    1fe0:	b2db      	uxtb	r3, r3
    1fe2:	2a00      	cmp	r2, #0
    1fe4:	d033      	beq.n	204e <STACK_SIZE+0x4e>
    1fe6:	3301      	adds	r3, #1
    1fe8:	18c2      	adds	r2, r0, r3
	ch |= 0x20;
    1fea:	2420      	movs	r4, #32
    1fec:	e01e      	b.n	202c <STACK_SIZE+0x2c>
		return ch + 10;
    1fee:	3b27      	subs	r3, #39	; 0x27
    1ff0:	b2db      	uxtb	r3, r3
	{
		uint8	u8Out = hexchar_2_val(*pu8In++);
		if (u8Out > 0xF)
    1ff2:	2b0f      	cmp	r3, #15
    1ff4:	d82d      	bhi.n	2052 <STACK_SIZE+0x52>
			return M2M_ERR_INVALID_ARG;
		*pu8Out = u8Out * 0x10;
    1ff6:	011b      	lsls	r3, r3, #4
    1ff8:	b2db      	uxtb	r3, r3
    1ffa:	7003      	strb	r3, [r0, #0]
	ch -= 0x30;
    1ffc:	786d      	ldrb	r5, [r5, #1]
    1ffe:	3d30      	subs	r5, #48	; 0x30
    2000:	b2ed      	uxtb	r5, r5
	if (ch <= 9)
    2002:	2d09      	cmp	r5, #9
    2004:	d90a      	bls.n	201c <STACK_SIZE+0x1c>
	ch |= 0x20;
    2006:	4325      	orrs	r5, r4
    2008:	b2ed      	uxtb	r5, r5
	if (ch <= 5)
    200a:	002e      	movs	r6, r5
    200c:	3e31      	subs	r6, #49	; 0x31
    200e:	2e05      	cmp	r6, #5
    2010:	d902      	bls.n	2018 <STACK_SIZE+0x18>
		u8Out = hexchar_2_val(*pu8In++);
		if (u8Out > 0xF)
			return M2M_ERR_INVALID_ARG;
    2012:	200f      	movs	r0, #15
    2014:	4240      	negs	r0, r0
    2016:	e017      	b.n	2048 <STACK_SIZE+0x48>
		return ch + 10;
    2018:	3d27      	subs	r5, #39	; 0x27
    201a:	b2ed      	uxtb	r5, r5
		if (u8Out > 0xF)
    201c:	2d0f      	cmp	r5, #15
    201e:	d81b      	bhi.n	2058 <STACK_SIZE+0x58>
		*pu8Out += u8Out;
    2020:	195b      	adds	r3, r3, r5
    2022:	7003      	strb	r3, [r0, #0]
		pu8Out++;
    2024:	3001      	adds	r0, #1
    2026:	3102      	adds	r1, #2
	while (u8SizeOut--)
    2028:	4290      	cmp	r0, r2
    202a:	d00e      	beq.n	204a <STACK_SIZE+0x4a>
    202c:	000d      	movs	r5, r1
	ch -= 0x30;
    202e:	780b      	ldrb	r3, [r1, #0]
    2030:	3b30      	subs	r3, #48	; 0x30
    2032:	b2db      	uxtb	r3, r3
	if (ch <= 9)
    2034:	2b09      	cmp	r3, #9
    2036:	d9dc      	bls.n	1ff2 <hexstr_2_bytes+0x16>
	ch |= 0x20;
    2038:	4323      	orrs	r3, r4
    203a:	b2db      	uxtb	r3, r3
	if (ch <= 5)
    203c:	001e      	movs	r6, r3
    203e:	3e31      	subs	r6, #49	; 0x31
    2040:	2e05      	cmp	r6, #5
    2042:	d9d4      	bls.n	1fee <hexstr_2_bytes+0x12>
			return M2M_ERR_INVALID_ARG;
    2044:	200f      	movs	r0, #15
    2046:	4240      	negs	r0, r0
	}
	return M2M_SUCCESS;
	}
    2048:	bd70      	pop	{r4, r5, r6, pc}
	return M2M_SUCCESS;
    204a:	2000      	movs	r0, #0
    204c:	e7fc      	b.n	2048 <STACK_SIZE+0x48>
    204e:	2000      	movs	r0, #0
    2050:	e7fa      	b.n	2048 <STACK_SIZE+0x48>
			return M2M_ERR_INVALID_ARG;
    2052:	200f      	movs	r0, #15
    2054:	4240      	negs	r0, r0
    2056:	e7f7      	b.n	2048 <STACK_SIZE+0x48>
			return M2M_ERR_INVALID_ARG;
    2058:	200f      	movs	r0, #15
    205a:	4240      	negs	r0, r0
    205c:	e7f4      	b.n	2048 <STACK_SIZE+0x48>
	...

00002060 <m2m_wifi_init_hold>:
{
    2060:	b510      	push	{r4, lr}
	ret = nm_drv_init_hold();
    2062:	4b04      	ldr	r3, [pc, #16]	; (2074 <m2m_wifi_init_hold+0x14>)
    2064:	4798      	blx	r3
    if(M2M_SUCCESS == ret) {
    2066:	2800      	cmp	r0, #0
    2068:	d102      	bne.n	2070 <m2m_wifi_init_hold+0x10>
        gu8WifiState = WIFI_STATE_INIT;
    206a:	2201      	movs	r2, #1
    206c:	4b02      	ldr	r3, [pc, #8]	; (2078 <m2m_wifi_init_hold+0x18>)
    206e:	701a      	strb	r2, [r3, #0]
}
    2070:	bd10      	pop	{r4, pc}
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	00002fc1 	.word	0x00002fc1
    2078:	200002ad 	.word	0x200002ad

0000207c <m2m_wifi_init_start>:
{
    207c:	b5f0      	push	{r4, r5, r6, r7, lr}
    207e:	b08f      	sub	sp, #60	; 0x3c
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    2080:	2201      	movs	r2, #1
    2082:	230f      	movs	r3, #15
    2084:	446b      	add	r3, sp
    2086:	701a      	strb	r2, [r3, #0]
	if(pWifiInitParam == NULL) {
    2088:	2800      	cmp	r0, #0
    208a:	d067      	beq.n	215c <m2m_wifi_init_start+0xe0>
	gpfAppWifiCb = pWifiInitParam->pfAppWifiCb;
    208c:	6802      	ldr	r2, [r0, #0]
    208e:	4b35      	ldr	r3, [pc, #212]	; (2164 <m2m_wifi_init_start+0xe8>)
    2090:	601a      	str	r2, [r3, #0]
	gu8scanInProgress = 0;
    2092:	2200      	movs	r2, #0
    2094:	4b34      	ldr	r3, [pc, #208]	; (2168 <m2m_wifi_init_start+0xec>)
    2096:	701a      	strb	r2, [r3, #0]
	ret = nm_drv_init_start(&u8WifiMode);
    2098:	200f      	movs	r0, #15
    209a:	4468      	add	r0, sp
    209c:	4b33      	ldr	r3, [pc, #204]	; (216c <m2m_wifi_init_start+0xf0>)
    209e:	4798      	blx	r3
    20a0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    20a2:	d002      	beq.n	20aa <m2m_wifi_init_start+0x2e>
}
    20a4:	0020      	movs	r0, r4
    20a6:	b00f      	add	sp, #60	; 0x3c
    20a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gu8WifiState = WIFI_STATE_START;
    20aa:	2202      	movs	r2, #2
    20ac:	4b30      	ldr	r3, [pc, #192]	; (2170 <m2m_wifi_init_start+0xf4>)
    20ae:	701a      	strb	r2, [r3, #0]
	ret = hif_init(NULL);
    20b0:	2000      	movs	r0, #0
    20b2:	4b30      	ldr	r3, [pc, #192]	; (2174 <m2m_wifi_init_start+0xf8>)
    20b4:	4798      	blx	r3
    20b6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    20b8:	d149      	bne.n	214e <m2m_wifi_init_start+0xd2>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    20ba:	492f      	ldr	r1, [pc, #188]	; (2178 <m2m_wifi_init_start+0xfc>)
    20bc:	2001      	movs	r0, #1
    20be:	4b2f      	ldr	r3, [pc, #188]	; (217c <m2m_wifi_init_start+0x100>)
    20c0:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    20c2:	ae04      	add	r6, sp, #16
    20c4:	0030      	movs	r0, r6
    20c6:	4b2e      	ldr	r3, [pc, #184]	; (2180 <m2m_wifi_init_start+0x104>)
    20c8:	4798      	blx	r3
    20ca:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    20cc:	482d      	ldr	r0, [pc, #180]	; (2184 <m2m_wifi_init_start+0x108>)
    20ce:	4d2e      	ldr	r5, [pc, #184]	; (2188 <m2m_wifi_init_start+0x10c>)
    20d0:	47a8      	blx	r5
    20d2:	79b3      	ldrb	r3, [r6, #6]
    20d4:	7972      	ldrb	r2, [r6, #5]
    20d6:	7931      	ldrb	r1, [r6, #4]
    20d8:	8c30      	ldrh	r0, [r6, #32]
    20da:	9000      	str	r0, [sp, #0]
    20dc:	482b      	ldr	r0, [pc, #172]	; (218c <m2m_wifi_init_start+0x110>)
    20de:	47a8      	blx	r5
    20e0:	200d      	movs	r0, #13
    20e2:	4f2b      	ldr	r7, [pc, #172]	; (2190 <m2m_wifi_init_start+0x114>)
    20e4:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    20e6:	4827      	ldr	r0, [pc, #156]	; (2184 <m2m_wifi_init_start+0x108>)
    20e8:	47a8      	blx	r5
    20ea:	2226      	movs	r2, #38	; 0x26
    20ec:	446a      	add	r2, sp
    20ee:	211a      	movs	r1, #26
    20f0:	4469      	add	r1, sp
    20f2:	4828      	ldr	r0, [pc, #160]	; (2194 <m2m_wifi_init_start+0x118>)
    20f4:	47a8      	blx	r5
    20f6:	200d      	movs	r0, #13
    20f8:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    20fa:	4822      	ldr	r0, [pc, #136]	; (2184 <m2m_wifi_init_start+0x108>)
    20fc:	47a8      	blx	r5
    20fe:	7a73      	ldrb	r3, [r6, #9]
    2100:	7a32      	ldrb	r2, [r6, #8]
    2102:	79f1      	ldrb	r1, [r6, #7]
    2104:	4824      	ldr	r0, [pc, #144]	; (2198 <m2m_wifi_init_start+0x11c>)
    2106:	47a8      	blx	r5
    2108:	200d      	movs	r0, #13
    210a:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u \n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    210c:	481d      	ldr	r0, [pc, #116]	; (2184 <m2m_wifi_init_start+0x108>)
    210e:	47a8      	blx	r5
    2110:	2301      	movs	r3, #1
    2112:	2206      	movs	r2, #6
    2114:	2113      	movs	r1, #19
    2116:	4821      	ldr	r0, [pc, #132]	; (219c <m2m_wifi_init_start+0x120>)
    2118:	47a8      	blx	r5
    211a:	200d      	movs	r0, #13
    211c:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    211e:	4819      	ldr	r0, [pc, #100]	; (2184 <m2m_wifi_init_start+0x108>)
    2120:	47a8      	blx	r5
    2122:	4a1f      	ldr	r2, [pc, #124]	; (21a0 <m2m_wifi_init_start+0x124>)
    2124:	491f      	ldr	r1, [pc, #124]	; (21a4 <m2m_wifi_init_start+0x128>)
    2126:	4820      	ldr	r0, [pc, #128]	; (21a8 <m2m_wifi_init_start+0x12c>)
    2128:	47a8      	blx	r5
    212a:	200d      	movs	r0, #13
    212c:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    212e:	0023      	movs	r3, r4
    2130:	330d      	adds	r3, #13
    2132:	d1b7      	bne.n	20a4 <m2m_wifi_init_start+0x28>
		M2M_ERR("Mismatch Firmware Version\n");
    2134:	22f0      	movs	r2, #240	; 0xf0
    2136:	0052      	lsls	r2, r2, #1
    2138:	491c      	ldr	r1, [pc, #112]	; (21ac <m2m_wifi_init_start+0x130>)
    213a:	481d      	ldr	r0, [pc, #116]	; (21b0 <m2m_wifi_init_start+0x134>)
    213c:	4b12      	ldr	r3, [pc, #72]	; (2188 <m2m_wifi_init_start+0x10c>)
    213e:	4798      	blx	r3
    2140:	481c      	ldr	r0, [pc, #112]	; (21b4 <m2m_wifi_init_start+0x138>)
    2142:	4b1d      	ldr	r3, [pc, #116]	; (21b8 <m2m_wifi_init_start+0x13c>)
    2144:	4798      	blx	r3
    2146:	200d      	movs	r0, #13
    2148:	4b11      	ldr	r3, [pc, #68]	; (2190 <m2m_wifi_init_start+0x114>)
    214a:	4798      	blx	r3
    214c:	e7aa      	b.n	20a4 <m2m_wifi_init_start+0x28>
    gu8WifiState = WIFI_STATE_DEINIT;
    214e:	2200      	movs	r2, #0
    2150:	4b07      	ldr	r3, [pc, #28]	; (2170 <m2m_wifi_init_start+0xf4>)
    2152:	701a      	strb	r2, [r3, #0]
	nm_drv_deinit(NULL);
    2154:	2000      	movs	r0, #0
    2156:	4b19      	ldr	r3, [pc, #100]	; (21bc <m2m_wifi_init_start+0x140>)
    2158:	4798      	blx	r3
    215a:	e7a3      	b.n	20a4 <m2m_wifi_init_start+0x28>
		ret = M2M_ERR_FAIL;
    215c:	240c      	movs	r4, #12
    215e:	4264      	negs	r4, r4
    2160:	e7a0      	b.n	20a4 <m2m_wifi_init_start+0x28>
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	200002a8 	.word	0x200002a8
    2168:	200002ae 	.word	0x200002ae
    216c:	00003031 	.word	0x00003031
    2170:	200002ad 	.word	0x200002ad
    2174:	000019f1 	.word	0x000019f1
    2178:	00001a29 	.word	0x00001a29
    217c:	0000196d 	.word	0x0000196d
    2180:	00002ee1 	.word	0x00002ee1
    2184:	00008cc0 	.word	0x00008cc0
    2188:	000075f9 	.word	0x000075f9
    218c:	00008e7c 	.word	0x00008e7c
    2190:	0000762d 	.word	0x0000762d
    2194:	00008ea4 	.word	0x00008ea4
    2198:	00008ec0 	.word	0x00008ec0
    219c:	00008ee4 	.word	0x00008ee4
    21a0:	00008efc 	.word	0x00008efc
    21a4:	00008f08 	.word	0x00008f08
    21a8:	00008f14 	.word	0x00008f14
    21ac:	00008d58 	.word	0x00008d58
    21b0:	00008920 	.word	0x00008920
    21b4:	00008f2c 	.word	0x00008f2c
    21b8:	00007715 	.word	0x00007715
    21bc:	000030b9 	.word	0x000030b9

000021c0 <m2m_wifi_init>:
{
    21c0:	b510      	push	{r4, lr}
    21c2:	0004      	movs	r4, r0
	ret = m2m_wifi_init_hold();
    21c4:	4b04      	ldr	r3, [pc, #16]	; (21d8 <m2m_wifi_init+0x18>)
    21c6:	4798      	blx	r3
	if (ret == M2M_SUCCESS)
    21c8:	2800      	cmp	r0, #0
    21ca:	d000      	beq.n	21ce <m2m_wifi_init+0xe>
}
    21cc:	bd10      	pop	{r4, pc}
		ret = m2m_wifi_init_start(pWifiInitParam);
    21ce:	0020      	movs	r0, r4
    21d0:	4b02      	ldr	r3, [pc, #8]	; (21dc <m2m_wifi_init+0x1c>)
    21d2:	4798      	blx	r3
    21d4:	e7fa      	b.n	21cc <m2m_wifi_init+0xc>
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	00002061 	.word	0x00002061
    21dc:	0000207d 	.word	0x0000207d

000021e0 <m2m_wifi_handle_events>:
{
    21e0:	b510      	push	{r4, lr}
	return hif_handle_isr();
    21e2:	4b01      	ldr	r3, [pc, #4]	; (21e8 <m2m_wifi_handle_events+0x8>)
    21e4:	4798      	blx	r3
}
    21e6:	bd10      	pop	{r4, pc}
    21e8:	00001449 	.word	0x00001449

000021ec <m2m_wifi_connect_open>:
/*************************************************************************************************/
sint8 m2m_wifi_connect_open(
	tenuCredStoreOption	enuCredStoreOption,
	tstrNetworkId		*pstrNetworkId
)
	{
    21ec:	b510      	push	{r4, lr}
    21ee:	b090      	sub	sp, #64	; 0x40
    21f0:	000b      	movs	r3, r1
	sint8				ret = M2M_ERR_INVALID_ARG;
	tstrM2mWifiConnHdr	strConnHdr;

	ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption, M2M_WIFI_SEC_OPEN, 0, pstrNetworkId, &strConnHdr);
    21f2:	aa04      	add	r2, sp, #16
    21f4:	9200      	str	r2, [sp, #0]
    21f6:	2200      	movs	r2, #0
    21f8:	2101      	movs	r1, #1
    21fa:	4c08      	ldr	r4, [pc, #32]	; (221c <m2m_wifi_connect_open+0x30>)
    21fc:	47a0      	blx	r4
	if (ret == M2M_SUCCESS)
    21fe:	2800      	cmp	r0, #0
    2200:	d001      	beq.n	2206 <m2m_wifi_connect_open+0x1a>
		ret = hif_send(	M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN,
						(uint8*)&strConnHdr, sizeof(strConnHdr),
						NULL, 0, 0);
		}
	return ret;
	}
    2202:	b010      	add	sp, #64	; 0x40
    2204:	bd10      	pop	{r4, pc}
		ret = hif_send(	M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN,
    2206:	2300      	movs	r3, #0
    2208:	9302      	str	r3, [sp, #8]
    220a:	9301      	str	r3, [sp, #4]
    220c:	9300      	str	r3, [sp, #0]
    220e:	3330      	adds	r3, #48	; 0x30
    2210:	aa04      	add	r2, sp, #16
    2212:	213b      	movs	r1, #59	; 0x3b
    2214:	3001      	adds	r0, #1
    2216:	4c02      	ldr	r4, [pc, #8]	; (2220 <m2m_wifi_connect_open+0x34>)
    2218:	47a0      	blx	r4
    221a:	e7f2      	b.n	2202 <m2m_wifi_connect_open+0x16>
    221c:	00001d29 	.word	0x00001d29
    2220:	000011f5 	.word	0x000011f5

00002224 <m2m_wifi_connect_wep>:
sint8 m2m_wifi_connect_wep(
	tenuCredStoreOption	enuCredStoreOption,
	tstrNetworkId		*pstrNetworkId,
	tstrAuthWep			*pstrAuthWep
)
{
    2224:	b570      	push	{r4, r5, r6, lr}
    2226:	b090      	sub	sp, #64	; 0x40
    2228:	1e14      	subs	r4, r2, #0
	sint8	ret = M2M_ERR_INVALID_ARG;

	if (
    222a:	d036      	beq.n	229a <m2m_wifi_connect_wep+0x76>
			(pstrAuthWep != NULL) && (pstrAuthWep->pu8WepKey != NULL)
    222c:	6813      	ldr	r3, [r2, #0]
    222e:	2b00      	cmp	r3, #0
    2230:	d036      	beq.n	22a0 <m2m_wifi_connect_wep+0x7c>
		&&	(pstrAuthWep->u8KeyIndx > 0) && (pstrAuthWep->u8KeyIndx <= WEP_KEY_MAX_INDEX)
    2232:	7952      	ldrb	r2, [r2, #5]
    2234:	3a01      	subs	r2, #1
    2236:	2a03      	cmp	r2, #3
    2238:	d835      	bhi.n	22a6 <m2m_wifi_connect_wep+0x82>
		&&	((pstrAuthWep->u8KeySz == WEP_104_KEY_STRING_SIZE) || (pstrAuthWep->u8KeySz == WEP_40_KEY_STRING_SIZE))
    223a:	7922      	ldrb	r2, [r4, #4]
    223c:	2310      	movs	r3, #16
    223e:	439a      	bics	r2, r3
    2240:	2a0a      	cmp	r2, #10
    2242:	d133      	bne.n	22ac <m2m_wifi_connect_wep+0x88>
	)
	{
		tstrM2mWifiConnHdr	strConnHdr;

		ret = m2m_wifi_connect_prepare_msg(	enuCredStoreOption,
    2244:	ab04      	add	r3, sp, #16
    2246:	9300      	str	r3, [sp, #0]
    2248:	000b      	movs	r3, r1
    224a:	3206      	adds	r2, #6
    224c:	2103      	movs	r1, #3
    224e:	4d19      	ldr	r5, [pc, #100]	; (22b4 <m2m_wifi_connect_wep+0x90>)
    2250:	47a8      	blx	r5
    2252:	1e05      	subs	r5, r0, #0
											M2M_WIFI_SEC_WEP,
											sizeof(tstrM2mWifiWep),
											pstrNetworkId,
											&strConnHdr);

		if (ret == M2M_SUCCESS)
    2254:	d002      	beq.n	225c <m2m_wifi_connect_wep+0x38>
				free(pstrWep);
			}
		}
	}
	return ret;
	}
    2256:	0028      	movs	r0, r5
    2258:	b010      	add	sp, #64	; 0x40
    225a:	bd70      	pop	{r4, r5, r6, pc}
			tstrM2mWifiWep	*pstrWep = (tstrM2mWifiWep*)malloc(sizeof(tstrM2mWifiWep));
    225c:	2010      	movs	r0, #16
    225e:	4b16      	ldr	r3, [pc, #88]	; (22b8 <m2m_wifi_connect_wep+0x94>)
    2260:	4798      	blx	r3
    2262:	1e06      	subs	r6, r0, #0
			if (pstrWep != NULL)
    2264:	d0f7      	beq.n	2256 <m2m_wifi_connect_wep+0x32>
				pstrWep->u8KeyIndex = pstrAuthWep->u8KeyIndx - 1;
    2266:	7963      	ldrb	r3, [r4, #5]
    2268:	3b01      	subs	r3, #1
    226a:	7003      	strb	r3, [r0, #0]
				pstrWep->u8KeyLen = pstrAuthWep->u8KeySz/2;
    226c:	7922      	ldrb	r2, [r4, #4]
    226e:	0852      	lsrs	r2, r2, #1
    2270:	7042      	strb	r2, [r0, #1]
				hexstr_2_bytes(pstrWep->au8WepKey, (pstrAuthWep->pu8WepKey), pstrWep->u8KeyLen);
    2272:	6821      	ldr	r1, [r4, #0]
    2274:	3002      	adds	r0, #2
    2276:	4b11      	ldr	r3, [pc, #68]	; (22bc <m2m_wifi_connect_wep+0x98>)
    2278:	4798      	blx	r3
				ret = hif_send(	M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
    227a:	2330      	movs	r3, #48	; 0x30
    227c:	9302      	str	r3, [sp, #8]
    227e:	3b20      	subs	r3, #32
    2280:	9301      	str	r3, [sp, #4]
    2282:	9600      	str	r6, [sp, #0]
    2284:	3320      	adds	r3, #32
    2286:	aa04      	add	r2, sp, #16
    2288:	21bb      	movs	r1, #187	; 0xbb
    228a:	2001      	movs	r0, #1
    228c:	4c0c      	ldr	r4, [pc, #48]	; (22c0 <m2m_wifi_connect_wep+0x9c>)
    228e:	47a0      	blx	r4
    2290:	0005      	movs	r5, r0
				free(pstrWep);
    2292:	0030      	movs	r0, r6
    2294:	4b0b      	ldr	r3, [pc, #44]	; (22c4 <m2m_wifi_connect_wep+0xa0>)
    2296:	4798      	blx	r3
    2298:	e7dd      	b.n	2256 <m2m_wifi_connect_wep+0x32>
	sint8	ret = M2M_ERR_INVALID_ARG;
    229a:	250f      	movs	r5, #15
    229c:	426d      	negs	r5, r5
    229e:	e7da      	b.n	2256 <m2m_wifi_connect_wep+0x32>
    22a0:	250f      	movs	r5, #15
    22a2:	426d      	negs	r5, r5
    22a4:	e7d7      	b.n	2256 <m2m_wifi_connect_wep+0x32>
    22a6:	250f      	movs	r5, #15
    22a8:	426d      	negs	r5, r5
    22aa:	e7d4      	b.n	2256 <m2m_wifi_connect_wep+0x32>
    22ac:	250f      	movs	r5, #15
    22ae:	426d      	negs	r5, r5
    22b0:	e7d1      	b.n	2256 <m2m_wifi_connect_wep+0x32>
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	00001d29 	.word	0x00001d29
    22b8:	0000744d 	.word	0x0000744d
    22bc:	00001fdd 	.word	0x00001fdd
    22c0:	000011f5 	.word	0x000011f5
    22c4:	00007461 	.word	0x00007461

000022c8 <m2m_wifi_connect_psk>:
sint8 m2m_wifi_connect_psk(
	tenuCredStoreOption	enuCredStoreOption,
	tstrNetworkId		*pstrNetworkId,
	tstrAuthPsk			*pstrAuthPsk
)
{
    22c8:	b570      	push	{r4, r5, r6, lr}
    22ca:	b090      	sub	sp, #64	; 0x40
    22cc:	1e15      	subs	r5, r2, #0
	sint8	ret = M2M_ERR_INVALID_ARG;

	if (pstrAuthPsk != NULL)
    22ce:	d04c      	beq.n	236a <m2m_wifi_connect_psk+0xa2>
	{
		tstrM2mWifiConnHdr	strConnHdr;

		ret = m2m_wifi_connect_prepare_msg(	enuCredStoreOption,
    22d0:	ab04      	add	r3, sp, #16
    22d2:	9300      	str	r3, [sp, #0]
    22d4:	000b      	movs	r3, r1
    22d6:	226c      	movs	r2, #108	; 0x6c
    22d8:	2102      	movs	r1, #2
    22da:	4c29      	ldr	r4, [pc, #164]	; (2380 <m2m_wifi_connect_psk+0xb8>)
    22dc:	47a0      	blx	r4
    22de:	1e04      	subs	r4, r0, #0
											M2M_WIFI_SEC_WPA_PSK,
											sizeof(tstrM2mWifiPsk),
											pstrNetworkId,
											&strConnHdr);

		if (ret == M2M_SUCCESS)
    22e0:	d002      	beq.n	22e8 <m2m_wifi_connect_psk+0x20>
				free(pstrPsk);
			}
		}
	}
	return ret;
}
    22e2:	0020      	movs	r0, r4
    22e4:	b010      	add	sp, #64	; 0x40
    22e6:	bd70      	pop	{r4, r5, r6, pc}
			tstrM2mWifiPsk	*pstrPsk = (tstrM2mWifiPsk*)malloc(sizeof(tstrM2mWifiPsk));
    22e8:	206c      	movs	r0, #108	; 0x6c
    22ea:	4b26      	ldr	r3, [pc, #152]	; (2384 <m2m_wifi_connect_psk+0xbc>)
    22ec:	4798      	blx	r3
    22ee:	1e06      	subs	r6, r0, #0
			if (pstrPsk != NULL)
    22f0:	d0f7      	beq.n	22e2 <m2m_wifi_connect_psk+0x1a>
				m2m_memset((uint8*)pstrPsk, 0, sizeof(tstrM2mWifiPsk));
    22f2:	226c      	movs	r2, #108	; 0x6c
    22f4:	2100      	movs	r1, #0
    22f6:	4b24      	ldr	r3, [pc, #144]	; (2388 <m2m_wifi_connect_psk+0xc0>)
    22f8:	4798      	blx	r3
				if (pstrAuthPsk->pu8Psk != NULL)
    22fa:	6829      	ldr	r1, [r5, #0]
    22fc:	2900      	cmp	r1, #0
    22fe:	d017      	beq.n	2330 <m2m_wifi_connect_psk+0x68>
					if (pstrAuthPsk->pu8Passphrase != NULL)
    2300:	686b      	ldr	r3, [r5, #4]
    2302:	240f      	movs	r4, #15
    2304:	4264      	negs	r4, r4
    2306:	2b00      	cmp	r3, #0
    2308:	d003      	beq.n	2312 <m2m_wifi_connect_psk+0x4a>
				free(pstrPsk);
    230a:	0030      	movs	r0, r6
    230c:	4b1f      	ldr	r3, [pc, #124]	; (238c <m2m_wifi_connect_psk+0xc4>)
    230e:	4798      	blx	r3
    2310:	e7e7      	b.n	22e2 <m2m_wifi_connect_psk+0x1a>
						pstrPsk->u8PassphraseLen = M2M_MAX_PSK_LEN-1;
    2312:	3340      	adds	r3, #64	; 0x40
    2314:	7033      	strb	r3, [r6, #0]
						if (M2M_SUCCESS != hexstr_2_bytes(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen/2))
    2316:	1c74      	adds	r4, r6, #1
    2318:	2220      	movs	r2, #32
    231a:	0020      	movs	r0, r4
    231c:	4b1c      	ldr	r3, [pc, #112]	; (2390 <m2m_wifi_connect_psk+0xc8>)
    231e:	4798      	blx	r3
    2320:	2800      	cmp	r0, #0
    2322:	d125      	bne.n	2370 <m2m_wifi_connect_psk+0xa8>
						m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen);
    2324:	7832      	ldrb	r2, [r6, #0]
    2326:	6829      	ldr	r1, [r5, #0]
    2328:	0020      	movs	r0, r4
    232a:	4b1a      	ldr	r3, [pc, #104]	; (2394 <m2m_wifi_connect_psk+0xcc>)
    232c:	4798      	blx	r3
    232e:	e00c      	b.n	234a <m2m_wifi_connect_psk+0x82>
				else if (pstrAuthPsk->pu8Passphrase != NULL)
    2330:	6869      	ldr	r1, [r5, #4]
    2332:	2900      	cmp	r1, #0
    2334:	d016      	beq.n	2364 <m2m_wifi_connect_psk+0x9c>
					if (pstrAuthPsk->u8PassphraseLen > M2M_MAX_PSK_LEN-1)
    2336:	7a2a      	ldrb	r2, [r5, #8]
    2338:	2a40      	cmp	r2, #64	; 0x40
    233a:	d902      	bls.n	2342 <m2m_wifi_connect_psk+0x7a>
    233c:	240f      	movs	r4, #15
    233e:	4264      	negs	r4, r4
    2340:	e7e3      	b.n	230a <m2m_wifi_connect_psk+0x42>
						pstrPsk->u8PassphraseLen = pstrAuthPsk->u8PassphraseLen;
    2342:	7032      	strb	r2, [r6, #0]
						m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Passphrase, pstrPsk->u8PassphraseLen);
    2344:	1c70      	adds	r0, r6, #1
    2346:	4b13      	ldr	r3, [pc, #76]	; (2394 <m2m_wifi_connect_psk+0xcc>)
    2348:	4798      	blx	r3
					ret = hif_send(	M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
    234a:	2330      	movs	r3, #48	; 0x30
    234c:	9302      	str	r3, [sp, #8]
    234e:	333c      	adds	r3, #60	; 0x3c
    2350:	9301      	str	r3, [sp, #4]
    2352:	9600      	str	r6, [sp, #0]
    2354:	3b3c      	subs	r3, #60	; 0x3c
    2356:	aa04      	add	r2, sp, #16
    2358:	21bb      	movs	r1, #187	; 0xbb
    235a:	2001      	movs	r0, #1
    235c:	4c0e      	ldr	r4, [pc, #56]	; (2398 <m2m_wifi_connect_psk+0xd0>)
    235e:	47a0      	blx	r4
    2360:	0004      	movs	r4, r0
    2362:	e7d2      	b.n	230a <m2m_wifi_connect_psk+0x42>
    2364:	240f      	movs	r4, #15
    2366:	4264      	negs	r4, r4
    2368:	e7cf      	b.n	230a <m2m_wifi_connect_psk+0x42>
	sint8	ret = M2M_ERR_INVALID_ARG;
    236a:	240f      	movs	r4, #15
    236c:	4264      	negs	r4, r4
	return ret;
    236e:	e7b8      	b.n	22e2 <m2m_wifi_connect_psk+0x1a>
						m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen);
    2370:	7832      	ldrb	r2, [r6, #0]
    2372:	6829      	ldr	r1, [r5, #0]
    2374:	0020      	movs	r0, r4
    2376:	4b07      	ldr	r3, [pc, #28]	; (2394 <m2m_wifi_connect_psk+0xcc>)
    2378:	4798      	blx	r3
							ret = M2M_ERR_INVALID_ARG;
    237a:	240f      	movs	r4, #15
    237c:	4264      	negs	r4, r4
    237e:	e7c4      	b.n	230a <m2m_wifi_connect_psk+0x42>
    2380:	00001d29 	.word	0x00001d29
    2384:	0000744d 	.word	0x0000744d
    2388:	000010e1 	.word	0x000010e1
    238c:	00007461 	.word	0x00007461
    2390:	00001fdd 	.word	0x00001fdd
    2394:	000010cd 	.word	0x000010cd
    2398:	000011f5 	.word	0x000011f5

0000239c <m2m_wifi_connect_1x_mschap2>:
sint8 m2m_wifi_connect_1x_mschap2(
	tenuCredStoreOption	enuCredStoreOption,
	tstrNetworkId		*pstrNetworkId,
	tstrAuth1xMschap2	*pstrAuth1xMschap2
)
{
    239c:	b5f0      	push	{r4, r5, r6, r7, lr}
    239e:	46ce      	mov	lr, r9
    23a0:	4647      	mov	r7, r8
    23a2:	b580      	push	{r7, lr}
    23a4:	b091      	sub	sp, #68	; 0x44
    23a6:	1e14      	subs	r4, r2, #0
	sint8 ret = M2M_ERR_INVALID_ARG;
	if (pstrAuth1xMschap2 != NULL)
    23a8:	d100      	bne.n	23ac <m2m_wifi_connect_1x_mschap2+0x10>
    23aa:	e070      	b.n	248e <m2m_wifi_connect_1x_mschap2+0xf2>
	{
		if (pstrAuth1xMschap2->pu8Domain == NULL)
    23ac:	6813      	ldr	r3, [r2, #0]
    23ae:	2b00      	cmp	r3, #0
    23b0:	d025      	beq.n	23fe <m2m_wifi_connect_1x_mschap2+0x62>
			pstrAuth1xMschap2->u16DomainLen = 0;
		if (
    23b2:	6863      	ldr	r3, [r4, #4]
    23b4:	2b00      	cmp	r3, #0
    23b6:	d100      	bne.n	23ba <m2m_wifi_connect_1x_mschap2+0x1e>
    23b8:	e06c      	b.n	2494 <m2m_wifi_connect_1x_mschap2+0xf8>
				(pstrAuth1xMschap2->pu8UserName != NULL)
			&&	(pstrAuth1xMschap2->pu8Password != NULL)
    23ba:	68a3      	ldr	r3, [r4, #8]
    23bc:	2b00      	cmp	r3, #0
    23be:	d100      	bne.n	23c2 <m2m_wifi_connect_1x_mschap2+0x26>
    23c0:	e06b      	b.n	249a <m2m_wifi_connect_1x_mschap2+0xfe>
			&&	((uint32)(pstrAuth1xMschap2->u16DomainLen) + pstrAuth1xMschap2->u16UserNameLen <= M2M_AUTH_1X_USER_LEN_MAX)
    23c2:	89a5      	ldrh	r5, [r4, #12]
    23c4:	89e3      	ldrh	r3, [r4, #14]
    23c6:	18ea      	adds	r2, r5, r3
    23c8:	2a84      	cmp	r2, #132	; 0x84
    23ca:	d900      	bls.n	23ce <m2m_wifi_connect_1x_mschap2+0x32>
    23cc:	e068      	b.n	24a0 <m2m_wifi_connect_1x_mschap2+0x104>
			&&	(pstrAuth1xMschap2->u16PasswordLen <= M2M_AUTH_1X_PASSWORD_LEN_MAX)
    23ce:	8a22      	ldrh	r2, [r4, #16]
    23d0:	2680      	movs	r6, #128	; 0x80
    23d2:	0076      	lsls	r6, r6, #1
    23d4:	42b2      	cmp	r2, r6
    23d6:	d866      	bhi.n	24a6 <m2m_wifi_connect_1x_mschap2+0x10a>
		)
		{
			tstrM2mWifiConnHdr	strConnHdr;
			uint16				u16AuthSize =	sizeof(tstrM2mWifi1xHdr) +
												pstrAuth1xMschap2->u16DomainLen +
    23d8:	18ed      	adds	r5, r5, r3
			uint16				u16AuthSize =	sizeof(tstrM2mWifi1xHdr) +
    23da:	350c      	adds	r5, #12
    23dc:	1955      	adds	r5, r2, r5
    23de:	b2ad      	uxth	r5, r5
												pstrAuth1xMschap2->u16UserNameLen +
												pstrAuth1xMschap2->u16PasswordLen;

			ret = m2m_wifi_connect_prepare_msg(	enuCredStoreOption,
    23e0:	ab04      	add	r3, sp, #16
    23e2:	9300      	str	r3, [sp, #0]
    23e4:	000b      	movs	r3, r1
    23e6:	002a      	movs	r2, r5
    23e8:	2104      	movs	r1, #4
    23ea:	4e30      	ldr	r6, [pc, #192]	; (24ac <m2m_wifi_connect_1x_mschap2+0x110>)
    23ec:	47b0      	blx	r6
    23ee:	1e06      	subs	r6, r0, #0
												M2M_WIFI_SEC_802_1X,
												u16AuthSize,
												pstrNetworkId,
												&strConnHdr);

			if (ret == M2M_SUCCESS)
    23f0:	d007      	beq.n	2402 <m2m_wifi_connect_1x_mschap2+0x66>
				}
			}
		}
	}
	return ret;
}
    23f2:	0030      	movs	r0, r6
    23f4:	b011      	add	sp, #68	; 0x44
    23f6:	bc0c      	pop	{r2, r3}
    23f8:	4690      	mov	r8, r2
    23fa:	4699      	mov	r9, r3
    23fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pstrAuth1xMschap2->u16DomainLen = 0;
    23fe:	8193      	strh	r3, [r2, #12]
    2400:	e7d7      	b.n	23b2 <m2m_wifi_connect_1x_mschap2+0x16>
				tstrM2mWifi1xHdr	*pstr1xHdr = (tstrM2mWifi1xHdr*)malloc(u16AuthSize);
    2402:	0028      	movs	r0, r5
    2404:	4b2a      	ldr	r3, [pc, #168]	; (24b0 <m2m_wifi_connect_1x_mschap2+0x114>)
    2406:	4798      	blx	r3
    2408:	1e07      	subs	r7, r0, #0
				if (pstr1xHdr != NULL)
    240a:	d0f2      	beq.n	23f2 <m2m_wifi_connect_1x_mschap2+0x56>
					uint8	*pu8AuthPtr = pstr1xHdr->au81xAuthDetails;
    240c:	230c      	movs	r3, #12
    240e:	4698      	mov	r8, r3
    2410:	4480      	add	r8, r0
					m2m_memset((uint8*)pstr1xHdr, 0, u16AuthSize);
    2412:	002a      	movs	r2, r5
    2414:	2100      	movs	r1, #0
    2416:	4b27      	ldr	r3, [pc, #156]	; (24b4 <m2m_wifi_connect_1x_mschap2+0x118>)
    2418:	4798      	blx	r3
					pstr1xHdr->u8Flags = M2M_802_1X_MSCHAP2_FLAG;
    241a:	2301      	movs	r3, #1
    241c:	703b      	strb	r3, [r7, #0]
					if (pstrAuth1xMschap2->bUnencryptedUserName == true)
    241e:	7ca3      	ldrb	r3, [r4, #18]
    2420:	2b00      	cmp	r3, #0
    2422:	d001      	beq.n	2428 <m2m_wifi_connect_1x_mschap2+0x8c>
						pstr1xHdr->u8Flags |= M2M_802_1X_UNENCRYPTED_USERNAME_FLAG;
    2424:	2381      	movs	r3, #129	; 0x81
    2426:	703b      	strb	r3, [r7, #0]
					if (pstrAuth1xMschap2->bPrependDomain == true)
    2428:	7ce3      	ldrb	r3, [r4, #19]
    242a:	2b00      	cmp	r3, #0
    242c:	d003      	beq.n	2436 <m2m_wifi_connect_1x_mschap2+0x9a>
						pstr1xHdr->u8Flags |= M2M_802_1X_PREPEND_DOMAIN_FLAG;
    242e:	783b      	ldrb	r3, [r7, #0]
    2430:	2240      	movs	r2, #64	; 0x40
    2432:	4313      	orrs	r3, r2
    2434:	703b      	strb	r3, [r7, #0]
					pstr1xHdr->u8DomainLength = 0;
    2436:	2300      	movs	r3, #0
    2438:	707b      	strb	r3, [r7, #1]
					if (pstrAuth1xMschap2->pu8Domain != NULL)
    243a:	6821      	ldr	r1, [r4, #0]
    243c:	2900      	cmp	r1, #0
    243e:	d024      	beq.n	248a <m2m_wifi_connect_1x_mschap2+0xee>
						pstr1xHdr->u8DomainLength = (uint8)(pstrAuth1xMschap2->u16DomainLen);
    2440:	7b22      	ldrb	r2, [r4, #12]
    2442:	707a      	strb	r2, [r7, #1]
						m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Domain, pstr1xHdr->u8DomainLength);
    2444:	4640      	mov	r0, r8
    2446:	4b1c      	ldr	r3, [pc, #112]	; (24b8 <m2m_wifi_connect_1x_mschap2+0x11c>)
    2448:	4798      	blx	r3
						pu8AuthPtr += pstr1xHdr->u8DomainLength;
    244a:	787e      	ldrb	r6, [r7, #1]
    244c:	4446      	add	r6, r8
					pstr1xHdr->u16UserNameLength = (pstrAuth1xMschap2->u16UserNameLen);
    244e:	89e2      	ldrh	r2, [r4, #14]
    2450:	807a      	strh	r2, [r7, #2]
					m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8UserName, pstr1xHdr->u16UserNameLength);
    2452:	6861      	ldr	r1, [r4, #4]
    2454:	0030      	movs	r0, r6
    2456:	4b18      	ldr	r3, [pc, #96]	; (24b8 <m2m_wifi_connect_1x_mschap2+0x11c>)
    2458:	4699      	mov	r9, r3
    245a:	4798      	blx	r3
					pu8AuthPtr += pstr1xHdr->u16UserNameLength;
    245c:	8878      	ldrh	r0, [r7, #2]
    245e:	1830      	adds	r0, r6, r0
					pstr1xHdr->u16PrivateKeyOffset = pu8AuthPtr - pstr1xHdr->au81xAuthDetails;
    2460:	4643      	mov	r3, r8
    2462:	1ac3      	subs	r3, r0, r3
    2464:	80bb      	strh	r3, [r7, #4]
					pstr1xHdr->u16PrivateKeyLength = pstrAuth1xMschap2->u16PasswordLen;
    2466:	8a22      	ldrh	r2, [r4, #16]
    2468:	80fa      	strh	r2, [r7, #6]
					m2m_memcpy(pu8AuthPtr, pstrAuth1xMschap2->pu8Password, pstr1xHdr->u16PrivateKeyLength);
    246a:	68a1      	ldr	r1, [r4, #8]
    246c:	47c8      	blx	r9
					ret = hif_send(	M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
    246e:	2330      	movs	r3, #48	; 0x30
    2470:	9302      	str	r3, [sp, #8]
    2472:	9501      	str	r5, [sp, #4]
    2474:	9700      	str	r7, [sp, #0]
    2476:	aa04      	add	r2, sp, #16
    2478:	21bb      	movs	r1, #187	; 0xbb
    247a:	2001      	movs	r0, #1
    247c:	4c0f      	ldr	r4, [pc, #60]	; (24bc <m2m_wifi_connect_1x_mschap2+0x120>)
    247e:	47a0      	blx	r4
    2480:	0006      	movs	r6, r0
					free(pstr1xHdr);
    2482:	0038      	movs	r0, r7
    2484:	4b0e      	ldr	r3, [pc, #56]	; (24c0 <m2m_wifi_connect_1x_mschap2+0x124>)
    2486:	4798      	blx	r3
    2488:	e7b3      	b.n	23f2 <m2m_wifi_connect_1x_mschap2+0x56>
					uint8	*pu8AuthPtr = pstr1xHdr->au81xAuthDetails;
    248a:	4646      	mov	r6, r8
    248c:	e7df      	b.n	244e <m2m_wifi_connect_1x_mschap2+0xb2>
	sint8 ret = M2M_ERR_INVALID_ARG;
    248e:	260f      	movs	r6, #15
    2490:	4276      	negs	r6, r6
    2492:	e7ae      	b.n	23f2 <m2m_wifi_connect_1x_mschap2+0x56>
    2494:	260f      	movs	r6, #15
    2496:	4276      	negs	r6, r6
    2498:	e7ab      	b.n	23f2 <m2m_wifi_connect_1x_mschap2+0x56>
    249a:	260f      	movs	r6, #15
    249c:	4276      	negs	r6, r6
    249e:	e7a8      	b.n	23f2 <m2m_wifi_connect_1x_mschap2+0x56>
    24a0:	260f      	movs	r6, #15
    24a2:	4276      	negs	r6, r6
    24a4:	e7a5      	b.n	23f2 <m2m_wifi_connect_1x_mschap2+0x56>
    24a6:	260f      	movs	r6, #15
    24a8:	4276      	negs	r6, r6
    24aa:	e7a2      	b.n	23f2 <m2m_wifi_connect_1x_mschap2+0x56>
    24ac:	00001d29 	.word	0x00001d29
    24b0:	0000744d 	.word	0x0000744d
    24b4:	000010e1 	.word	0x000010e1
    24b8:	000010cd 	.word	0x000010cd
    24bc:	000011f5 	.word	0x000011f5
    24c0:	00007461 	.word	0x00007461

000024c4 <m2m_wifi_connect_sc>:
{
    return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch, 0);
}

sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    24c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24c6:	b08b      	sub	sp, #44	; 0x2c
    24c8:	001e      	movs	r6, r3
    24ca:	ab10      	add	r3, sp, #64	; 0x40
    24cc:	881d      	ldrh	r5, [r3, #0]
    24ce:	ab11      	add	r3, sp, #68	; 0x44
    24d0:	781c      	ldrb	r4, [r3, #0]
    sint8               s8Ret              = M2M_ERR_INVALID_ARG;
    tstrNetworkId       strNetworkId       = {NULL, (uint8*)pcSsid, u8SsidLen, (tenuM2mScanCh)u16Ch};
    24d2:	ab07      	add	r3, sp, #28
    24d4:	2700      	movs	r7, #0
    24d6:	9707      	str	r7, [sp, #28]
    24d8:	9008      	str	r0, [sp, #32]
    24da:	7219      	strb	r1, [r3, #8]
    24dc:	725d      	strb	r5, [r3, #9]
    tenuCredStoreOption enuCredStoreOption = u8NoSaveCred ? WIFI_CRED_DONTSAVE : WIFI_CRED_SAVE_ENCRYPTED;
    24de:	4263      	negs	r3, r4
    24e0:	415c      	adcs	r4, r3
    24e2:	0064      	lsls	r4, r4, #1

    /* This API does not support SSIDs which contain '\0'. If there is a '\0' character within the
     * first u8SsidLen characters, then assume that the input u8SsidLen was incorrect - set length
     * to strlen(pcSsid) and continue. This is to avoid a change from the behaviour of previously
     * released drivers. */
    if (u8SsidLen < M2M_MAX_SSID_LEN)
    24e4:	2920      	cmp	r1, #32
    24e6:	d920      	bls.n	252a <m2m_wifi_connect_sc+0x66>
        while (u8SsidLen--)
            if (strNetworkId.pu8Ssid[u8SsidLen] == 0){
                strNetworkId.u8SsidLen = u8SsidLen;}
	}

	switch ((tenuM2mSecType)u8SecType)
    24e8:	2a02      	cmp	r2, #2
    24ea:	d03a      	beq.n	2562 <m2m_wifi_connect_sc+0x9e>
    24ec:	d931      	bls.n	2552 <m2m_wifi_connect_sc+0x8e>
    24ee:	2a03      	cmp	r2, #3
    24f0:	d04e      	beq.n	2590 <m2m_wifi_connect_sc+0xcc>
    24f2:	2a04      	cmp	r2, #4
    24f4:	d15b      	bne.n	25ae <m2m_wifi_connect_sc+0xea>

            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
		}
		break;
		case M2M_WIFI_SEC_802_1X:
		if (pvAuthInfo != NULL)
    24f6:	2e00      	cmp	r6, #0
    24f8:	d062      	beq.n	25c0 <m2m_wifi_connect_sc+0xfc>
		{
			tstr1xAuthCredentials	*pstr1xParams = (tstr1xAuthCredentials*)pvAuthInfo;
			tstrAuth1xMschap2		strAuth1xMschap2 = {NULL,
    24fa:	2214      	movs	r2, #20
    24fc:	2100      	movs	r1, #0
    24fe:	a802      	add	r0, sp, #8
    2500:	4b31      	ldr	r3, [pc, #196]	; (25c8 <m2m_wifi_connect_sc+0x104>)
    2502:	4798      	blx	r3
    2504:	9603      	str	r6, [sp, #12]
				pstr1xParams->au8UserName,
				pstr1xParams->au8Passwd,
    2506:	0037      	movs	r7, r6
    2508:	3715      	adds	r7, #21
			tstrAuth1xMschap2		strAuth1xMschap2 = {NULL,
    250a:	9704      	str	r7, [sp, #16]
				0,
                                                        m2m_strlen(pstr1xParams->au8UserName),
    250c:	0030      	movs	r0, r6
    250e:	4d2f      	ldr	r5, [pc, #188]	; (25cc <m2m_wifi_connect_sc+0x108>)
    2510:	47a8      	blx	r5
			tstrAuth1xMschap2		strAuth1xMschap2 = {NULL,
    2512:	ab02      	add	r3, sp, #8
    2514:	81d8      	strh	r0, [r3, #14]
                                                        m2m_strlen(pstr1xParams->au8Passwd),
    2516:	0038      	movs	r0, r7
    2518:	47a8      	blx	r5
			tstrAuth1xMschap2		strAuth1xMschap2 = {NULL,
    251a:	ab02      	add	r3, sp, #8
    251c:	8218      	strh	r0, [r3, #16]
                                                        false};

            s8Ret = m2m_wifi_connect_1x_mschap2(enuCredStoreOption, &strNetworkId, &strAuth1xMschap2);
    251e:	001a      	movs	r2, r3
    2520:	a907      	add	r1, sp, #28
    2522:	0020      	movs	r0, r4
    2524:	4b2a      	ldr	r3, [pc, #168]	; (25d0 <m2m_wifi_connect_sc+0x10c>)
    2526:	4798      	blx	r3
    2528:	e019      	b.n	255e <m2m_wifi_connect_sc+0x9a>
    252a:	9101      	str	r1, [sp, #4]
    252c:	2500      	movs	r5, #0
            if (strNetworkId.pu8Ssid[u8SsidLen] == 0){
    252e:	2701      	movs	r7, #1
        while (u8SsidLen--)
    2530:	3901      	subs	r1, #1
    2532:	b2c9      	uxtb	r1, r1
    2534:	29ff      	cmp	r1, #255	; 0xff
    2536:	d005      	beq.n	2544 <m2m_wifi_connect_sc+0x80>
            if (strNetworkId.pu8Ssid[u8SsidLen] == 0){
    2538:	5c43      	ldrb	r3, [r0, r1]
    253a:	2b00      	cmp	r3, #0
    253c:	d1f8      	bne.n	2530 <m2m_wifi_connect_sc+0x6c>
                strNetworkId.u8SsidLen = u8SsidLen;}
    253e:	9101      	str	r1, [sp, #4]
            if (strNetworkId.pu8Ssid[u8SsidLen] == 0){
    2540:	003d      	movs	r5, r7
    2542:	e7f5      	b.n	2530 <m2m_wifi_connect_sc+0x6c>
    2544:	2d00      	cmp	r5, #0
    2546:	d0cf      	beq.n	24e8 <m2m_wifi_connect_sc+0x24>
    2548:	ab07      	add	r3, sp, #28
    254a:	4669      	mov	r1, sp
    254c:	7909      	ldrb	r1, [r1, #4]
    254e:	7219      	strb	r1, [r3, #8]
    2550:	e7ca      	b.n	24e8 <m2m_wifi_connect_sc+0x24>
	switch ((tenuM2mSecType)u8SecType)
    2552:	2a01      	cmp	r2, #1
    2554:	d12b      	bne.n	25ae <m2m_wifi_connect_sc+0xea>
        s8Ret = m2m_wifi_connect_open(enuCredStoreOption, &strNetworkId);
    2556:	a907      	add	r1, sp, #28
    2558:	0020      	movs	r0, r4
    255a:	4b1e      	ldr	r3, [pc, #120]	; (25d4 <m2m_wifi_connect_sc+0x110>)
    255c:	4798      	blx	r3
		break;
		default:
		break;
	}
    return s8Ret;
}
    255e:	b00b      	add	sp, #44	; 0x2c
    2560:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (pvAuthInfo != NULL)
    2562:	2e00      	cmp	r6, #0
    2564:	d026      	beq.n	25b4 <m2m_wifi_connect_sc+0xf0>
			tstrAuthPsk	strAuthPsk = {NULL, NULL, 0};
    2566:	2300      	movs	r3, #0
    2568:	9302      	str	r3, [sp, #8]
    256a:	9303      	str	r3, [sp, #12]
    256c:	aa02      	add	r2, sp, #8
    256e:	7213      	strb	r3, [r2, #8]
            uint16      len        = m2m_strlen((uint8*)pvAuthInfo);
    2570:	0030      	movs	r0, r6
    2572:	4b16      	ldr	r3, [pc, #88]	; (25cc <m2m_wifi_connect_sc+0x108>)
    2574:	4798      	blx	r3
			if (len == M2M_MAX_PSK_LEN-1)
    2576:	2840      	cmp	r0, #64	; 0x40
    2578:	d008      	beq.n	258c <m2m_wifi_connect_sc+0xc8>
				strAuthPsk.pu8Passphrase = (uint8*)pvAuthInfo;
    257a:	9603      	str	r6, [sp, #12]
				strAuthPsk.u8PassphraseLen = len;
    257c:	ab02      	add	r3, sp, #8
    257e:	7218      	strb	r0, [r3, #8]
            s8Ret = m2m_wifi_connect_psk(enuCredStoreOption, &strNetworkId, &strAuthPsk);
    2580:	aa02      	add	r2, sp, #8
    2582:	a907      	add	r1, sp, #28
    2584:	0020      	movs	r0, r4
    2586:	4b14      	ldr	r3, [pc, #80]	; (25d8 <m2m_wifi_connect_sc+0x114>)
    2588:	4798      	blx	r3
    258a:	e7e8      	b.n	255e <m2m_wifi_connect_sc+0x9a>
				strAuthPsk.pu8Psk = (uint8*)pvAuthInfo;
    258c:	9602      	str	r6, [sp, #8]
    258e:	e7f7      	b.n	2580 <m2m_wifi_connect_sc+0xbc>
		if (pvAuthInfo != NULL)
    2590:	2e00      	cmp	r6, #0
    2592:	d012      	beq.n	25ba <m2m_wifi_connect_sc+0xf6>
			tstrAuthWep				strAuthWep = {pstrWepParams->au8WepKey, pstrWepParams->u8KeySz-1, pstrWepParams->u8KeyIndx};
    2594:	1cb3      	adds	r3, r6, #2
    2596:	9302      	str	r3, [sp, #8]
    2598:	7873      	ldrb	r3, [r6, #1]
    259a:	3b01      	subs	r3, #1
    259c:	aa02      	add	r2, sp, #8
    259e:	7113      	strb	r3, [r2, #4]
    25a0:	7833      	ldrb	r3, [r6, #0]
    25a2:	7153      	strb	r3, [r2, #5]
            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
    25a4:	a907      	add	r1, sp, #28
    25a6:	0020      	movs	r0, r4
    25a8:	4b0c      	ldr	r3, [pc, #48]	; (25dc <m2m_wifi_connect_sc+0x118>)
    25aa:	4798      	blx	r3
    25ac:	e7d7      	b.n	255e <m2m_wifi_connect_sc+0x9a>
    sint8               s8Ret              = M2M_ERR_INVALID_ARG;
    25ae:	200f      	movs	r0, #15
    25b0:	4240      	negs	r0, r0
    25b2:	e7d4      	b.n	255e <m2m_wifi_connect_sc+0x9a>
    25b4:	200f      	movs	r0, #15
    25b6:	4240      	negs	r0, r0
    25b8:	e7d1      	b.n	255e <m2m_wifi_connect_sc+0x9a>
    25ba:	200f      	movs	r0, #15
    25bc:	4240      	negs	r0, r0
    25be:	e7ce      	b.n	255e <m2m_wifi_connect_sc+0x9a>
    25c0:	200f      	movs	r0, #15
    25c2:	4240      	negs	r0, r0
    25c4:	e7cb      	b.n	255e <m2m_wifi_connect_sc+0x9a>
    25c6:	46c0      	nop			; (mov r8, r8)
    25c8:	00007499 	.word	0x00007499
    25cc:	000010f1 	.word	0x000010f1
    25d0:	0000239d 	.word	0x0000239d
    25d4:	000021ed 	.word	0x000021ed
    25d8:	000022c9 	.word	0x000022c9
    25dc:	00002225 	.word	0x00002225

000025e0 <m2m_wifi_connect>:
{
    25e0:	b530      	push	{r4, r5, lr}
    25e2:	b083      	sub	sp, #12
    25e4:	ac06      	add	r4, sp, #24
    25e6:	8824      	ldrh	r4, [r4, #0]
    return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch, 0);
    25e8:	2500      	movs	r5, #0
    25ea:	9501      	str	r5, [sp, #4]
    25ec:	9400      	str	r4, [sp, #0]
    25ee:	4c02      	ldr	r4, [pc, #8]	; (25f8 <m2m_wifi_connect+0x18>)
    25f0:	47a0      	blx	r4
}
    25f2:	b003      	add	sp, #12
    25f4:	bd30      	pop	{r4, r5, pc}
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	000024c5 	.word	0x000024c5

000025fc <m2m_wifi_disconnect>:

sint8 m2m_wifi_disconnect(void)
{
    25fc:	b510      	push	{r4, lr}
    25fe:	b084      	sub	sp, #16
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
    2600:	2300      	movs	r3, #0
    2602:	9302      	str	r3, [sp, #8]
    2604:	9301      	str	r3, [sp, #4]
    2606:	9300      	str	r3, [sp, #0]
    2608:	2200      	movs	r2, #0
    260a:	212b      	movs	r1, #43	; 0x2b
    260c:	2001      	movs	r0, #1
    260e:	4c02      	ldr	r4, [pc, #8]	; (2618 <m2m_wifi_disconnect+0x1c>)
    2610:	47a0      	blx	r4
}
    2612:	b004      	add	sp, #16
    2614:	bd10      	pop	{r4, pc}
    2616:	46c0      	nop			; (mov r8, r8)
    2618:	000011f5 	.word	0x000011f5

0000261c <m2m_wifi_set_mac_address>:

sint8 m2m_wifi_set_mac_address(uint8 au8MacAddress[6])
{
    261c:	b510      	push	{r4, lr}
    261e:	b086      	sub	sp, #24
    2620:	0001      	movs	r1, r0
	tstrM2mSetMacAddress strTmp;
	m2m_memcpy((uint8*) strTmp.au8Mac, (uint8*) au8MacAddress, 6);
    2622:	2206      	movs	r2, #6
    2624:	a804      	add	r0, sp, #16
    2626:	4b07      	ldr	r3, [pc, #28]	; (2644 <m2m_wifi_set_mac_address+0x28>)
    2628:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
    262a:	2300      	movs	r3, #0
    262c:	9302      	str	r3, [sp, #8]
    262e:	9301      	str	r3, [sp, #4]
    2630:	9300      	str	r3, [sp, #0]
    2632:	3308      	adds	r3, #8
    2634:	aa04      	add	r2, sp, #16
    2636:	2102      	movs	r1, #2
    2638:	2001      	movs	r0, #1
    263a:	4c03      	ldr	r4, [pc, #12]	; (2648 <m2m_wifi_set_mac_address+0x2c>)
    263c:	47a0      	blx	r4
		(uint8*) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0,0);
}
    263e:	b006      	add	sp, #24
    2640:	bd10      	pop	{r4, pc}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	000010cd 	.word	0x000010cd
    2648:	000011f5 	.word	0x000011f5

0000264c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    264c:	2000      	movs	r0, #0
    264e:	4770      	bx	lr

00002650 <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
    2650:	b570      	push	{r4, r5, r6, lr}
    2652:	0004      	movs	r4, r0
    2654:	000d      	movs	r5, r1
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    2656:	4b07      	ldr	r3, [pc, #28]	; (2674 <m2m_wifi_get_otp_mac_address+0x24>)
    2658:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
    265a:	2800      	cmp	r0, #0
    265c:	d000      	beq.n	2660 <m2m_wifi_get_otp_mac_address+0x10>
		{
			ret = hif_chip_sleep();
		}
	}
	return ret;
}
    265e:	bd70      	pop	{r4, r5, r6, pc}
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
    2660:	0029      	movs	r1, r5
    2662:	0020      	movs	r0, r4
    2664:	4b04      	ldr	r3, [pc, #16]	; (2678 <m2m_wifi_get_otp_mac_address+0x28>)
    2666:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    2668:	2800      	cmp	r0, #0
    266a:	d1f8      	bne.n	265e <m2m_wifi_get_otp_mac_address+0xe>
			ret = hif_chip_sleep();
    266c:	4b03      	ldr	r3, [pc, #12]	; (267c <m2m_wifi_get_otp_mac_address+0x2c>)
    266e:	4798      	blx	r3
    2670:	e7f5      	b.n	265e <m2m_wifi_get_otp_mac_address+0xe>
    2672:	46c0      	nop			; (mov r8, r8)
    2674:	00001165 	.word	0x00001165
    2678:	00002cc5 	.word	0x00002cc5
    267c:	000011bd 	.word	0x000011bd

00002680 <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
    2680:	b510      	push	{r4, lr}
    2682:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    2684:	4b06      	ldr	r3, [pc, #24]	; (26a0 <m2m_wifi_get_mac_address+0x20>)
    2686:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
    2688:	2800      	cmp	r0, #0
    268a:	d000      	beq.n	268e <m2m_wifi_get_mac_address+0xe>
			ret = hif_chip_sleep();
		}
	}

	return ret;
}
    268c:	bd10      	pop	{r4, pc}
		ret = nmi_get_mac_address(pu8MacAddr);
    268e:	0020      	movs	r0, r4
    2690:	4b04      	ldr	r3, [pc, #16]	; (26a4 <m2m_wifi_get_mac_address+0x24>)
    2692:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    2694:	2800      	cmp	r0, #0
    2696:	d1f9      	bne.n	268c <m2m_wifi_get_mac_address+0xc>
			ret = hif_chip_sleep();
    2698:	4b03      	ldr	r3, [pc, #12]	; (26a8 <m2m_wifi_get_mac_address+0x28>)
    269a:	4798      	blx	r3
    269c:	e7f6      	b.n	268c <m2m_wifi_get_mac_address+0xc>
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	00001165 	.word	0x00001165
    26a4:	00002d59 	.word	0x00002d59
    26a8:	000011bd 	.word	0x000011bd

000026ac <m2m_wifi_set_device_name>:
			Length of the device name.
@return		The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@warning	The Function called once after initialization. 
*/
sint8 m2m_wifi_set_device_name(uint8 *pu8DeviceName, uint8 u8DeviceNameLength)
{
    26ac:	b510      	push	{r4, lr}
    26ae:	b090      	sub	sp, #64	; 0x40
    26b0:	1c0a      	adds	r2, r1, #0
    26b2:	2930      	cmp	r1, #48	; 0x30
    26b4:	d900      	bls.n	26b8 <m2m_wifi_set_device_name+0xc>
    26b6:	2230      	movs	r2, #48	; 0x30
	if(u8DeviceNameLength >= M2M_DEVICE_NAME_MAX)
	{
		u8DeviceNameLength = M2M_DEVICE_NAME_MAX;
	}
	//pu8DeviceName[u8DeviceNameLength] = '\0';
	u8DeviceNameLength ++;
    26b8:	3201      	adds	r2, #1
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
    26ba:	b2d2      	uxtb	r2, r2
    26bc:	0001      	movs	r1, r0
    26be:	a804      	add	r0, sp, #16
    26c0:	4b06      	ldr	r3, [pc, #24]	; (26dc <m2m_wifi_set_device_name+0x30>)
    26c2:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
    26c4:	2300      	movs	r3, #0
    26c6:	9302      	str	r3, [sp, #8]
    26c8:	9301      	str	r3, [sp, #4]
    26ca:	9300      	str	r3, [sp, #0]
    26cc:	3330      	adds	r3, #48	; 0x30
    26ce:	aa04      	add	r2, sp, #16
    26d0:	2107      	movs	r1, #7
    26d2:	2001      	movs	r0, #1
    26d4:	4c02      	ldr	r4, [pc, #8]	; (26e0 <m2m_wifi_set_device_name+0x34>)
    26d6:	47a0      	blx	r4
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
    26d8:	b010      	add	sp, #64	; 0x40
    26da:	bd10      	pop	{r4, pc}
    26dc:	000010cd 	.word	0x000010cd
    26e0:	000011f5 	.word	0x000011f5

000026e4 <m2m_wifi_start_provision_mode_ext>:

	return m2m_wifi_start_provision_mode_ext(&strM2MAPModeConfig, pcHttpServerDomainName, bEnableHttpRedirect);
}

sint8 m2m_wifi_start_provision_mode_ext(tstrM2MAPModeConfig *pstrAPModeConfig, char *pcHttpServerDomainName, uint8 bEnableHttpRedirect)
{
    26e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26e6:	b0bb      	sub	sp, #236	; 0xec
    26e8:	0004      	movs	r4, r0
    26ea:	000d      	movs	r5, r1
    26ec:	0016      	movs	r6, r2
	sint8	s8Ret = M2M_ERR_FAIL;

	if(pstrAPModeConfig != NULL)
    26ee:	2800      	cmp	r0, #0
    26f0:	d03c      	beq.n	276c <m2m_wifi_start_provision_mode_ext+0x88>
	{
		tstrM2MProvisionModeConfig	strProvConfig;
		if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrAPModeConfig))
    26f2:	4b20      	ldr	r3, [pc, #128]	; (2774 <m2m_wifi_start_provision_mode_ext+0x90>)
    26f4:	4798      	blx	r3
    26f6:	2800      	cmp	r0, #0
    26f8:	d003      	beq.n	2702 <m2m_wifi_start_provision_mode_ext+0x1e>
	sint8	s8Ret = M2M_ERR_FAIL;
    26fa:	200c      	movs	r0, #12
    26fc:	4240      	negs	r0, r0
			/*goto ERR1;*/
		}
	}
ERR1:
	return s8Ret;
}
    26fe:	b03b      	add	sp, #236	; 0xec
    2700:	bdf0      	pop	{r4, r5, r6, r7, pc}
			m2m_memcpy((uint8*)&strProvConfig.strApConfig, (uint8*)&pstrAPModeConfig->strApConfig, sizeof(tstrM2MAPConfig));
    2702:	2288      	movs	r2, #136	; 0x88
    2704:	0021      	movs	r1, r4
    2706:	a804      	add	r0, sp, #16
    2708:	4f1b      	ldr	r7, [pc, #108]	; (2778 <m2m_wifi_start_provision_mode_ext+0x94>)
    270a:	47b8      	blx	r7
			m2m_memcpy((uint8*)&strProvConfig.strApConfigExt, (uint8*)&pstrAPModeConfig->strApConfigExt, sizeof(tstrM2MAPConfigExt));
    270c:	0021      	movs	r1, r4
    270e:	3188      	adds	r1, #136	; 0x88
    2710:	220c      	movs	r2, #12
    2712:	20d9      	movs	r0, #217	; 0xd9
    2714:	4468      	add	r0, sp
    2716:	47b8      	blx	r7
			if((m2m_strlen((uint8 *)pcHttpServerDomainName) <= 0) || (NULL == pcHttpServerDomainName))
    2718:	0028      	movs	r0, r5
    271a:	4b18      	ldr	r3, [pc, #96]	; (277c <m2m_wifi_start_provision_mode_ext+0x98>)
    271c:	4798      	blx	r3
    271e:	2800      	cmp	r0, #0
    2720:	d016      	beq.n	2750 <m2m_wifi_start_provision_mode_ext+0x6c>
    2722:	2d00      	cmp	r5, #0
    2724:	d014      	beq.n	2750 <m2m_wifi_start_provision_mode_ext+0x6c>
			m2m_memcpy((uint8*)strProvConfig.acHttpServerDomainName, (uint8*)pcHttpServerDomainName, 64);
    2726:	ac04      	add	r4, sp, #16
    2728:	2240      	movs	r2, #64	; 0x40
    272a:	0029      	movs	r1, r5
    272c:	a826      	add	r0, sp, #152	; 0x98
    272e:	4b12      	ldr	r3, [pc, #72]	; (2778 <m2m_wifi_start_provision_mode_ext+0x94>)
    2730:	4798      	blx	r3
			strProvConfig.u8EnableRedirect = bEnableHttpRedirect;
    2732:	23c8      	movs	r3, #200	; 0xc8
    2734:	54e6      	strb	r6, [r4, r3]
			gu8scanInProgress = 0;
    2736:	2300      	movs	r3, #0
    2738:	4a11      	ldr	r2, [pc, #68]	; (2780 <m2m_wifi_start_provision_mode_ext+0x9c>)
    273a:	7013      	strb	r3, [r2, #0]
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_START_PROVISION_MODE | M2M_REQ_DATA_PKT, 
    273c:	9302      	str	r3, [sp, #8]
    273e:	9301      	str	r3, [sp, #4]
    2740:	9300      	str	r3, [sp, #0]
    2742:	33d8      	adds	r3, #216	; 0xd8
    2744:	0022      	movs	r2, r4
    2746:	2188      	movs	r1, #136	; 0x88
    2748:	2001      	movs	r0, #1
    274a:	4c0e      	ldr	r4, [pc, #56]	; (2784 <m2m_wifi_start_provision_mode_ext+0xa0>)
    274c:	47a0      	blx	r4
    274e:	e7d6      	b.n	26fe <m2m_wifi_start_provision_mode_ext+0x1a>
				M2M_ERR("INVALID DOMAIN NAME\n");
    2750:	4a0d      	ldr	r2, [pc, #52]	; (2788 <m2m_wifi_start_provision_mode_ext+0xa4>)
    2752:	490e      	ldr	r1, [pc, #56]	; (278c <m2m_wifi_start_provision_mode_ext+0xa8>)
    2754:	480e      	ldr	r0, [pc, #56]	; (2790 <m2m_wifi_start_provision_mode_ext+0xac>)
    2756:	4b0f      	ldr	r3, [pc, #60]	; (2794 <m2m_wifi_start_provision_mode_ext+0xb0>)
    2758:	4798      	blx	r3
    275a:	480f      	ldr	r0, [pc, #60]	; (2798 <m2m_wifi_start_provision_mode_ext+0xb4>)
    275c:	4b0f      	ldr	r3, [pc, #60]	; (279c <m2m_wifi_start_provision_mode_ext+0xb8>)
    275e:	4798      	blx	r3
    2760:	200d      	movs	r0, #13
    2762:	4b0f      	ldr	r3, [pc, #60]	; (27a0 <m2m_wifi_start_provision_mode_ext+0xbc>)
    2764:	4798      	blx	r3
	sint8	s8Ret = M2M_ERR_FAIL;
    2766:	200c      	movs	r0, #12
    2768:	4240      	negs	r0, r0
    276a:	e7c8      	b.n	26fe <m2m_wifi_start_provision_mode_ext+0x1a>
    276c:	200c      	movs	r0, #12
    276e:	4240      	negs	r0, r0
    2770:	e7c5      	b.n	26fe <m2m_wifi_start_provision_mode_ext+0x1a>
    2772:	46c0      	nop			; (mov r8, r8)
    2774:	00001dfd 	.word	0x00001dfd
    2778:	000010cd 	.word	0x000010cd
    277c:	000010f1 	.word	0x000010f1
    2780:	200002ae 	.word	0x200002ae
    2784:	000011f5 	.word	0x000011f5
    2788:	0000063e 	.word	0x0000063e
    278c:	00008d6c 	.word	0x00008d6c
    2790:	00008920 	.word	0x00008920
    2794:	000075f9 	.word	0x000075f9
    2798:	00008f48 	.word	0x00008f48
    279c:	00007715 	.word	0x00007715
    27a0:	0000762d 	.word	0x0000762d

000027a4 <m2m_wifi_start_provision_mode>:
{
    27a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27a6:	b0a9      	sub	sp, #164	; 0xa4
    27a8:	0005      	movs	r5, r0
    27aa:	9101      	str	r1, [sp, #4]
    27ac:	0017      	movs	r7, r2
	m2m_memcpy((uint8 *)&strM2MAPModeConfig.strApConfig, (uint8 *)pstrM2MAPConfig, sizeof(tstrM2MAPConfig));
    27ae:	ac03      	add	r4, sp, #12
    27b0:	2288      	movs	r2, #136	; 0x88
    27b2:	0001      	movs	r1, r0
    27b4:	0020      	movs	r0, r4
    27b6:	4e0a      	ldr	r6, [pc, #40]	; (27e0 <m2m_wifi_start_provision_mode+0x3c>)
    27b8:	47b0      	blx	r6
	m2m_memcpy(strM2MAPModeConfig.strApConfigExt.au8DefRouterIP, pstrM2MAPConfig->au8DHCPServerIP, 4);
    27ba:	3541      	adds	r5, #65	; 0x41
    27bc:	2204      	movs	r2, #4
    27be:	0029      	movs	r1, r5
    27c0:	a825      	add	r0, sp, #148	; 0x94
    27c2:	47b0      	blx	r6
	m2m_memcpy(strM2MAPModeConfig.strApConfigExt.au8DNSServerIP, pstrM2MAPConfig->au8DHCPServerIP, 4);
    27c4:	2204      	movs	r2, #4
    27c6:	0029      	movs	r1, r5
    27c8:	a826      	add	r0, sp, #152	; 0x98
    27ca:	47b0      	blx	r6
	strM2MAPModeConfig.strApConfigExt.au8SubnetMask[0] = 0;
    27cc:	2200      	movs	r2, #0
    27ce:	2390      	movs	r3, #144	; 0x90
    27d0:	54e2      	strb	r2, [r4, r3]
	return m2m_wifi_start_provision_mode_ext(&strM2MAPModeConfig, pcHttpServerDomainName, bEnableHttpRedirect);
    27d2:	003a      	movs	r2, r7
    27d4:	9901      	ldr	r1, [sp, #4]
    27d6:	0020      	movs	r0, r4
    27d8:	4b02      	ldr	r3, [pc, #8]	; (27e4 <m2m_wifi_start_provision_mode+0x40>)
    27da:	4798      	blx	r3
}
    27dc:	b029      	add	sp, #164	; 0xa4
    27de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27e0:	000010cd 	.word	0x000010cd
    27e4:	000026e5 	.word	0x000026e5

000027e8 <chip_apply_conf>:

#define TIMEOUT						(0x2000ul)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    27e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ea:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    27ec:	2580      	movs	r5, #128	; 0x80
    27ee:	006d      	lsls	r5, r5, #1
    27f0:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    27f2:	24a5      	movs	r4, #165	; 0xa5
    27f4:	0164      	lsls	r4, r4, #5
    27f6:	4f08      	ldr	r7, [pc, #32]	; (2818 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    27f8:	4e08      	ldr	r6, [pc, #32]	; (281c <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    27fa:	0029      	movs	r1, r5
    27fc:	0020      	movs	r0, r4
    27fe:	47b8      	blx	r7
			uint32 reg = 0;
    2800:	2300      	movs	r3, #0
    2802:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    2804:	a901      	add	r1, sp, #4
    2806:	0020      	movs	r0, r4
    2808:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    280a:	2800      	cmp	r0, #0
    280c:	d1f5      	bne.n	27fa <chip_apply_conf+0x12>
				if(reg == val32)
    280e:	9b01      	ldr	r3, [sp, #4]
    2810:	429d      	cmp	r5, r3
    2812:	d1f2      	bne.n	27fa <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    2814:	b003      	add	sp, #12
    2816:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2818:	00002e05 	.word	0x00002e05
    281c:	00002df9 	.word	0x00002df9

00002820 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    2820:	b500      	push	{lr}
    2822:	b083      	sub	sp, #12
	uint32 reg = 0;
    2824:	2300      	movs	r3, #0
    2826:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    2828:	a901      	add	r1, sp, #4
    282a:	4811      	ldr	r0, [pc, #68]	; (2870 <enable_interrupts+0x50>)
    282c:	4b11      	ldr	r3, [pc, #68]	; (2874 <enable_interrupts+0x54>)
    282e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2830:	2800      	cmp	r0, #0
    2832:	d001      	beq.n	2838 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    2834:	b003      	add	sp, #12
    2836:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    2838:	2180      	movs	r1, #128	; 0x80
    283a:	0049      	lsls	r1, r1, #1
    283c:	9b01      	ldr	r3, [sp, #4]
    283e:	4319      	orrs	r1, r3
    2840:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    2842:	480b      	ldr	r0, [pc, #44]	; (2870 <enable_interrupts+0x50>)
    2844:	4b0c      	ldr	r3, [pc, #48]	; (2878 <enable_interrupts+0x58>)
    2846:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2848:	2800      	cmp	r0, #0
    284a:	d1f3      	bne.n	2834 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    284c:	a901      	add	r1, sp, #4
    284e:	20d0      	movs	r0, #208	; 0xd0
    2850:	0140      	lsls	r0, r0, #5
    2852:	4b08      	ldr	r3, [pc, #32]	; (2874 <enable_interrupts+0x54>)
    2854:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2856:	2800      	cmp	r0, #0
    2858:	d1ec      	bne.n	2834 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    285a:	2180      	movs	r1, #128	; 0x80
    285c:	0249      	lsls	r1, r1, #9
    285e:	9b01      	ldr	r3, [sp, #4]
    2860:	4319      	orrs	r1, r3
    2862:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    2864:	20d0      	movs	r0, #208	; 0xd0
    2866:	0140      	lsls	r0, r0, #5
    2868:	4b03      	ldr	r3, [pc, #12]	; (2878 <enable_interrupts+0x58>)
    286a:	4798      	blx	r3
    286c:	e7e2      	b.n	2834 <enable_interrupts+0x14>
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	00001408 	.word	0x00001408
    2874:	00002df9 	.word	0x00002df9
    2878:	00002e05 	.word	0x00002e05

0000287c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    287c:	b510      	push	{r4, lr}
    287e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    2880:	4b28      	ldr	r3, [pc, #160]	; (2924 <nmi_get_chipid+0xa8>)
    2882:	681c      	ldr	r4, [r3, #0]
    2884:	2c00      	cmp	r4, #0
    2886:	d004      	beq.n	2892 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    2888:	4b26      	ldr	r3, [pc, #152]	; (2924 <nmi_get_chipid+0xa8>)
    288a:	681c      	ldr	r4, [r3, #0]
}
    288c:	0020      	movs	r0, r4
    288e:	b002      	add	sp, #8
    2890:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    2892:	0019      	movs	r1, r3
    2894:	2080      	movs	r0, #128	; 0x80
    2896:	0140      	lsls	r0, r0, #5
    2898:	4b23      	ldr	r3, [pc, #140]	; (2928 <nmi_get_chipid+0xac>)
    289a:	4798      	blx	r3
    289c:	2800      	cmp	r0, #0
    289e:	d003      	beq.n	28a8 <nmi_get_chipid+0x2c>
			chipid = 0;
    28a0:	2200      	movs	r2, #0
    28a2:	4b20      	ldr	r3, [pc, #128]	; (2924 <nmi_get_chipid+0xa8>)
    28a4:	601a      	str	r2, [r3, #0]
			return 0;
    28a6:	e7f1      	b.n	288c <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    28a8:	a901      	add	r1, sp, #4
    28aa:	4820      	ldr	r0, [pc, #128]	; (292c <nmi_get_chipid+0xb0>)
    28ac:	4b1e      	ldr	r3, [pc, #120]	; (2928 <nmi_get_chipid+0xac>)
    28ae:	4798      	blx	r3
    28b0:	2800      	cmp	r0, #0
    28b2:	d003      	beq.n	28bc <nmi_get_chipid+0x40>
			chipid = 0;
    28b4:	2200      	movs	r2, #0
    28b6:	4b1b      	ldr	r3, [pc, #108]	; (2924 <nmi_get_chipid+0xa8>)
    28b8:	601a      	str	r2, [r3, #0]
			return 0;
    28ba:	e7e7      	b.n	288c <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    28bc:	4b19      	ldr	r3, [pc, #100]	; (2924 <nmi_get_chipid+0xa8>)
    28be:	681b      	ldr	r3, [r3, #0]
    28c0:	4a1b      	ldr	r2, [pc, #108]	; (2930 <nmi_get_chipid+0xb4>)
    28c2:	4293      	cmp	r3, r2
    28c4:	d00e      	beq.n	28e4 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    28c6:	4a1b      	ldr	r2, [pc, #108]	; (2934 <nmi_get_chipid+0xb8>)
    28c8:	4293      	cmp	r3, r2
    28ca:	d012      	beq.n	28f2 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    28cc:	4a1a      	ldr	r2, [pc, #104]	; (2938 <nmi_get_chipid+0xbc>)
    28ce:	4293      	cmp	r3, r2
    28d0:	d01c      	beq.n	290c <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    28d2:	4914      	ldr	r1, [pc, #80]	; (2924 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    28d4:	4a19      	ldr	r2, [pc, #100]	; (293c <nmi_get_chipid+0xc0>)
    28d6:	680b      	ldr	r3, [r1, #0]
    28d8:	401a      	ands	r2, r3
		chipid |= 0x050000;
    28da:	23a0      	movs	r3, #160	; 0xa0
    28dc:	02db      	lsls	r3, r3, #11
    28de:	4313      	orrs	r3, r2
    28e0:	600b      	str	r3, [r1, #0]
    28e2:	e7d1      	b.n	2888 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    28e4:	9b01      	ldr	r3, [sp, #4]
    28e6:	2b01      	cmp	r3, #1
    28e8:	d0f3      	beq.n	28d2 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    28ea:	4a15      	ldr	r2, [pc, #84]	; (2940 <nmi_get_chipid+0xc4>)
    28ec:	4b0d      	ldr	r3, [pc, #52]	; (2924 <nmi_get_chipid+0xa8>)
    28ee:	601a      	str	r2, [r3, #0]
    28f0:	e7ef      	b.n	28d2 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    28f2:	9b01      	ldr	r3, [sp, #4]
    28f4:	2b03      	cmp	r3, #3
    28f6:	d0ec      	beq.n	28d2 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    28f8:	2b04      	cmp	r3, #4
    28fa:	d003      	beq.n	2904 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    28fc:	4a11      	ldr	r2, [pc, #68]	; (2944 <nmi_get_chipid+0xc8>)
    28fe:	4b09      	ldr	r3, [pc, #36]	; (2924 <nmi_get_chipid+0xa8>)
    2900:	601a      	str	r2, [r3, #0]
    2902:	e7e6      	b.n	28d2 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    2904:	4a10      	ldr	r2, [pc, #64]	; (2948 <nmi_get_chipid+0xcc>)
    2906:	4b07      	ldr	r3, [pc, #28]	; (2924 <nmi_get_chipid+0xa8>)
    2908:	601a      	str	r2, [r3, #0]
    290a:	e7e2      	b.n	28d2 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    290c:	4905      	ldr	r1, [pc, #20]	; (2924 <nmi_get_chipid+0xa8>)
    290e:	20ec      	movs	r0, #236	; 0xec
    2910:	0380      	lsls	r0, r0, #14
    2912:	4b05      	ldr	r3, [pc, #20]	; (2928 <nmi_get_chipid+0xac>)
    2914:	4798      	blx	r3
    2916:	2800      	cmp	r0, #0
    2918:	d0db      	beq.n	28d2 <nmi_get_chipid+0x56>
			chipid = 0;
    291a:	2200      	movs	r2, #0
    291c:	4b01      	ldr	r3, [pc, #4]	; (2924 <nmi_get_chipid+0xa8>)
    291e:	601a      	str	r2, [r3, #0]
			return 0;
    2920:	e7b4      	b.n	288c <nmi_get_chipid+0x10>
    2922:	46c0      	nop			; (mov r8, r8)
    2924:	200002b0 	.word	0x200002b0
    2928:	00002df9 	.word	0x00002df9
    292c:	000013f4 	.word	0x000013f4
    2930:	001002a0 	.word	0x001002a0
    2934:	001002b0 	.word	0x001002b0
    2938:	001000f0 	.word	0x001000f0
    293c:	fff0ffff 	.word	0xfff0ffff
    2940:	001002a1 	.word	0x001002a1
    2944:	001002b2 	.word	0x001002b2
    2948:	001002b1 	.word	0x001002b1

0000294c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    294c:	b530      	push	{r4, r5, lr}
    294e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2950:	4c16      	ldr	r4, [pc, #88]	; (29ac <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    2952:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2954:	a901      	add	r1, sp, #4
    2956:	2010      	movs	r0, #16
    2958:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    295a:	2800      	cmp	r0, #0
    295c:	d11c      	bne.n	2998 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    295e:	9b01      	ldr	r3, [sp, #4]
    2960:	422b      	tst	r3, r5
    2962:	d1f7      	bne.n	2954 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2964:	a901      	add	r1, sp, #4
    2966:	3001      	adds	r0, #1
    2968:	4b10      	ldr	r3, [pc, #64]	; (29ac <chip_sleep+0x60>)
    296a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    296c:	2800      	cmp	r0, #0
    296e:	d113      	bne.n	2998 <chip_sleep+0x4c>
	if(reg & NBIT1)
    2970:	9901      	ldr	r1, [sp, #4]
    2972:	078b      	lsls	r3, r1, #30
    2974:	d507      	bpl.n	2986 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    2976:	2302      	movs	r3, #2
    2978:	4399      	bics	r1, r3
    297a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    297c:	3001      	adds	r0, #1
    297e:	4b0c      	ldr	r3, [pc, #48]	; (29b0 <chip_sleep+0x64>)
    2980:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    2982:	2800      	cmp	r0, #0
    2984:	d108      	bne.n	2998 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2986:	a901      	add	r1, sp, #4
    2988:	200b      	movs	r0, #11
    298a:	4b08      	ldr	r3, [pc, #32]	; (29ac <chip_sleep+0x60>)
    298c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    298e:	2800      	cmp	r0, #0
    2990:	d102      	bne.n	2998 <chip_sleep+0x4c>
	if(reg & NBIT0)
    2992:	9901      	ldr	r1, [sp, #4]
    2994:	07cb      	lsls	r3, r1, #31
    2996:	d401      	bmi.n	299c <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    2998:	b003      	add	sp, #12
    299a:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    299c:	2301      	movs	r3, #1
    299e:	4399      	bics	r1, r3
    29a0:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    29a2:	300b      	adds	r0, #11
    29a4:	4b02      	ldr	r3, [pc, #8]	; (29b0 <chip_sleep+0x64>)
    29a6:	4798      	blx	r3
    29a8:	e7f6      	b.n	2998 <chip_sleep+0x4c>
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	00002df9 	.word	0x00002df9
    29b0:	00002e05 	.word	0x00002e05

000029b4 <chip_wake>:
sint8 chip_wake(void)
{
    29b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29b6:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    29b8:	2300      	movs	r3, #0
    29ba:	9301      	str	r3, [sp, #4]
    29bc:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    29be:	a901      	add	r1, sp, #4
    29c0:	200b      	movs	r0, #11
    29c2:	4b28      	ldr	r3, [pc, #160]	; (2a64 <chip_wake+0xb0>)
    29c4:	4798      	blx	r3
    29c6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    29c8:	d130      	bne.n	2a2c <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    29ca:	9901      	ldr	r1, [sp, #4]
    29cc:	07cb      	lsls	r3, r1, #31
    29ce:	d406      	bmi.n	29de <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    29d0:	2301      	movs	r3, #1
    29d2:	4319      	orrs	r1, r3
    29d4:	200b      	movs	r0, #11
    29d6:	4b24      	ldr	r3, [pc, #144]	; (2a68 <chip_wake+0xb4>)
    29d8:	4798      	blx	r3
    29da:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    29dc:	d126      	bne.n	2a2c <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    29de:	a901      	add	r1, sp, #4
    29e0:	2001      	movs	r0, #1
    29e2:	4b20      	ldr	r3, [pc, #128]	; (2a64 <chip_wake+0xb0>)
    29e4:	4798      	blx	r3
    29e6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    29e8:	d120      	bne.n	2a2c <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    29ea:	9901      	ldr	r1, [sp, #4]
    29ec:	078b      	lsls	r3, r1, #30
    29ee:	d520      	bpl.n	2a32 <chip_wake+0x7e>
{
    29f0:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    29f2:	4f1c      	ldr	r7, [pc, #112]	; (2a64 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    29f4:	4e1d      	ldr	r6, [pc, #116]	; (2a6c <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    29f6:	4669      	mov	r1, sp
    29f8:	200f      	movs	r0, #15
    29fa:	47b8      	blx	r7
    29fc:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    29fe:	d120      	bne.n	2a42 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    2a00:	9b00      	ldr	r3, [sp, #0]
    2a02:	075b      	lsls	r3, r3, #29
    2a04:	d42b      	bmi.n	2a5e <chip_wake+0xaa>
		nm_bsp_sleep(2);
    2a06:	2002      	movs	r0, #2
    2a08:	47b0      	blx	r6
    2a0a:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    2a0c:	2d00      	cmp	r5, #0
    2a0e:	d1f2      	bne.n	29f6 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wake up the chip\n");
    2a10:	22ad      	movs	r2, #173	; 0xad
    2a12:	0052      	lsls	r2, r2, #1
    2a14:	4916      	ldr	r1, [pc, #88]	; (2a70 <chip_wake+0xbc>)
    2a16:	4817      	ldr	r0, [pc, #92]	; (2a74 <chip_wake+0xc0>)
    2a18:	4b17      	ldr	r3, [pc, #92]	; (2a78 <chip_wake+0xc4>)
    2a1a:	4798      	blx	r3
    2a1c:	4817      	ldr	r0, [pc, #92]	; (2a7c <chip_wake+0xc8>)
    2a1e:	4b18      	ldr	r3, [pc, #96]	; (2a80 <chip_wake+0xcc>)
    2a20:	4798      	blx	r3
    2a22:	200d      	movs	r0, #13
    2a24:	4b17      	ldr	r3, [pc, #92]	; (2a84 <chip_wake+0xd0>)
    2a26:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2a28:	2404      	movs	r4, #4
    2a2a:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    2a2c:	0020      	movs	r0, r4
    2a2e:	b003      	add	sp, #12
    2a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    2a32:	2302      	movs	r3, #2
    2a34:	4319      	orrs	r1, r3
    2a36:	2001      	movs	r0, #1
    2a38:	4b0b      	ldr	r3, [pc, #44]	; (2a68 <chip_wake+0xb4>)
    2a3a:	4798      	blx	r3
    2a3c:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2a3e:	d0d7      	beq.n	29f0 <chip_wake+0x3c>
    2a40:	e7f4      	b.n	2a2c <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    2a42:	22a8      	movs	r2, #168	; 0xa8
    2a44:	0052      	lsls	r2, r2, #1
    2a46:	490a      	ldr	r1, [pc, #40]	; (2a70 <chip_wake+0xbc>)
    2a48:	480a      	ldr	r0, [pc, #40]	; (2a74 <chip_wake+0xc0>)
    2a4a:	4d0b      	ldr	r5, [pc, #44]	; (2a78 <chip_wake+0xc4>)
    2a4c:	47a8      	blx	r5
    2a4e:	9a00      	ldr	r2, [sp, #0]
    2a50:	0021      	movs	r1, r4
    2a52:	480d      	ldr	r0, [pc, #52]	; (2a88 <chip_wake+0xd4>)
    2a54:	47a8      	blx	r5
    2a56:	200d      	movs	r0, #13
    2a58:	4b0a      	ldr	r3, [pc, #40]	; (2a84 <chip_wake+0xd0>)
    2a5a:	4798      	blx	r3
			goto _WAKE_EXIT;
    2a5c:	e7e6      	b.n	2a2c <chip_wake+0x78>
	nm_bus_reset();
    2a5e:	4b0b      	ldr	r3, [pc, #44]	; (2a8c <chip_wake+0xd8>)
    2a60:	4798      	blx	r3
    2a62:	e7e3      	b.n	2a2c <chip_wake+0x78>
    2a64:	00002df9 	.word	0x00002df9
    2a68:	00002e05 	.word	0x00002e05
    2a6c:	00000d41 	.word	0x00000d41
    2a70:	00008f5c 	.word	0x00008f5c
    2a74:	00008920 	.word	0x00008920
    2a78:	000075f9 	.word	0x000075f9
    2a7c:	00008fa4 	.word	0x00008fa4
    2a80:	00007715 	.word	0x00007715
    2a84:	0000762d 	.word	0x0000762d
    2a88:	00008f8c 	.word	0x00008f8c
    2a8c:	00002de1 	.word	0x00002de1

00002a90 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a92:	46c6      	mov	lr, r8
    2a94:	b500      	push	{lr}
    2a96:	4680      	mov	r8, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2a98:	4d36      	ldr	r5, [pc, #216]	; (2b74 <wait_for_bootrom+0xe4>)
    2a9a:	4c37      	ldr	r4, [pc, #220]	; (2b78 <wait_for_bootrom+0xe8>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2a9c:	4e37      	ldr	r6, [pc, #220]	; (2b7c <wait_for_bootrom+0xec>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2a9e:	0028      	movs	r0, r5
    2aa0:	47a0      	blx	r4
		if (reg & 0x80000000) {
    2aa2:	2800      	cmp	r0, #0
    2aa4:	db02      	blt.n	2aac <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2aa6:	2001      	movs	r0, #1
    2aa8:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2aaa:	e7f8      	b.n	2a9e <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    2aac:	4834      	ldr	r0, [pc, #208]	; (2b80 <wait_for_bootrom+0xf0>)
    2aae:	4b32      	ldr	r3, [pc, #200]	; (2b78 <wait_for_bootrom+0xe8>)
    2ab0:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    2ab2:	07c3      	lsls	r3, r0, #31
    2ab4:	d546      	bpl.n	2b44 <wait_for_bootrom+0xb4>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    2ab6:	4643      	mov	r3, r8
    2ab8:	2b02      	cmp	r3, #2
    2aba:	d026      	beq.n	2b0a <wait_for_bootrom+0x7a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    2abc:	4643      	mov	r3, r8
    2abe:	2b03      	cmp	r3, #3
    2ac0:	d02d      	beq.n	2b1e <wait_for_bootrom+0x8e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    2ac2:	4643      	mov	r3, r8
    2ac4:	2b04      	cmp	r3, #4
    2ac6:	d033      	beq.n	2b30 <wait_for_bootrom+0xa0>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2ac8:	492e      	ldr	r1, [pc, #184]	; (2b84 <wait_for_bootrom+0xf4>)
    2aca:	482f      	ldr	r0, [pc, #188]	; (2b88 <wait_for_bootrom+0xf8>)
    2acc:	4b2f      	ldr	r3, [pc, #188]	; (2b8c <wait_for_bootrom+0xfc>)
    2ace:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    2ad0:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    2ad2:	4b2f      	ldr	r3, [pc, #188]	; (2b90 <wait_for_bootrom+0x100>)
    2ad4:	4798      	blx	r3
    2ad6:	0500      	lsls	r0, r0, #20
    2ad8:	0d00      	lsrs	r0, r0, #20
    2ada:	4b2e      	ldr	r3, [pc, #184]	; (2b94 <wait_for_bootrom+0x104>)
    2adc:	4298      	cmp	r0, r3
    2ade:	d92d      	bls.n	2b3c <wait_for_bootrom+0xac>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    2ae0:	2002      	movs	r0, #2
    2ae2:	4320      	orrs	r0, r4
    2ae4:	4b2c      	ldr	r3, [pc, #176]	; (2b98 <wait_for_bootrom+0x108>)
    2ae6:	4798      	blx	r3
	} else {
		chip_apply_conf(u32GpReg1);
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    2ae8:	482c      	ldr	r0, [pc, #176]	; (2b9c <wait_for_bootrom+0x10c>)
    2aea:	4c2d      	ldr	r4, [pc, #180]	; (2ba0 <wait_for_bootrom+0x110>)
    2aec:	47a0      	blx	r4
    2aee:	4925      	ldr	r1, [pc, #148]	; (2b84 <wait_for_bootrom+0xf4>)
    2af0:	482c      	ldr	r0, [pc, #176]	; (2ba4 <wait_for_bootrom+0x114>)
    2af2:	47a0      	blx	r4
    2af4:	200d      	movs	r0, #13
    2af6:	4b2c      	ldr	r3, [pc, #176]	; (2ba8 <wait_for_bootrom+0x118>)
    2af8:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    2afa:	492c      	ldr	r1, [pc, #176]	; (2bac <wait_for_bootrom+0x11c>)
    2afc:	482c      	ldr	r0, [pc, #176]	; (2bb0 <wait_for_bootrom+0x120>)
    2afe:	4b23      	ldr	r3, [pc, #140]	; (2b8c <wait_for_bootrom+0xfc>)
    2b00:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    2b02:	2000      	movs	r0, #0
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    2b04:	bc04      	pop	{r2}
    2b06:	4690      	mov	r8, r2
    2b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2b0a:	492a      	ldr	r1, [pc, #168]	; (2bb4 <wait_for_bootrom+0x124>)
    2b0c:	482a      	ldr	r0, [pc, #168]	; (2bb8 <wait_for_bootrom+0x128>)
    2b0e:	4c1f      	ldr	r4, [pc, #124]	; (2b8c <wait_for_bootrom+0xfc>)
    2b10:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    2b12:	2180      	movs	r1, #128	; 0x80
    2b14:	0349      	lsls	r1, r1, #13
    2b16:	481c      	ldr	r0, [pc, #112]	; (2b88 <wait_for_bootrom+0xf8>)
    2b18:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2b1a:	2400      	movs	r4, #0
    2b1c:	e7d9      	b.n	2ad2 <wait_for_bootrom+0x42>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2b1e:	4925      	ldr	r1, [pc, #148]	; (2bb4 <wait_for_bootrom+0x124>)
    2b20:	4825      	ldr	r0, [pc, #148]	; (2bb8 <wait_for_bootrom+0x128>)
    2b22:	4c1a      	ldr	r4, [pc, #104]	; (2b8c <wait_for_bootrom+0xfc>)
    2b24:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    2b26:	2100      	movs	r1, #0
    2b28:	4817      	ldr	r0, [pc, #92]	; (2b88 <wait_for_bootrom+0xf8>)
    2b2a:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2b2c:	2400      	movs	r4, #0
    2b2e:	e7d0      	b.n	2ad2 <wait_for_bootrom+0x42>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2b30:	4914      	ldr	r1, [pc, #80]	; (2b84 <wait_for_bootrom+0xf4>)
    2b32:	4815      	ldr	r0, [pc, #84]	; (2b88 <wait_for_bootrom+0xf8>)
    2b34:	4b15      	ldr	r3, [pc, #84]	; (2b8c <wait_for_bootrom+0xfc>)
    2b36:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2b38:	2480      	movs	r4, #128	; 0x80
    2b3a:	e7ca      	b.n	2ad2 <wait_for_bootrom+0x42>
		chip_apply_conf(u32GpReg1);
    2b3c:	0020      	movs	r0, r4
    2b3e:	4b16      	ldr	r3, [pc, #88]	; (2b98 <wait_for_bootrom+0x108>)
    2b40:	4798      	blx	r3
    2b42:	e7d1      	b.n	2ae8 <wait_for_bootrom+0x58>
			nm_bsp_sleep(1);
    2b44:	2001      	movs	r0, #1
    2b46:	4b0d      	ldr	r3, [pc, #52]	; (2b7c <wait_for_bootrom+0xec>)
    2b48:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    2b4a:	4819      	ldr	r0, [pc, #100]	; (2bb0 <wait_for_bootrom+0x120>)
    2b4c:	4b0a      	ldr	r3, [pc, #40]	; (2b78 <wait_for_bootrom+0xe8>)
    2b4e:	4798      	blx	r3
    2b50:	2480      	movs	r4, #128	; 0x80
    2b52:	01a4      	lsls	r4, r4, #6
		while(reg != M2M_FINISH_BOOT_ROM)
    2b54:	4d19      	ldr	r5, [pc, #100]	; (2bbc <wait_for_bootrom+0x12c>)
			nm_bsp_sleep(1);
    2b56:	4f09      	ldr	r7, [pc, #36]	; (2b7c <wait_for_bootrom+0xec>)
			reg = nm_read_reg(BOOTROM_REG);
    2b58:	4e07      	ldr	r6, [pc, #28]	; (2b78 <wait_for_bootrom+0xe8>)
		while(reg != M2M_FINISH_BOOT_ROM)
    2b5a:	42a8      	cmp	r0, r5
    2b5c:	d0ab      	beq.n	2ab6 <wait_for_bootrom+0x26>
			nm_bsp_sleep(1);
    2b5e:	2001      	movs	r0, #1
    2b60:	47b8      	blx	r7
			reg = nm_read_reg(BOOTROM_REG);
    2b62:	4813      	ldr	r0, [pc, #76]	; (2bb0 <wait_for_bootrom+0x120>)
    2b64:	47b0      	blx	r6
    2b66:	3c01      	subs	r4, #1
			if(++cnt > TIMEOUT)
    2b68:	2c00      	cmp	r4, #0
    2b6a:	d1f6      	bne.n	2b5a <wait_for_bootrom+0xca>
				ret = M2M_ERR_INIT;
    2b6c:	2005      	movs	r0, #5
    2b6e:	4240      	negs	r0, r0
	return ret;
    2b70:	e7c8      	b.n	2b04 <wait_for_bootrom+0x74>
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	00001014 	.word	0x00001014
    2b78:	00002ded 	.word	0x00002ded
    2b7c:	00000d41 	.word	0x00000d41
    2b80:	000207bc 	.word	0x000207bc
    2b84:	13301361 	.word	0x13301361
    2b88:	0000108c 	.word	0x0000108c
    2b8c:	00002e05 	.word	0x00002e05
    2b90:	0000287d 	.word	0x0000287d
    2b94:	0000039f 	.word	0x0000039f
    2b98:	000027e9 	.word	0x000027e9
    2b9c:	00008cc0 	.word	0x00008cc0
    2ba0:	000075f9 	.word	0x000075f9
    2ba4:	00008fc0 	.word	0x00008fc0
    2ba8:	0000762d 	.word	0x0000762d
    2bac:	ef522f61 	.word	0xef522f61
    2bb0:	000c000c 	.word	0x000c000c
    2bb4:	3c1cd57d 	.word	0x3c1cd57d
    2bb8:	000207ac 	.word	0x000207ac
    2bbc:	10add09e 	.word	0x10add09e

00002bc0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2bc0:	b570      	push	{r4, r5, r6, lr}
    2bc2:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    2bc4:	4b15      	ldr	r3, [pc, #84]	; (2c1c <wait_for_firmware_start+0x5c>)
    2bc6:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2bc8:	4b15      	ldr	r3, [pc, #84]	; (2c20 <wait_for_firmware_start+0x60>)
    2bca:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2bcc:	3802      	subs	r0, #2
    2bce:	2801      	cmp	r0, #1
    2bd0:	d911      	bls.n	2bf6 <wait_for_firmware_start+0x36>
{
    2bd2:	2480      	movs	r4, #128	; 0x80
    2bd4:	01a4      	lsls	r4, r4, #6
    2bd6:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2bd8:	4e12      	ldr	r6, [pc, #72]	; (2c24 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2bda:	4d13      	ldr	r5, [pc, #76]	; (2c28 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    2bdc:	9b00      	ldr	r3, [sp, #0]
    2bde:	4298      	cmp	r0, r3
    2be0:	d00e      	beq.n	2c00 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2be2:	2002      	movs	r0, #2
    2be4:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    2be6:	9801      	ldr	r0, [sp, #4]
    2be8:	47a8      	blx	r5
    2bea:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    2bec:	2c00      	cmp	r4, #0
    2bee:	d1f5      	bne.n	2bdc <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2bf0:	2005      	movs	r0, #5
    2bf2:	4240      	negs	r0, r0
    2bf4:	e009      	b.n	2c0a <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    2bf6:	4b0d      	ldr	r3, [pc, #52]	; (2c2c <wait_for_firmware_start+0x6c>)
    2bf8:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2bfa:	4b0d      	ldr	r3, [pc, #52]	; (2c30 <wait_for_firmware_start+0x70>)
    2bfc:	9300      	str	r3, [sp, #0]
    2bfe:	e7e8      	b.n	2bd2 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2c00:	9a00      	ldr	r2, [sp, #0]
    2c02:	4b07      	ldr	r3, [pc, #28]	; (2c20 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    2c04:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    2c06:	429a      	cmp	r2, r3
    2c08:	d001      	beq.n	2c0e <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    2c0a:	b002      	add	sp, #8
    2c0c:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    2c0e:	2100      	movs	r1, #0
    2c10:	4802      	ldr	r0, [pc, #8]	; (2c1c <wait_for_firmware_start+0x5c>)
    2c12:	4b08      	ldr	r3, [pc, #32]	; (2c34 <wait_for_firmware_start+0x74>)
    2c14:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    2c16:	2000      	movs	r0, #0
    2c18:	e7f7      	b.n	2c0a <wait_for_firmware_start+0x4a>
    2c1a:	46c0      	nop			; (mov r8, r8)
    2c1c:	0000108c 	.word	0x0000108c
    2c20:	02532636 	.word	0x02532636
    2c24:	00000d41 	.word	0x00000d41
    2c28:	00002ded 	.word	0x00002ded
    2c2c:	000207ac 	.word	0x000207ac
    2c30:	d75dc1c3 	.word	0xd75dc1c3
    2c34:	00002e05 	.word	0x00002e05

00002c38 <chip_deinit>:

sint8 chip_deinit(void)
{
    2c38:	b510      	push	{r4, lr}
    2c3a:	b082      	sub	sp, #8
	uint32 reg = 0;
    2c3c:	2300      	movs	r3, #0
    2c3e:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2c40:	a901      	add	r1, sp, #4
    2c42:	20a0      	movs	r0, #160	; 0xa0
    2c44:	0140      	lsls	r0, r0, #5
    2c46:	4b14      	ldr	r3, [pc, #80]	; (2c98 <chip_deinit+0x60>)
    2c48:	4798      	blx	r3
    2c4a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2c4c:	d115      	bne.n	2c7a <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    2c4e:	4913      	ldr	r1, [pc, #76]	; (2c9c <chip_deinit+0x64>)
    2c50:	9b01      	ldr	r3, [sp, #4]
    2c52:	4019      	ands	r1, r3
    2c54:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2c56:	20a0      	movs	r0, #160	; 0xa0
    2c58:	0140      	lsls	r0, r0, #5
    2c5a:	4b11      	ldr	r3, [pc, #68]	; (2ca0 <chip_deinit+0x68>)
    2c5c:	4798      	blx	r3
    2c5e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2c60:	d016      	beq.n	2c90 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2c62:	4a10      	ldr	r2, [pc, #64]	; (2ca4 <chip_deinit+0x6c>)
    2c64:	4910      	ldr	r1, [pc, #64]	; (2ca8 <chip_deinit+0x70>)
    2c66:	4811      	ldr	r0, [pc, #68]	; (2cac <chip_deinit+0x74>)
    2c68:	4b11      	ldr	r3, [pc, #68]	; (2cb0 <chip_deinit+0x78>)
    2c6a:	4798      	blx	r3
    2c6c:	4811      	ldr	r0, [pc, #68]	; (2cb4 <chip_deinit+0x7c>)
    2c6e:	4b12      	ldr	r3, [pc, #72]	; (2cb8 <chip_deinit+0x80>)
    2c70:	4798      	blx	r3
    2c72:	200d      	movs	r0, #13
    2c74:	4b11      	ldr	r3, [pc, #68]	; (2cbc <chip_deinit+0x84>)
    2c76:	4798      	blx	r3
		goto ERR1;
    2c78:	e00a      	b.n	2c90 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2c7a:	4a11      	ldr	r2, [pc, #68]	; (2cc0 <chip_deinit+0x88>)
    2c7c:	490a      	ldr	r1, [pc, #40]	; (2ca8 <chip_deinit+0x70>)
    2c7e:	480b      	ldr	r0, [pc, #44]	; (2cac <chip_deinit+0x74>)
    2c80:	4b0b      	ldr	r3, [pc, #44]	; (2cb0 <chip_deinit+0x78>)
    2c82:	4798      	blx	r3
    2c84:	480b      	ldr	r0, [pc, #44]	; (2cb4 <chip_deinit+0x7c>)
    2c86:	4b0c      	ldr	r3, [pc, #48]	; (2cb8 <chip_deinit+0x80>)
    2c88:	4798      	blx	r3
    2c8a:	200d      	movs	r0, #13
    2c8c:	4b0b      	ldr	r3, [pc, #44]	; (2cbc <chip_deinit+0x84>)
    2c8e:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    2c90:	0020      	movs	r0, r4
    2c92:	b002      	add	sp, #8
    2c94:	bd10      	pop	{r4, pc}
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	00002df9 	.word	0x00002df9
    2c9c:	fffffbff 	.word	0xfffffbff
    2ca0:	00002e05 	.word	0x00002e05
    2ca4:	00000207 	.word	0x00000207
    2ca8:	00008f68 	.word	0x00008f68
    2cac:	00008920 	.word	0x00008920
    2cb0:	000075f9 	.word	0x000075f9
    2cb4:	00008f74 	.word	0x00008f74
    2cb8:	00007715 	.word	0x00007715
    2cbc:	0000762d 	.word	0x0000762d
    2cc0:	00000201 	.word	0x00000201

00002cc4 <nmi_get_otp_mac_address>:
	return s8Ret;
}
#endif /* CONF_PERIPH */

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
    2cc4:	b570      	push	{r4, r5, r6, lr}
    2cc6:	b086      	sub	sp, #24
    2cc8:	0006      	movs	r6, r0
    2cca:	000d      	movs	r5, r1
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    2ccc:	2208      	movs	r2, #8
    2cce:	2100      	movs	r1, #0
    2cd0:	a801      	add	r0, sp, #4
    2cd2:	4b1b      	ldr	r3, [pc, #108]	; (2d40 <nmi_get_otp_mac_address+0x7c>)
    2cd4:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    2cd6:	a905      	add	r1, sp, #20
    2cd8:	481a      	ldr	r0, [pc, #104]	; (2d44 <nmi_get_otp_mac_address+0x80>)
    2cda:	4b1b      	ldr	r3, [pc, #108]	; (2d48 <nmi_get_otp_mac_address+0x84>)
    2cdc:	4798      	blx	r3
    2cde:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    2ce0:	d006      	beq.n	2cf0 <nmi_get_otp_mac_address+0x2c>
	m2m_memcpy(pu8MacAddr,mac,6);
	if(pu8IsValid) *pu8IsValid = 1;
	return ret;

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
    2ce2:	2d00      	cmp	r5, #0
    2ce4:	d001      	beq.n	2cea <nmi_get_otp_mac_address+0x26>
    2ce6:	2300      	movs	r3, #0
    2ce8:	702b      	strb	r3, [r5, #0]
	return ret;
}
    2cea:	0020      	movs	r0, r4
    2cec:	b006      	add	sp, #24
    2cee:	bd70      	pop	{r4, r5, r6, pc}
	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2cf0:	20c0      	movs	r0, #192	; 0xc0
    2cf2:	0280      	lsls	r0, r0, #10
    2cf4:	9b05      	ldr	r3, [sp, #20]
    2cf6:	4318      	orrs	r0, r3
    2cf8:	2208      	movs	r2, #8
    2cfa:	a901      	add	r1, sp, #4
    2cfc:	4b13      	ldr	r3, [pc, #76]	; (2d4c <nmi_get_otp_mac_address+0x88>)
    2cfe:	4798      	blx	r3
    2d00:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    2d02:	d1ee      	bne.n	2ce2 <nmi_get_otp_mac_address+0x1e>
	u32RegValue = strgp.u32Mac_efuse_mib;
    2d04:	9801      	ldr	r0, [sp, #4]
    2d06:	9005      	str	r0, [sp, #20]
	if(!EFUSED_MAC(u32RegValue)) {
    2d08:	0c03      	lsrs	r3, r0, #16
    2d0a:	d105      	bne.n	2d18 <nmi_get_otp_mac_address+0x54>
		m2m_memset(pu8MacAddr, 0, 6);
    2d0c:	2206      	movs	r2, #6
    2d0e:	2100      	movs	r1, #0
    2d10:	0030      	movs	r0, r6
    2d12:	4b0f      	ldr	r3, [pc, #60]	; (2d50 <nmi_get_otp_mac_address+0x8c>)
    2d14:	4798      	blx	r3
		goto _EXIT_ERR;
    2d16:	e7e4      	b.n	2ce2 <nmi_get_otp_mac_address+0x1e>
	u32RegValue >>=16;
    2d18:	0c00      	lsrs	r0, r0, #16
    2d1a:	9005      	str	r0, [sp, #20]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    2d1c:	23c0      	movs	r3, #192	; 0xc0
    2d1e:	029b      	lsls	r3, r3, #10
    2d20:	4318      	orrs	r0, r3
    2d22:	2206      	movs	r2, #6
    2d24:	a903      	add	r1, sp, #12
    2d26:	4b09      	ldr	r3, [pc, #36]	; (2d4c <nmi_get_otp_mac_address+0x88>)
    2d28:	4798      	blx	r3
    2d2a:	0004      	movs	r4, r0
	m2m_memcpy(pu8MacAddr,mac,6);
    2d2c:	2206      	movs	r2, #6
    2d2e:	a903      	add	r1, sp, #12
    2d30:	0030      	movs	r0, r6
    2d32:	4b08      	ldr	r3, [pc, #32]	; (2d54 <nmi_get_otp_mac_address+0x90>)
    2d34:	4798      	blx	r3
	if(pu8IsValid) *pu8IsValid = 1;
    2d36:	2d00      	cmp	r5, #0
    2d38:	d0d7      	beq.n	2cea <nmi_get_otp_mac_address+0x26>
    2d3a:	2301      	movs	r3, #1
    2d3c:	702b      	strb	r3, [r5, #0]
    2d3e:	e7d4      	b.n	2cea <nmi_get_otp_mac_address+0x26>
    2d40:	00007499 	.word	0x00007499
    2d44:	000c0008 	.word	0x000c0008
    2d48:	00002df9 	.word	0x00002df9
    2d4c:	00002e11 	.word	0x00002e11
    2d50:	000010e1 	.word	0x000010e1
    2d54:	000010cd 	.word	0x000010cd

00002d58 <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
    2d58:	b530      	push	{r4, r5, lr}
    2d5a:	b087      	sub	sp, #28
    2d5c:	0005      	movs	r5, r0
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    2d5e:	2208      	movs	r2, #8
    2d60:	2100      	movs	r1, #0
    2d62:	a801      	add	r0, sp, #4
    2d64:	4b13      	ldr	r3, [pc, #76]	; (2db4 <nmi_get_mac_address+0x5c>)
    2d66:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    2d68:	a905      	add	r1, sp, #20
    2d6a:	4813      	ldr	r0, [pc, #76]	; (2db8 <nmi_get_mac_address+0x60>)
    2d6c:	4b13      	ldr	r3, [pc, #76]	; (2dbc <nmi_get_mac_address+0x64>)
    2d6e:	4798      	blx	r3
    2d70:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    2d72:	d002      	beq.n	2d7a <nmi_get_mac_address+0x22>

	return ret;

_EXIT_ERR:
	return ret;
}
    2d74:	0020      	movs	r0, r4
    2d76:	b007      	add	sp, #28
    2d78:	bd30      	pop	{r4, r5, pc}
	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2d7a:	20c0      	movs	r0, #192	; 0xc0
    2d7c:	0280      	lsls	r0, r0, #10
    2d7e:	9b05      	ldr	r3, [sp, #20]
    2d80:	4318      	orrs	r0, r3
    2d82:	2208      	movs	r2, #8
    2d84:	a901      	add	r1, sp, #4
    2d86:	4b0e      	ldr	r3, [pc, #56]	; (2dc0 <nmi_get_mac_address+0x68>)
    2d88:	4798      	blx	r3
    2d8a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    2d8c:	d1f2      	bne.n	2d74 <nmi_get_mac_address+0x1c>
	u32RegValue &=0x0000ffff;
    2d8e:	9b01      	ldr	r3, [sp, #4]
    2d90:	0418      	lsls	r0, r3, #16
    2d92:	0c00      	lsrs	r0, r0, #16
    2d94:	9005      	str	r0, [sp, #20]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    2d96:	23c0      	movs	r3, #192	; 0xc0
    2d98:	029b      	lsls	r3, r3, #10
    2d9a:	4318      	orrs	r0, r3
    2d9c:	2206      	movs	r2, #6
    2d9e:	a903      	add	r1, sp, #12
    2da0:	4b07      	ldr	r3, [pc, #28]	; (2dc0 <nmi_get_mac_address+0x68>)
    2da2:	4798      	blx	r3
    2da4:	0004      	movs	r4, r0
	m2m_memcpy(pu8MacAddr, mac, 6);
    2da6:	2206      	movs	r2, #6
    2da8:	a903      	add	r1, sp, #12
    2daa:	0028      	movs	r0, r5
    2dac:	4b05      	ldr	r3, [pc, #20]	; (2dc4 <nmi_get_mac_address+0x6c>)
    2dae:	4798      	blx	r3
	return ret;
    2db0:	e7e0      	b.n	2d74 <nmi_get_mac_address+0x1c>
    2db2:	46c0      	nop			; (mov r8, r8)
    2db4:	00007499 	.word	0x00007499
    2db8:	000c0008 	.word	0x000c0008
    2dbc:	00002df9 	.word	0x00002df9
    2dc0:	00002e11 	.word	0x00002e11
    2dc4:	000010cd 	.word	0x000010cd

00002dc8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2dc8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    2dca:	4b01      	ldr	r3, [pc, #4]	; (2dd0 <nm_bus_iface_init+0x8>)
    2dcc:	4798      	blx	r3
	return ret;
}
    2dce:	bd10      	pop	{r4, pc}
    2dd0:	00000f05 	.word	0x00000f05

00002dd4 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2dd4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    2dd6:	4b01      	ldr	r3, [pc, #4]	; (2ddc <nm_bus_iface_deinit+0x8>)
    2dd8:	4798      	blx	r3

	return ret;
}
    2dda:	bd10      	pop	{r4, pc}
    2ddc:	00001059 	.word	0x00001059

00002de0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2de0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2de2:	4b01      	ldr	r3, [pc, #4]	; (2de8 <nm_bus_reset+0x8>)
    2de4:	4798      	blx	r3
#else
#error "Please define bus usage"
#endif

	return ret;
}
    2de6:	bd10      	pop	{r4, pc}
    2de8:	000037a9 	.word	0x000037a9

00002dec <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2dec:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2dee:	4b01      	ldr	r3, [pc, #4]	; (2df4 <nm_read_reg+0x8>)
    2df0:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Please define bus usage"
#endif

}
    2df2:	bd10      	pop	{r4, pc}
    2df4:	000037e1 	.word	0x000037e1

00002df8 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2df8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2dfa:	4b01      	ldr	r3, [pc, #4]	; (2e00 <nm_read_reg_with_ret+0x8>)
    2dfc:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
    2dfe:	bd10      	pop	{r4, pc}
    2e00:	000037f5 	.word	0x000037f5

00002e04 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2e04:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2e06:	4b01      	ldr	r3, [pc, #4]	; (2e0c <nm_write_reg+0x8>)
    2e08:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Please define bus usage"
#endif
}
    2e0a:	bd10      	pop	{r4, pc}
    2e0c:	0000380d 	.word	0x0000380d

00002e10 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e12:	46d6      	mov	lr, sl
    2e14:	464f      	mov	r7, r9
    2e16:	4646      	mov	r6, r8
    2e18:	b5c0      	push	{r6, r7, lr}
    2e1a:	b082      	sub	sp, #8
    2e1c:	4680      	mov	r8, r0
    2e1e:	4689      	mov	r9, r1
    2e20:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2e22:	4b13      	ldr	r3, [pc, #76]	; (2e70 <nm_read_block+0x60>)
    2e24:	881f      	ldrh	r7, [r3, #0]
    2e26:	3f08      	subs	r7, #8
    2e28:	b2bb      	uxth	r3, r7
    2e2a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2e2c:	001e      	movs	r6, r3
    2e2e:	0004      	movs	r4, r0
    2e30:	429a      	cmp	r2, r3
    2e32:	d91a      	bls.n	2e6a <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2e34:	4b0f      	ldr	r3, [pc, #60]	; (2e74 <nm_read_block+0x64>)
    2e36:	469a      	mov	sl, r3
    2e38:	1a37      	subs	r7, r6, r0
    2e3a:	4643      	mov	r3, r8
    2e3c:	1ae1      	subs	r1, r4, r3
    2e3e:	4449      	add	r1, r9
    2e40:	9a01      	ldr	r2, [sp, #4]
    2e42:	0020      	movs	r0, r4
    2e44:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2e46:	2800      	cmp	r0, #0
    2e48:	d109      	bne.n	2e5e <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2e4a:	1bad      	subs	r5, r5, r6
    2e4c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2e4e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2e50:	42b5      	cmp	r5, r6
    2e52:	d8f2      	bhi.n	2e3a <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2e54:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2e56:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2e58:	0020      	movs	r0, r4
    2e5a:	4b06      	ldr	r3, [pc, #24]	; (2e74 <nm_read_block+0x64>)
    2e5c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2e5e:	b002      	add	sp, #8
    2e60:	bc1c      	pop	{r2, r3, r4}
    2e62:	4690      	mov	r8, r2
    2e64:	4699      	mov	r9, r3
    2e66:	46a2      	mov	sl, r4
    2e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2e6a:	2100      	movs	r1, #0
    2e6c:	e7f2      	b.n	2e54 <nm_read_block+0x44>
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	20000008 	.word	0x20000008
    2e74:	0000394d 	.word	0x0000394d

00002e78 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2e78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e7a:	46d6      	mov	lr, sl
    2e7c:	464f      	mov	r7, r9
    2e7e:	4646      	mov	r6, r8
    2e80:	b5c0      	push	{r6, r7, lr}
    2e82:	b082      	sub	sp, #8
    2e84:	4680      	mov	r8, r0
    2e86:	4689      	mov	r9, r1
    2e88:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2e8a:	4b13      	ldr	r3, [pc, #76]	; (2ed8 <nm_write_block+0x60>)
    2e8c:	881f      	ldrh	r7, [r3, #0]
    2e8e:	3f08      	subs	r7, #8
    2e90:	b2bb      	uxth	r3, r7
    2e92:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2e94:	001e      	movs	r6, r3
    2e96:	0004      	movs	r4, r0
    2e98:	429a      	cmp	r2, r3
    2e9a:	d91a      	bls.n	2ed2 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2e9c:	4b0f      	ldr	r3, [pc, #60]	; (2edc <nm_write_block+0x64>)
    2e9e:	469a      	mov	sl, r3
    2ea0:	1a37      	subs	r7, r6, r0
    2ea2:	4643      	mov	r3, r8
    2ea4:	1ae1      	subs	r1, r4, r3
    2ea6:	4449      	add	r1, r9
    2ea8:	9a01      	ldr	r2, [sp, #4]
    2eaa:	0020      	movs	r0, r4
    2eac:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2eae:	2800      	cmp	r0, #0
    2eb0:	d109      	bne.n	2ec6 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2eb2:	1bad      	subs	r5, r5, r6
    2eb4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2eb6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2eb8:	42b5      	cmp	r5, r6
    2eba:	d8f2      	bhi.n	2ea2 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2ebc:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2ebe:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2ec0:	0020      	movs	r0, r4
    2ec2:	4b06      	ldr	r3, [pc, #24]	; (2edc <nm_write_block+0x64>)
    2ec4:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2ec6:	b002      	add	sp, #8
    2ec8:	bc1c      	pop	{r2, r3, r4}
    2eca:	4690      	mov	r8, r2
    2ecc:	4699      	mov	r9, r3
    2ece:	46a2      	mov	sl, r4
    2ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2ed2:	2100      	movs	r1, #0
    2ed4:	e7f2      	b.n	2ebc <nm_write_block+0x44>
    2ed6:	46c0      	nop			; (mov r8, r8)
    2ed8:	20000008 	.word	0x20000008
    2edc:	00003aa9 	.word	0x00003aa9

00002ee0 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2ee0:	b570      	push	{r4, r5, r6, lr}
    2ee2:	b084      	sub	sp, #16
    2ee4:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2ee6:	2300      	movs	r3, #0
    2ee8:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    2eea:	2208      	movs	r2, #8
    2eec:	2100      	movs	r1, #0
    2eee:	a801      	add	r0, sp, #4
    2ef0:	4b2d      	ldr	r3, [pc, #180]	; (2fa8 <nm_get_firmware_full_info+0xc8>)
    2ef2:	4798      	blx	r3
	if (pstrRev != NULL)
    2ef4:	2c00      	cmp	r4, #0
    2ef6:	d045      	beq.n	2f84 <nm_get_firmware_full_info+0xa4>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2ef8:	2228      	movs	r2, #40	; 0x28
    2efa:	2100      	movs	r1, #0
    2efc:	0020      	movs	r0, r4
    2efe:	4b2b      	ldr	r3, [pc, #172]	; (2fac <nm_get_firmware_full_info+0xcc>)
    2f00:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2f02:	a903      	add	r1, sp, #12
    2f04:	482a      	ldr	r0, [pc, #168]	; (2fb0 <nm_get_firmware_full_info+0xd0>)
    2f06:	4b2b      	ldr	r3, [pc, #172]	; (2fb4 <nm_get_firmware_full_info+0xd4>)
    2f08:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    2f0a:	2800      	cmp	r0, #0
    2f0c:	d13b      	bne.n	2f86 <nm_get_firmware_full_info+0xa6>
		{
			if(reg != 0)
    2f0e:	9b03      	ldr	r3, [sp, #12]
    2f10:	2b00      	cmp	r3, #0
    2f12:	d03a      	beq.n	2f8a <nm_get_firmware_full_info+0xaa>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2f14:	20c0      	movs	r0, #192	; 0xc0
    2f16:	0280      	lsls	r0, r0, #10
    2f18:	4318      	orrs	r0, r3
    2f1a:	2208      	movs	r2, #8
    2f1c:	a901      	add	r1, sp, #4
    2f1e:	4b26      	ldr	r3, [pc, #152]	; (2fb8 <nm_get_firmware_full_info+0xd8>)
    2f20:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    2f22:	2800      	cmp	r0, #0
    2f24:	d12f      	bne.n	2f86 <nm_get_firmware_full_info+0xa6>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    2f26:	9b02      	ldr	r3, [sp, #8]
    2f28:	0418      	lsls	r0, r3, #16
    2f2a:	0c00      	lsrs	r0, r0, #16
    2f2c:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    2f2e:	d02f      	beq.n	2f90 <nm_get_firmware_full_info+0xb0>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2f30:	23c0      	movs	r3, #192	; 0xc0
    2f32:	029b      	lsls	r3, r3, #10
    2f34:	4318      	orrs	r0, r3
    2f36:	2228      	movs	r2, #40	; 0x28
    2f38:	0021      	movs	r1, r4
    2f3a:	4b1f      	ldr	r3, [pc, #124]	; (2fb8 <nm_get_firmware_full_info+0xd8>)
    2f3c:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    2f3e:	2800      	cmp	r0, #0
    2f40:	d121      	bne.n	2f86 <nm_get_firmware_full_info+0xa6>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    2f42:	7921      	ldrb	r1, [r4, #4]
    2f44:	0209      	lsls	r1, r1, #8
    2f46:	79a2      	ldrb	r2, [r4, #6]
    2f48:	230f      	movs	r3, #15
    2f4a:	401a      	ands	r2, r3
    2f4c:	430a      	orrs	r2, r1
    2f4e:	7961      	ldrb	r1, [r4, #5]
    2f50:	0109      	lsls	r1, r1, #4
    2f52:	25ff      	movs	r5, #255	; 0xff
    2f54:	4029      	ands	r1, r5
    2f56:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2f58:	79e1      	ldrb	r1, [r4, #7]
    2f5a:	0209      	lsls	r1, r1, #8
    2f5c:	7a66      	ldrb	r6, [r4, #9]
    2f5e:	4033      	ands	r3, r6
    2f60:	430b      	orrs	r3, r1
    2f62:	7a21      	ldrb	r1, [r4, #8]
    2f64:	0109      	lsls	r1, r1, #4
    2f66:	400d      	ands	r5, r1
    2f68:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2f6a:	2a00      	cmp	r2, #0
    2f6c:	d013      	beq.n	2f96 <nm_get_firmware_full_info+0xb6>
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d014      	beq.n	2f9c <nm_get_firmware_full_info+0xbc>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    2f72:	4912      	ldr	r1, [pc, #72]	; (2fbc <nm_get_firmware_full_info+0xdc>)
    2f74:	428b      	cmp	r3, r1
    2f76:	d814      	bhi.n	2fa2 <nm_get_firmware_full_info+0xc2>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    2f78:	239b      	movs	r3, #155	; 0x9b
    2f7a:	015b      	lsls	r3, r3, #5
    2f7c:	429a      	cmp	r2, r3
    2f7e:	d802      	bhi.n	2f86 <nm_get_firmware_full_info+0xa6>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    2f80:	380d      	subs	r0, #13
    2f82:	e000      	b.n	2f86 <nm_get_firmware_full_info+0xa6>
	sint8	ret = M2M_SUCCESS;
    2f84:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    2f86:	b004      	add	sp, #16
    2f88:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    2f8a:	200c      	movs	r0, #12
    2f8c:	4240      	negs	r0, r0
    2f8e:	e7fa      	b.n	2f86 <nm_get_firmware_full_info+0xa6>
						ret = M2M_ERR_FAIL;
    2f90:	200c      	movs	r0, #12
    2f92:	4240      	negs	r0, r0
    2f94:	e7f7      	b.n	2f86 <nm_get_firmware_full_info+0xa6>
								ret = M2M_ERR_FAIL;
    2f96:	200c      	movs	r0, #12
    2f98:	4240      	negs	r0, r0
    2f9a:	e7f4      	b.n	2f86 <nm_get_firmware_full_info+0xa6>
    2f9c:	200c      	movs	r0, #12
    2f9e:	4240      	negs	r0, r0
    2fa0:	e7f1      	b.n	2f86 <nm_get_firmware_full_info+0xa6>
								ret = M2M_ERR_FW_VER_MISMATCH;
    2fa2:	200d      	movs	r0, #13
    2fa4:	4240      	negs	r0, r0
    2fa6:	e7ee      	b.n	2f86 <nm_get_firmware_full_info+0xa6>
    2fa8:	00007499 	.word	0x00007499
    2fac:	000010e1 	.word	0x000010e1
    2fb0:	000c0008 	.word	0x000c0008
    2fb4:	00002df9 	.word	0x00002df9
    2fb8:	00002e11 	.word	0x00002e11
    2fbc:	00001361 	.word	0x00001361

00002fc0 <nm_drv_init_hold>:
ERR1:
	return ret;
}

sint8 nm_drv_init_hold(void)
{
    2fc0:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	
	ret = nm_bus_iface_init(NULL);
    2fc2:	2000      	movs	r0, #0
    2fc4:	4b0f      	ldr	r3, [pc, #60]	; (3004 <nm_drv_init_hold+0x44>)
    2fc6:	4798      	blx	r3
    2fc8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2fca:	d10e      	bne.n	2fea <nm_drv_init_hold+0x2a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    2fcc:	480e      	ldr	r0, [pc, #56]	; (3008 <nm_drv_init_hold+0x48>)
    2fce:	4d0f      	ldr	r5, [pc, #60]	; (300c <nm_drv_init_hold+0x4c>)
    2fd0:	47a8      	blx	r5
    2fd2:	4b0f      	ldr	r3, [pc, #60]	; (3010 <nm_drv_init_hold+0x50>)
    2fd4:	4798      	blx	r3
    2fd6:	0001      	movs	r1, r0
    2fd8:	480e      	ldr	r0, [pc, #56]	; (3014 <nm_drv_init_hold+0x54>)
    2fda:	47a8      	blx	r5
    2fdc:	200d      	movs	r0, #13
    2fde:	4b0e      	ldr	r3, [pc, #56]	; (3018 <nm_drv_init_hold+0x58>)
    2fe0:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2fe2:	4b0e      	ldr	r3, [pc, #56]	; (301c <nm_drv_init_hold+0x5c>)
    2fe4:	4798      	blx	r3
ERR2:
	nm_bus_iface_deinit();
#endif
ERR1:
	return ret;
}
    2fe6:	0020      	movs	r0, r4
    2fe8:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("[nmi start]: fail init bus\n");
    2fea:	2286      	movs	r2, #134	; 0x86
    2fec:	0052      	lsls	r2, r2, #1
    2fee:	490c      	ldr	r1, [pc, #48]	; (3020 <nm_drv_init_hold+0x60>)
    2ff0:	480c      	ldr	r0, [pc, #48]	; (3024 <nm_drv_init_hold+0x64>)
    2ff2:	4b06      	ldr	r3, [pc, #24]	; (300c <nm_drv_init_hold+0x4c>)
    2ff4:	4798      	blx	r3
    2ff6:	480c      	ldr	r0, [pc, #48]	; (3028 <nm_drv_init_hold+0x68>)
    2ff8:	4b0c      	ldr	r3, [pc, #48]	; (302c <nm_drv_init_hold+0x6c>)
    2ffa:	4798      	blx	r3
    2ffc:	200d      	movs	r0, #13
    2ffe:	4b06      	ldr	r3, [pc, #24]	; (3018 <nm_drv_init_hold+0x58>)
    3000:	4798      	blx	r3
	return ret;
    3002:	e7f0      	b.n	2fe6 <nm_drv_init_hold+0x26>
    3004:	00002dc9 	.word	0x00002dc9
    3008:	00008cc0 	.word	0x00008cc0
    300c:	000075f9 	.word	0x000075f9
    3010:	0000287d 	.word	0x0000287d
    3014:	0000908c 	.word	0x0000908c
    3018:	0000762d 	.word	0x0000762d
    301c:	00003825 	.word	0x00003825
    3020:	00008fd8 	.word	0x00008fd8
    3024:	00008920 	.word	0x00008920
    3028:	00009070 	.word	0x00009070
    302c:	00007715 	.word	0x00007715

00003030 <nm_drv_init_start>:

sint8 nm_drv_init_start(void * arg)
{
    3030:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;

	if(NULL != arg) {
    3032:	2800      	cmp	r0, #0
    3034:	d027      	beq.n	3086 <nm_drv_init_start+0x56>
		u8Mode = *((uint8 *)arg);
    3036:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    3038:	1e6b      	subs	r3, r5, #1
    303a:	2b03      	cmp	r3, #3
    303c:	d900      	bls.n	3040 <nm_drv_init_start+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    303e:	2501      	movs	r5, #1
		}
	}

	ret = wait_for_bootrom(u8Mode);
    3040:	0028      	movs	r0, r5
    3042:	4b12      	ldr	r3, [pc, #72]	; (308c <nm_drv_init_start+0x5c>)
    3044:	4798      	blx	r3
    3046:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    3048:	d117      	bne.n	307a <nm_drv_init_start+0x4a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    304a:	0028      	movs	r0, r5
    304c:	4b10      	ldr	r3, [pc, #64]	; (3090 <nm_drv_init_start+0x60>)
    304e:	4798      	blx	r3
    3050:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    3052:	d112      	bne.n	307a <nm_drv_init_start+0x4a>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    3054:	3d02      	subs	r5, #2
    3056:	2d01      	cmp	r5, #1
    3058:	d913      	bls.n	3082 <nm_drv_init_start+0x52>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    305a:	4b0e      	ldr	r3, [pc, #56]	; (3094 <nm_drv_init_start+0x64>)
    305c:	4798      	blx	r3
    305e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    3060:	d00f      	beq.n	3082 <nm_drv_init_start+0x52>
		M2M_ERR("failed to enable interrupts..\n");
    3062:	22a8      	movs	r2, #168	; 0xa8
    3064:	0052      	lsls	r2, r2, #1
    3066:	490c      	ldr	r1, [pc, #48]	; (3098 <nm_drv_init_start+0x68>)
    3068:	480c      	ldr	r0, [pc, #48]	; (309c <nm_drv_init_start+0x6c>)
    306a:	4b0d      	ldr	r3, [pc, #52]	; (30a0 <nm_drv_init_start+0x70>)
    306c:	4798      	blx	r3
    306e:	480d      	ldr	r0, [pc, #52]	; (30a4 <nm_drv_init_start+0x74>)
    3070:	4b0d      	ldr	r3, [pc, #52]	; (30a8 <nm_drv_init_start+0x78>)
    3072:	4798      	blx	r3
    3074:	200d      	movs	r0, #13
    3076:	4b0d      	ldr	r3, [pc, #52]	; (30ac <nm_drv_init_start+0x7c>)
    3078:	4798      	blx	r3
		goto ERR2;
	}

	return ret;
ERR2:
	nm_bus_iface_deinit();
    307a:	4b0d      	ldr	r3, [pc, #52]	; (30b0 <nm_drv_init_start+0x80>)
    307c:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	nm_spi_deinit();
    307e:	4b0d      	ldr	r3, [pc, #52]	; (30b4 <nm_drv_init_start+0x84>)
    3080:	4798      	blx	r3
#endif
ERR1:
	return ret;
}
    3082:	0020      	movs	r0, r4
    3084:	bd70      	pop	{r4, r5, r6, pc}
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
    3086:	2501      	movs	r5, #1
    3088:	e7da      	b.n	3040 <nm_drv_init_start+0x10>
    308a:	46c0      	nop			; (mov r8, r8)
    308c:	00002a91 	.word	0x00002a91
    3090:	00002bc1 	.word	0x00002bc1
    3094:	00002821 	.word	0x00002821
    3098:	00008fec 	.word	0x00008fec
    309c:	00008920 	.word	0x00008920
    30a0:	000075f9 	.word	0x000075f9
    30a4:	0000909c 	.word	0x0000909c
    30a8:	00007715 	.word	0x00007715
    30ac:	0000762d 	.word	0x0000762d
    30b0:	00002dd5 	.word	0x00002dd5
    30b4:	000037d1 	.word	0x000037d1

000030b8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    30b8:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    30ba:	4b1c      	ldr	r3, [pc, #112]	; (312c <nm_drv_deinit+0x74>)
    30bc:	4798      	blx	r3
    30be:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    30c0:	d10b      	bne.n	30da <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    30c2:	2000      	movs	r0, #0
    30c4:	4b1a      	ldr	r3, [pc, #104]	; (3130 <nm_drv_deinit+0x78>)
    30c6:	4798      	blx	r3
    30c8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    30ca:	d114      	bne.n	30f6 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    30cc:	4b19      	ldr	r3, [pc, #100]	; (3134 <nm_drv_deinit+0x7c>)
    30ce:	4798      	blx	r3
    30d0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    30d2:	d11d      	bne.n	3110 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    30d4:	4b18      	ldr	r3, [pc, #96]	; (3138 <nm_drv_deinit+0x80>)
    30d6:	4798      	blx	r3
    30d8:	e00b      	b.n	30f2 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    30da:	2282      	movs	r2, #130	; 0x82
    30dc:	32ff      	adds	r2, #255	; 0xff
    30de:	4917      	ldr	r1, [pc, #92]	; (313c <nm_drv_deinit+0x84>)
    30e0:	4817      	ldr	r0, [pc, #92]	; (3140 <nm_drv_deinit+0x88>)
    30e2:	4b18      	ldr	r3, [pc, #96]	; (3144 <nm_drv_deinit+0x8c>)
    30e4:	4798      	blx	r3
    30e6:	4818      	ldr	r0, [pc, #96]	; (3148 <nm_drv_deinit+0x90>)
    30e8:	4b18      	ldr	r3, [pc, #96]	; (314c <nm_drv_deinit+0x94>)
    30ea:	4798      	blx	r3
    30ec:	200d      	movs	r0, #13
    30ee:	4b18      	ldr	r3, [pc, #96]	; (3150 <nm_drv_deinit+0x98>)
    30f0:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    30f2:	0020      	movs	r0, r4
    30f4:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    30f6:	22c4      	movs	r2, #196	; 0xc4
    30f8:	0052      	lsls	r2, r2, #1
    30fa:	4910      	ldr	r1, [pc, #64]	; (313c <nm_drv_deinit+0x84>)
    30fc:	4810      	ldr	r0, [pc, #64]	; (3140 <nm_drv_deinit+0x88>)
    30fe:	4b11      	ldr	r3, [pc, #68]	; (3144 <nm_drv_deinit+0x8c>)
    3100:	4798      	blx	r3
    3102:	4814      	ldr	r0, [pc, #80]	; (3154 <nm_drv_deinit+0x9c>)
    3104:	4b11      	ldr	r3, [pc, #68]	; (314c <nm_drv_deinit+0x94>)
    3106:	4798      	blx	r3
    3108:	200d      	movs	r0, #13
    310a:	4b11      	ldr	r3, [pc, #68]	; (3150 <nm_drv_deinit+0x98>)
    310c:	4798      	blx	r3
		goto ERR1;
    310e:	e7f0      	b.n	30f2 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    3110:	22c7      	movs	r2, #199	; 0xc7
    3112:	0052      	lsls	r2, r2, #1
    3114:	4909      	ldr	r1, [pc, #36]	; (313c <nm_drv_deinit+0x84>)
    3116:	480a      	ldr	r0, [pc, #40]	; (3140 <nm_drv_deinit+0x88>)
    3118:	4b0a      	ldr	r3, [pc, #40]	; (3144 <nm_drv_deinit+0x8c>)
    311a:	4798      	blx	r3
    311c:	480e      	ldr	r0, [pc, #56]	; (3158 <nm_drv_deinit+0xa0>)
    311e:	4b0b      	ldr	r3, [pc, #44]	; (314c <nm_drv_deinit+0x94>)
    3120:	4798      	blx	r3
    3122:	200d      	movs	r0, #13
    3124:	4b0a      	ldr	r3, [pc, #40]	; (3150 <nm_drv_deinit+0x98>)
    3126:	4798      	blx	r3
		goto ERR1;
    3128:	e7e3      	b.n	30f2 <nm_drv_deinit+0x3a>
    312a:	46c0      	nop			; (mov r8, r8)
    312c:	00002c39 	.word	0x00002c39
    3130:	0000469d 	.word	0x0000469d
    3134:	00002dd5 	.word	0x00002dd5
    3138:	000037d1 	.word	0x000037d1
    313c:	00009000 	.word	0x00009000
    3140:	00008920 	.word	0x00008920
    3144:	000075f9 	.word	0x000075f9
    3148:	00009010 	.word	0x00009010
    314c:	00007715 	.word	0x00007715
    3150:	0000762d 	.word	0x0000762d
    3154:	00009030 	.word	0x00009030
    3158:	00009054 	.word	0x00009054

0000315c <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    315c:	b500      	push	{lr}
    315e:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    3160:	ab01      	add	r3, sp, #4
    3162:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    3164:	2200      	movs	r2, #0
    3166:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    3168:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    316a:	0019      	movs	r1, r3
    316c:	2003      	movs	r0, #3
    316e:	4b02      	ldr	r3, [pc, #8]	; (3178 <nmi_spi_write+0x1c>)
    3170:	4798      	blx	r3
}
    3172:	b005      	add	sp, #20
    3174:	bd00      	pop	{pc}
    3176:	46c0      	nop			; (mov r8, r8)
    3178:	00001009 	.word	0x00001009

0000317c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    317c:	b570      	push	{r4, r5, r6, lr}
    317e:	b084      	sub	sp, #16
    3180:	ac08      	add	r4, sp, #32
    3182:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    3184:	ac01      	add	r4, sp, #4
    3186:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    3188:	303f      	adds	r0, #63	; 0x3f
    318a:	b2c4      	uxtb	r4, r0
    318c:	2c0e      	cmp	r4, #14
    318e:	d900      	bls.n	3192 <spi_cmd+0x16>
    3190:	e084      	b.n	329c <spi_cmd+0x120>
    3192:	00a0      	lsls	r0, r4, #2
    3194:	4c4f      	ldr	r4, [pc, #316]	; (32d4 <spi_cmd+0x158>)
    3196:	5820      	ldr	r0, [r4, r0]
    3198:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    319a:	ab01      	add	r3, sp, #4
    319c:	0c0a      	lsrs	r2, r1, #16
    319e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    31a0:	0a0a      	lsrs	r2, r1, #8
    31a2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    31a4:	70d9      	strb	r1, [r3, #3]
		len = 5;
    31a6:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    31a8:	4b4b      	ldr	r3, [pc, #300]	; (32d8 <spi_cmd+0x15c>)
    31aa:	781b      	ldrb	r3, [r3, #0]
    31ac:	2b00      	cmp	r3, #0
    31ae:	d077      	beq.n	32a0 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    31b0:	3901      	subs	r1, #1
    31b2:	b2c9      	uxtb	r1, r1
    31b4:	e083      	b.n	32be <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    31b6:	0a0b      	lsrs	r3, r1, #8
    31b8:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    31ba:	2d00      	cmp	r5, #0
    31bc:	d107      	bne.n	31ce <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    31be:	aa01      	add	r2, sp, #4
    31c0:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    31c2:	ab01      	add	r3, sp, #4
    31c4:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    31c6:	2200      	movs	r2, #0
    31c8:	70da      	strb	r2, [r3, #3]
		len = 5;
    31ca:	2105      	movs	r1, #5
		break;
    31cc:	e7ec      	b.n	31a8 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    31ce:	2280      	movs	r2, #128	; 0x80
    31d0:	4252      	negs	r2, r2
    31d2:	4313      	orrs	r3, r2
    31d4:	aa01      	add	r2, sp, #4
    31d6:	7053      	strb	r3, [r2, #1]
    31d8:	e7f3      	b.n	31c2 <spi_cmd+0x46>
		bc[1] = 0x00;
    31da:	ab01      	add	r3, sp, #4
    31dc:	2200      	movs	r2, #0
    31de:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    31e0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    31e2:	70da      	strb	r2, [r3, #3]
		len = 5;
    31e4:	2105      	movs	r1, #5
		break;
    31e6:	e7df      	b.n	31a8 <spi_cmd+0x2c>
		bc[1] = 0x00;
    31e8:	ab01      	add	r3, sp, #4
    31ea:	2200      	movs	r2, #0
    31ec:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    31ee:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    31f0:	70da      	strb	r2, [r3, #3]
		len = 5;
    31f2:	2105      	movs	r1, #5
		break;
    31f4:	e7d8      	b.n	31a8 <spi_cmd+0x2c>
		bc[1] = 0xff;
    31f6:	ab01      	add	r3, sp, #4
    31f8:	22ff      	movs	r2, #255	; 0xff
    31fa:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    31fc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    31fe:	70da      	strb	r2, [r3, #3]
		len = 5;
    3200:	2105      	movs	r1, #5
		break;
    3202:	e7d1      	b.n	31a8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    3204:	aa01      	add	r2, sp, #4
    3206:	0c08      	lsrs	r0, r1, #16
    3208:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    320a:	0a08      	lsrs	r0, r1, #8
    320c:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    320e:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    3210:	0a19      	lsrs	r1, r3, #8
    3212:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    3214:	7153      	strb	r3, [r2, #5]
		len = 7;
    3216:	2107      	movs	r1, #7
		break;
    3218:	e7c6      	b.n	31a8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    321a:	aa01      	add	r2, sp, #4
    321c:	0c08      	lsrs	r0, r1, #16
    321e:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    3220:	0a08      	lsrs	r0, r1, #8
    3222:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    3224:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    3226:	0c19      	lsrs	r1, r3, #16
    3228:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    322a:	0a19      	lsrs	r1, r3, #8
    322c:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    322e:	7193      	strb	r3, [r2, #6]
		len = 8;
    3230:	2108      	movs	r1, #8
		break;
    3232:	e7b9      	b.n	31a8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    3234:	0a0b      	lsrs	r3, r1, #8
    3236:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    3238:	2d00      	cmp	r5, #0
    323a:	d10c      	bne.n	3256 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    323c:	a801      	add	r0, sp, #4
    323e:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    3240:	ab01      	add	r3, sp, #4
    3242:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    3244:	0e11      	lsrs	r1, r2, #24
    3246:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    3248:	0c11      	lsrs	r1, r2, #16
    324a:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    324c:	0a11      	lsrs	r1, r2, #8
    324e:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    3250:	719a      	strb	r2, [r3, #6]
		len = 8;
    3252:	2108      	movs	r1, #8
		break;
    3254:	e7a8      	b.n	31a8 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    3256:	2080      	movs	r0, #128	; 0x80
    3258:	4240      	negs	r0, r0
    325a:	4303      	orrs	r3, r0
    325c:	a801      	add	r0, sp, #4
    325e:	7043      	strb	r3, [r0, #1]
    3260:	e7ee      	b.n	3240 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    3262:	ab01      	add	r3, sp, #4
    3264:	0c08      	lsrs	r0, r1, #16
    3266:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3268:	0a08      	lsrs	r0, r1, #8
    326a:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    326c:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    326e:	0e11      	lsrs	r1, r2, #24
    3270:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    3272:	0c11      	lsrs	r1, r2, #16
    3274:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    3276:	0a11      	lsrs	r1, r2, #8
    3278:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    327a:	71da      	strb	r2, [r3, #7]
		len = 9;
    327c:	2109      	movs	r1, #9
		break;
    327e:	e793      	b.n	31a8 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    3280:	2290      	movs	r2, #144	; 0x90
    3282:	0052      	lsls	r2, r2, #1
    3284:	4915      	ldr	r1, [pc, #84]	; (32dc <spi_cmd+0x160>)
    3286:	4816      	ldr	r0, [pc, #88]	; (32e0 <spi_cmd+0x164>)
    3288:	4b16      	ldr	r3, [pc, #88]	; (32e4 <spi_cmd+0x168>)
    328a:	4798      	blx	r3
    328c:	4816      	ldr	r0, [pc, #88]	; (32e8 <spi_cmd+0x16c>)
    328e:	4b17      	ldr	r3, [pc, #92]	; (32ec <spi_cmd+0x170>)
    3290:	4798      	blx	r3
    3292:	200d      	movs	r0, #13
    3294:	4b16      	ldr	r3, [pc, #88]	; (32f0 <spi_cmd+0x174>)
    3296:	4798      	blx	r3
			result = N_FAIL;
    3298:	2300      	movs	r3, #0
    329a:	e017      	b.n	32cc <spi_cmd+0x150>
	switch (cmd) {
    329c:	2300      	movs	r3, #0
    329e:	e015      	b.n	32cc <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    32a0:	1e4e      	subs	r6, r1, #1
    32a2:	aa01      	add	r2, sp, #4
    32a4:	1995      	adds	r5, r2, r6
    32a6:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    32a8:	4c12      	ldr	r4, [pc, #72]	; (32f4 <spi_cmd+0x178>)
    32aa:	005b      	lsls	r3, r3, #1
    32ac:	7810      	ldrb	r0, [r2, #0]
    32ae:	4043      	eors	r3, r0
    32b0:	5ce3      	ldrb	r3, [r4, r3]
    32b2:	3201      	adds	r2, #1
	while (len--)
    32b4:	42aa      	cmp	r2, r5
    32b6:	d1f8      	bne.n	32aa <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    32b8:	005b      	lsls	r3, r3, #1
    32ba:	aa01      	add	r2, sp, #4
    32bc:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    32be:	b289      	uxth	r1, r1
    32c0:	a801      	add	r0, sp, #4
    32c2:	4b0d      	ldr	r3, [pc, #52]	; (32f8 <spi_cmd+0x17c>)
    32c4:	4798      	blx	r3
    32c6:	2301      	movs	r3, #1
    32c8:	2800      	cmp	r0, #0
    32ca:	d1d9      	bne.n	3280 <spi_cmd+0x104>
		}
	}

	return result;
}
    32cc:	0018      	movs	r0, r3
    32ce:	b004      	add	sp, #16
    32d0:	bd70      	pop	{r4, r5, r6, pc}
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	000090bc 	.word	0x000090bc
    32d8:	200002b4 	.word	0x200002b4
    32dc:	000090fc 	.word	0x000090fc
    32e0:	00008920 	.word	0x00008920
    32e4:	000075f9 	.word	0x000075f9
    32e8:	0000958c 	.word	0x0000958c
    32ec:	00007715 	.word	0x00007715
    32f0:	0000762d 	.word	0x0000762d
    32f4:	00009188 	.word	0x00009188
    32f8:	0000315d 	.word	0x0000315d

000032fc <nmi_spi_read>:
{
    32fc:	b500      	push	{lr}
    32fe:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    3300:	ab01      	add	r3, sp, #4
    3302:	2200      	movs	r2, #0
    3304:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    3306:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    3308:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    330a:	0019      	movs	r1, r3
    330c:	2003      	movs	r0, #3
    330e:	4b02      	ldr	r3, [pc, #8]	; (3318 <nmi_spi_read+0x1c>)
    3310:	4798      	blx	r3
}
    3312:	b005      	add	sp, #20
    3314:	bd00      	pop	{pc}
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	00001009 	.word	0x00001009

0000331c <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    331c:	b5f0      	push	{r4, r5, r6, r7, lr}
    331e:	46c6      	mov	lr, r8
    3320:	b500      	push	{lr}
    3322:	b082      	sub	sp, #8
    3324:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    3326:	28cf      	cmp	r0, #207	; 0xcf
    3328:	d02b      	beq.n	3382 <spi_cmd_rsp+0x66>
    332a:	0003      	movs	r3, r0
    332c:	333b      	adds	r3, #59	; 0x3b
    332e:	b2db      	uxtb	r3, r3
    3330:	2b01      	cmp	r3, #1
    3332:	d926      	bls.n	3382 <spi_cmd_rsp+0x66>
{
    3334:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3336:	466b      	mov	r3, sp
    3338:	1dde      	adds	r6, r3, #7
    333a:	4b26      	ldr	r3, [pc, #152]	; (33d4 <spi_cmd_rsp+0xb8>)
    333c:	4698      	mov	r8, r3
    333e:	2101      	movs	r1, #1
    3340:	0030      	movs	r0, r6
    3342:	47c0      	blx	r8
    3344:	1e05      	subs	r5, r0, #0
    3346:	d125      	bne.n	3394 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    3348:	7833      	ldrb	r3, [r6, #0]
    334a:	42bb      	cmp	r3, r7
    334c:	d030      	beq.n	33b0 <spi_cmd_rsp+0x94>
    334e:	3c01      	subs	r4, #1
    3350:	b2e4      	uxtb	r4, r4
    3352:	2c00      	cmp	r4, #0
    3354:	d1f3      	bne.n	333e <spi_cmd_rsp+0x22>
    3356:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3358:	466b      	mov	r3, sp
    335a:	1dde      	adds	r6, r3, #7
    335c:	4f1d      	ldr	r7, [pc, #116]	; (33d4 <spi_cmd_rsp+0xb8>)
    335e:	2101      	movs	r1, #1
    3360:	0030      	movs	r0, r6
    3362:	47b8      	blx	r7
    3364:	2800      	cmp	r0, #0
    3366:	d125      	bne.n	33b4 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    3368:	7833      	ldrb	r3, [r6, #0]
    336a:	2b00      	cmp	r3, #0
    336c:	d02f      	beq.n	33ce <spi_cmd_rsp+0xb2>
    336e:	3c01      	subs	r4, #1
    3370:	b2e4      	uxtb	r4, r4
    3372:	2c00      	cmp	r4, #0
    3374:	d1f3      	bne.n	335e <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    3376:	2501      	movs	r5, #1

_fail_:

	return result;
}
    3378:	0028      	movs	r0, r5
    337a:	b002      	add	sp, #8
    337c:	bc04      	pop	{r2}
    337e:	4690      	mov	r8, r2
    3380:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3382:	2101      	movs	r1, #1
    3384:	466b      	mov	r3, sp
    3386:	1dd8      	adds	r0, r3, #7
    3388:	4b12      	ldr	r3, [pc, #72]	; (33d4 <spi_cmd_rsp+0xb8>)
    338a:	4798      	blx	r3
			result = N_FAIL;
    338c:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    338e:	2800      	cmp	r0, #0
    3390:	d0d0      	beq.n	3334 <spi_cmd_rsp+0x18>
    3392:	e7f1      	b.n	3378 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3394:	225c      	movs	r2, #92	; 0x5c
    3396:	32ff      	adds	r2, #255	; 0xff
    3398:	490f      	ldr	r1, [pc, #60]	; (33d8 <spi_cmd_rsp+0xbc>)
    339a:	4810      	ldr	r0, [pc, #64]	; (33dc <spi_cmd_rsp+0xc0>)
    339c:	4b10      	ldr	r3, [pc, #64]	; (33e0 <spi_cmd_rsp+0xc4>)
    339e:	4798      	blx	r3
    33a0:	4810      	ldr	r0, [pc, #64]	; (33e4 <spi_cmd_rsp+0xc8>)
    33a2:	4b11      	ldr	r3, [pc, #68]	; (33e8 <spi_cmd_rsp+0xcc>)
    33a4:	4798      	blx	r3
    33a6:	200d      	movs	r0, #13
    33a8:	4b10      	ldr	r3, [pc, #64]	; (33ec <spi_cmd_rsp+0xd0>)
    33aa:	4798      	blx	r3
			result = N_FAIL;
    33ac:	2500      	movs	r5, #0
			goto _fail_;
    33ae:	e7e3      	b.n	3378 <spi_cmd_rsp+0x5c>
    33b0:	240b      	movs	r4, #11
    33b2:	e7d1      	b.n	3358 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    33b4:	226a      	movs	r2, #106	; 0x6a
    33b6:	32ff      	adds	r2, #255	; 0xff
    33b8:	4907      	ldr	r1, [pc, #28]	; (33d8 <spi_cmd_rsp+0xbc>)
    33ba:	4808      	ldr	r0, [pc, #32]	; (33dc <spi_cmd_rsp+0xc0>)
    33bc:	4b08      	ldr	r3, [pc, #32]	; (33e0 <spi_cmd_rsp+0xc4>)
    33be:	4798      	blx	r3
    33c0:	4808      	ldr	r0, [pc, #32]	; (33e4 <spi_cmd_rsp+0xc8>)
    33c2:	4b09      	ldr	r3, [pc, #36]	; (33e8 <spi_cmd_rsp+0xcc>)
    33c4:	4798      	blx	r3
    33c6:	200d      	movs	r0, #13
    33c8:	4b08      	ldr	r3, [pc, #32]	; (33ec <spi_cmd_rsp+0xd0>)
    33ca:	4798      	blx	r3
			goto _fail_;
    33cc:	e7d4      	b.n	3378 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    33ce:	2501      	movs	r5, #1
    33d0:	e7d2      	b.n	3378 <spi_cmd_rsp+0x5c>
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	000032fd 	.word	0x000032fd
    33d8:	00009114 	.word	0x00009114
    33dc:	00008920 	.word	0x00008920
    33e0:	000075f9 	.word	0x000075f9
    33e4:	000095b8 	.word	0x000095b8
    33e8:	00007715 	.word	0x00007715
    33ec:	0000762d 	.word	0x0000762d

000033f0 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    33f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    33f2:	46de      	mov	lr, fp
    33f4:	4657      	mov	r7, sl
    33f6:	464e      	mov	r6, r9
    33f8:	4645      	mov	r5, r8
    33fa:	b5e0      	push	{r5, r6, r7, lr}
    33fc:	b087      	sub	sp, #28
    33fe:	9001      	str	r0, [sp, #4]
    3400:	4689      	mov	r9, r1
    3402:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3404:	2300      	movs	r3, #0
    3406:	469a      	mov	sl, r3
    3408:	2380      	movs	r3, #128	; 0x80
    340a:	019b      	lsls	r3, r3, #6
    340c:	469b      	mov	fp, r3
    340e:	466a      	mov	r2, sp
    3410:	81d3      	strh	r3, [r2, #14]
		/**
			Data Response header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3412:	4b3c      	ldr	r3, [pc, #240]	; (3504 <spi_data_read+0x114>)
    3414:	4698      	mov	r8, r3
    3416:	e02f      	b.n	3478 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    3418:	22be      	movs	r2, #190	; 0xbe
    341a:	0092      	lsls	r2, r2, #2
    341c:	493a      	ldr	r1, [pc, #232]	; (3508 <spi_data_read+0x118>)
    341e:	483b      	ldr	r0, [pc, #236]	; (350c <spi_data_read+0x11c>)
    3420:	4b3b      	ldr	r3, [pc, #236]	; (3510 <spi_data_read+0x120>)
    3422:	4798      	blx	r3
    3424:	483b      	ldr	r0, [pc, #236]	; (3514 <spi_data_read+0x124>)
    3426:	4b3c      	ldr	r3, [pc, #240]	; (3518 <spi_data_read+0x128>)
    3428:	4798      	blx	r3
    342a:	200d      	movs	r0, #13
    342c:	4b3b      	ldr	r3, [pc, #236]	; (351c <spi_data_read+0x12c>)
    342e:	4798      	blx	r3
    3430:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    3432:	0028      	movs	r0, r5
    3434:	b007      	add	sp, #28
    3436:	bc3c      	pop	{r2, r3, r4, r5}
    3438:	4690      	mov	r8, r2
    343a:	4699      	mov	r9, r3
    343c:	46a2      	mov	sl, r4
    343e:	46ab      	mov	fp, r5
    3440:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    3442:	2c00      	cmp	r4, #0
    3444:	dd2e      	ble.n	34a4 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    3446:	9b01      	ldr	r3, [sp, #4]
    3448:	4453      	add	r3, sl
    344a:	0018      	movs	r0, r3
    344c:	0039      	movs	r1, r7
    344e:	4b2d      	ldr	r3, [pc, #180]	; (3504 <spi_data_read+0x114>)
    3450:	4798      	blx	r3
    3452:	1e04      	subs	r4, r0, #0
    3454:	d134      	bne.n	34c0 <spi_data_read+0xd0>
		if(!clockless)
    3456:	9b02      	ldr	r3, [sp, #8]
    3458:	2b00      	cmp	r3, #0
    345a:	d103      	bne.n	3464 <spi_data_read+0x74>
			if (!gu8Crc_off) {
    345c:	4b30      	ldr	r3, [pc, #192]	; (3520 <spi_data_read+0x130>)
    345e:	781b      	ldrb	r3, [r3, #0]
    3460:	2b00      	cmp	r3, #0
    3462:	d039      	beq.n	34d8 <spi_data_read+0xe8>
		ix += nbytes;
    3464:	4653      	mov	r3, sl
    3466:	18fb      	adds	r3, r7, r3
    3468:	b21b      	sxth	r3, r3
    346a:	469a      	mov	sl, r3
		sz -= nbytes;
    346c:	464b      	mov	r3, r9
    346e:	1bdf      	subs	r7, r3, r7
    3470:	b2bb      	uxth	r3, r7
    3472:	4699      	mov	r9, r3
	} while (sz);
    3474:	2b00      	cmp	r3, #0
    3476:	d043      	beq.n	3500 <spi_data_read+0x110>
    3478:	464f      	mov	r7, r9
    347a:	45d9      	cmp	r9, fp
    347c:	d901      	bls.n	3482 <spi_data_read+0x92>
    347e:	466b      	mov	r3, sp
    3480:	89df      	ldrh	r7, [r3, #14]
    3482:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    3484:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3486:	ab04      	add	r3, sp, #16
    3488:	1cde      	adds	r6, r3, #3
    348a:	2101      	movs	r1, #1
    348c:	0030      	movs	r0, r6
    348e:	47c0      	blx	r8
    3490:	1e05      	subs	r5, r0, #0
    3492:	d1c1      	bne.n	3418 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    3494:	7833      	ldrb	r3, [r6, #0]
    3496:	091b      	lsrs	r3, r3, #4
    3498:	2b0f      	cmp	r3, #15
    349a:	d0d2      	beq.n	3442 <spi_data_read+0x52>
    349c:	3c01      	subs	r4, #1
    349e:	b224      	sxth	r4, r4
		} while (retry--);
    34a0:	1c63      	adds	r3, r4, #1
    34a2:	d1f2      	bne.n	348a <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    34a4:	22c1      	movs	r2, #193	; 0xc1
    34a6:	0092      	lsls	r2, r2, #2
    34a8:	4917      	ldr	r1, [pc, #92]	; (3508 <spi_data_read+0x118>)
    34aa:	4818      	ldr	r0, [pc, #96]	; (350c <spi_data_read+0x11c>)
    34ac:	4c18      	ldr	r4, [pc, #96]	; (3510 <spi_data_read+0x120>)
    34ae:	47a0      	blx	r4
    34b0:	ab04      	add	r3, sp, #16
    34b2:	78d9      	ldrb	r1, [r3, #3]
    34b4:	481b      	ldr	r0, [pc, #108]	; (3524 <spi_data_read+0x134>)
    34b6:	47a0      	blx	r4
    34b8:	200d      	movs	r0, #13
    34ba:	4b18      	ldr	r3, [pc, #96]	; (351c <spi_data_read+0x12c>)
    34bc:	4798      	blx	r3
			break;
    34be:	e7b8      	b.n	3432 <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    34c0:	4a19      	ldr	r2, [pc, #100]	; (3528 <spi_data_read+0x138>)
    34c2:	4911      	ldr	r1, [pc, #68]	; (3508 <spi_data_read+0x118>)
    34c4:	4811      	ldr	r0, [pc, #68]	; (350c <spi_data_read+0x11c>)
    34c6:	4b12      	ldr	r3, [pc, #72]	; (3510 <spi_data_read+0x120>)
    34c8:	4798      	blx	r3
    34ca:	4818      	ldr	r0, [pc, #96]	; (352c <spi_data_read+0x13c>)
    34cc:	4b12      	ldr	r3, [pc, #72]	; (3518 <spi_data_read+0x128>)
    34ce:	4798      	blx	r3
    34d0:	200d      	movs	r0, #13
    34d2:	4b12      	ldr	r3, [pc, #72]	; (351c <spi_data_read+0x12c>)
    34d4:	4798      	blx	r3
			break;
    34d6:	e7ac      	b.n	3432 <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    34d8:	2102      	movs	r1, #2
    34da:	a805      	add	r0, sp, #20
    34dc:	4b09      	ldr	r3, [pc, #36]	; (3504 <spi_data_read+0x114>)
    34de:	4798      	blx	r3
    34e0:	2800      	cmp	r0, #0
    34e2:	d0bf      	beq.n	3464 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    34e4:	22c6      	movs	r2, #198	; 0xc6
    34e6:	0092      	lsls	r2, r2, #2
    34e8:	4907      	ldr	r1, [pc, #28]	; (3508 <spi_data_read+0x118>)
    34ea:	4808      	ldr	r0, [pc, #32]	; (350c <spi_data_read+0x11c>)
    34ec:	4b08      	ldr	r3, [pc, #32]	; (3510 <spi_data_read+0x120>)
    34ee:	4798      	blx	r3
    34f0:	480f      	ldr	r0, [pc, #60]	; (3530 <spi_data_read+0x140>)
    34f2:	4b09      	ldr	r3, [pc, #36]	; (3518 <spi_data_read+0x128>)
    34f4:	4798      	blx	r3
    34f6:	200d      	movs	r0, #13
    34f8:	4b08      	ldr	r3, [pc, #32]	; (351c <spi_data_read+0x12c>)
    34fa:	4798      	blx	r3
					result = N_FAIL;
    34fc:	0025      	movs	r5, r4
					break;
    34fe:	e798      	b.n	3432 <spi_data_read+0x42>
    3500:	2501      	movs	r5, #1
    3502:	e796      	b.n	3432 <spi_data_read+0x42>
    3504:	000032fd 	.word	0x000032fd
    3508:	00009120 	.word	0x00009120
    350c:	00008920 	.word	0x00008920
    3510:	000075f9 	.word	0x000075f9
    3514:	000095ec 	.word	0x000095ec
    3518:	00007715 	.word	0x00007715
    351c:	0000762d 	.word	0x0000762d
    3520:	200002b4 	.word	0x200002b4
    3524:	00009620 	.word	0x00009620
    3528:	0000030d 	.word	0x0000030d
    352c:	00009650 	.word	0x00009650
    3530:	00009680 	.word	0x00009680

00003534 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    3534:	b5f0      	push	{r4, r5, r6, r7, lr}
    3536:	46d6      	mov	lr, sl
    3538:	464f      	mov	r7, r9
    353a:	4646      	mov	r6, r8
    353c:	b5c0      	push	{r6, r7, lr}
    353e:	b086      	sub	sp, #24
    3540:	9003      	str	r0, [sp, #12]
    3542:	9104      	str	r1, [sp, #16]
    3544:	2830      	cmp	r0, #48	; 0x30
    3546:	d80f      	bhi.n	3568 <spi_write_reg+0x34>
    3548:	4b30      	ldr	r3, [pc, #192]	; (360c <spi_write_reg+0xd8>)
    354a:	781f      	ldrb	r7, [r3, #0]
    354c:	b2fb      	uxtb	r3, r7
    354e:	9305      	str	r3, [sp, #20]
    3550:	2300      	movs	r3, #0
    3552:	2230      	movs	r2, #48	; 0x30
    3554:	9903      	ldr	r1, [sp, #12]
    3556:	428a      	cmp	r2, r1
    3558:	415b      	adcs	r3, r3
    355a:	b2db      	uxtb	r3, r3
    355c:	469a      	mov	sl, r3
    355e:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3560:	4b2b      	ldr	r3, [pc, #172]	; (3610 <spi_write_reg+0xdc>)
    3562:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3564:	46d1      	mov	r9, sl
    3566:	e033      	b.n	35d0 <spi_write_reg+0x9c>
    3568:	4b2a      	ldr	r3, [pc, #168]	; (3614 <spi_write_reg+0xe0>)
    356a:	781f      	ldrb	r7, [r3, #0]
    356c:	e7ee      	b.n	354c <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    356e:	9805      	ldr	r0, [sp, #20]
    3570:	4b29      	ldr	r3, [pc, #164]	; (3618 <spi_write_reg+0xe4>)
    3572:	4798      	blx	r3
    3574:	0004      	movs	r4, r0
	if (result != N_OK) {
    3576:	2801      	cmp	r0, #1
    3578:	d041      	beq.n	35fe <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    357a:	4a28      	ldr	r2, [pc, #160]	; (361c <spi_write_reg+0xe8>)
    357c:	4928      	ldr	r1, [pc, #160]	; (3620 <spi_write_reg+0xec>)
    357e:	4829      	ldr	r0, [pc, #164]	; (3624 <spi_write_reg+0xf0>)
    3580:	4e29      	ldr	r6, [pc, #164]	; (3628 <spi_write_reg+0xf4>)
    3582:	47b0      	blx	r6
    3584:	9903      	ldr	r1, [sp, #12]
    3586:	4829      	ldr	r0, [pc, #164]	; (362c <spi_write_reg+0xf8>)
    3588:	47b0      	blx	r6
    358a:	200d      	movs	r0, #13
    358c:	4b28      	ldr	r3, [pc, #160]	; (3630 <spi_write_reg+0xfc>)
    358e:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    3590:	2001      	movs	r0, #1
    3592:	4e28      	ldr	r6, [pc, #160]	; (3634 <spi_write_reg+0x100>)
    3594:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3596:	2300      	movs	r3, #0
    3598:	9300      	str	r3, [sp, #0]
    359a:	2200      	movs	r2, #0
    359c:	2100      	movs	r1, #0
    359e:	20cf      	movs	r0, #207	; 0xcf
    35a0:	4f1b      	ldr	r7, [pc, #108]	; (3610 <spi_write_reg+0xdc>)
    35a2:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    35a4:	20cf      	movs	r0, #207	; 0xcf
    35a6:	4b1c      	ldr	r3, [pc, #112]	; (3618 <spi_write_reg+0xe4>)
    35a8:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    35aa:	22ea      	movs	r2, #234	; 0xea
    35ac:	0092      	lsls	r2, r2, #2
    35ae:	491c      	ldr	r1, [pc, #112]	; (3620 <spi_write_reg+0xec>)
    35b0:	481c      	ldr	r0, [pc, #112]	; (3624 <spi_write_reg+0xf0>)
    35b2:	4f1d      	ldr	r7, [pc, #116]	; (3628 <spi_write_reg+0xf4>)
    35b4:	47b8      	blx	r7
    35b6:	9b04      	ldr	r3, [sp, #16]
    35b8:	9a03      	ldr	r2, [sp, #12]
    35ba:	0029      	movs	r1, r5
    35bc:	481e      	ldr	r0, [pc, #120]	; (3638 <spi_write_reg+0x104>)
    35be:	47b8      	blx	r7
    35c0:	200d      	movs	r0, #13
    35c2:	4b1b      	ldr	r3, [pc, #108]	; (3630 <spi_write_reg+0xfc>)
    35c4:	4798      	blx	r3
		nm_bsp_sleep(1);
    35c6:	2001      	movs	r0, #1
    35c8:	47b0      	blx	r6
    35ca:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    35cc:	2d00      	cmp	r5, #0
    35ce:	d016      	beq.n	35fe <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    35d0:	464b      	mov	r3, r9
    35d2:	9300      	str	r3, [sp, #0]
    35d4:	2304      	movs	r3, #4
    35d6:	9a04      	ldr	r2, [sp, #16]
    35d8:	9f03      	ldr	r7, [sp, #12]
    35da:	0039      	movs	r1, r7
    35dc:	9805      	ldr	r0, [sp, #20]
    35de:	47c0      	blx	r8
    35e0:	0004      	movs	r4, r0
	if (result != N_OK) {
    35e2:	2801      	cmp	r0, #1
    35e4:	d0c3      	beq.n	356e <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    35e6:	4a15      	ldr	r2, [pc, #84]	; (363c <spi_write_reg+0x108>)
    35e8:	490d      	ldr	r1, [pc, #52]	; (3620 <spi_write_reg+0xec>)
    35ea:	480e      	ldr	r0, [pc, #56]	; (3624 <spi_write_reg+0xf0>)
    35ec:	4e0e      	ldr	r6, [pc, #56]	; (3628 <spi_write_reg+0xf4>)
    35ee:	47b0      	blx	r6
    35f0:	0039      	movs	r1, r7
    35f2:	4813      	ldr	r0, [pc, #76]	; (3640 <spi_write_reg+0x10c>)
    35f4:	47b0      	blx	r6
    35f6:	200d      	movs	r0, #13
    35f8:	4b0d      	ldr	r3, [pc, #52]	; (3630 <spi_write_reg+0xfc>)
    35fa:	4798      	blx	r3
		goto _FAIL_;
    35fc:	e7c8      	b.n	3590 <spi_write_reg+0x5c>
	}

	return result;
}
    35fe:	0020      	movs	r0, r4
    3600:	b006      	add	sp, #24
    3602:	bc1c      	pop	{r2, r3, r4}
    3604:	4690      	mov	r8, r2
    3606:	4699      	mov	r9, r3
    3608:	46a2      	mov	sl, r4
    360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    360c:	000090f8 	.word	0x000090f8
    3610:	0000317d 	.word	0x0000317d
    3614:	000090f9 	.word	0x000090f9
    3618:	0000331d 	.word	0x0000331d
    361c:	00000395 	.word	0x00000395
    3620:	00009140 	.word	0x00009140
    3624:	00008920 	.word	0x00008920
    3628:	000075f9 	.word	0x000075f9
    362c:	00009778 	.word	0x00009778
    3630:	0000762d 	.word	0x0000762d
    3634:	00000d41 	.word	0x00000d41
    3638:	000097b0 	.word	0x000097b0
    363c:	0000038f 	.word	0x0000038f
    3640:	0000974c 	.word	0x0000974c

00003644 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    3644:	b5f0      	push	{r4, r5, r6, r7, lr}
    3646:	46de      	mov	lr, fp
    3648:	4657      	mov	r7, sl
    364a:	464e      	mov	r6, r9
    364c:	4645      	mov	r5, r8
    364e:	b5e0      	push	{r5, r6, r7, lr}
    3650:	b087      	sub	sp, #28
    3652:	9002      	str	r0, [sp, #8]
    3654:	468b      	mov	fp, r1
    3656:	28ff      	cmp	r0, #255	; 0xff
    3658:	d80f      	bhi.n	367a <spi_read_reg+0x36>
    365a:	4b41      	ldr	r3, [pc, #260]	; (3760 <spi_read_reg+0x11c>)
    365c:	781f      	ldrb	r7, [r3, #0]
    365e:	b2fb      	uxtb	r3, r7
    3660:	9303      	str	r3, [sp, #12]
    3662:	2300      	movs	r3, #0
    3664:	22ff      	movs	r2, #255	; 0xff
    3666:	9902      	ldr	r1, [sp, #8]
    3668:	428a      	cmp	r2, r1
    366a:	415b      	adcs	r3, r3
    366c:	b2db      	uxtb	r3, r3
    366e:	469a      	mov	sl, r3
    3670:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    3672:	4b3c      	ldr	r3, [pc, #240]	; (3764 <spi_read_reg+0x120>)
    3674:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianness issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    3676:	46d1      	mov	r9, sl
    3678:	e031      	b.n	36de <spi_read_reg+0x9a>
    367a:	4b3b      	ldr	r3, [pc, #236]	; (3768 <spi_read_reg+0x124>)
    367c:	781f      	ldrb	r7, [r3, #0]
    367e:	e7ee      	b.n	365e <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    3680:	9803      	ldr	r0, [sp, #12]
    3682:	4b3a      	ldr	r3, [pc, #232]	; (376c <spi_read_reg+0x128>)
    3684:	4798      	blx	r3
    3686:	0004      	movs	r4, r0
	if (result != N_OK) {
    3688:	2801      	cmp	r0, #1
    368a:	d040      	beq.n	370e <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    368c:	4a38      	ldr	r2, [pc, #224]	; (3770 <spi_read_reg+0x12c>)
    368e:	4939      	ldr	r1, [pc, #228]	; (3774 <spi_read_reg+0x130>)
    3690:	4839      	ldr	r0, [pc, #228]	; (3778 <spi_read_reg+0x134>)
    3692:	4e3a      	ldr	r6, [pc, #232]	; (377c <spi_read_reg+0x138>)
    3694:	47b0      	blx	r6
    3696:	9902      	ldr	r1, [sp, #8]
    3698:	4839      	ldr	r0, [pc, #228]	; (3780 <spi_read_reg+0x13c>)
    369a:	47b0      	blx	r6
    369c:	200d      	movs	r0, #13
    369e:	4b39      	ldr	r3, [pc, #228]	; (3784 <spi_read_reg+0x140>)
    36a0:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    36a2:	2001      	movs	r0, #1
    36a4:	4e38      	ldr	r6, [pc, #224]	; (3788 <spi_read_reg+0x144>)
    36a6:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    36a8:	2300      	movs	r3, #0
    36aa:	9300      	str	r3, [sp, #0]
    36ac:	2200      	movs	r2, #0
    36ae:	2100      	movs	r1, #0
    36b0:	20cf      	movs	r0, #207	; 0xcf
    36b2:	4f2c      	ldr	r7, [pc, #176]	; (3764 <spi_read_reg+0x120>)
    36b4:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    36b6:	20cf      	movs	r0, #207	; 0xcf
    36b8:	4b2c      	ldr	r3, [pc, #176]	; (376c <spi_read_reg+0x128>)
    36ba:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    36bc:	4a33      	ldr	r2, [pc, #204]	; (378c <spi_read_reg+0x148>)
    36be:	492d      	ldr	r1, [pc, #180]	; (3774 <spi_read_reg+0x130>)
    36c0:	482d      	ldr	r0, [pc, #180]	; (3778 <spi_read_reg+0x134>)
    36c2:	4f2e      	ldr	r7, [pc, #184]	; (377c <spi_read_reg+0x138>)
    36c4:	47b8      	blx	r7
    36c6:	9a02      	ldr	r2, [sp, #8]
    36c8:	0029      	movs	r1, r5
    36ca:	4831      	ldr	r0, [pc, #196]	; (3790 <spi_read_reg+0x14c>)
    36cc:	47b8      	blx	r7
    36ce:	200d      	movs	r0, #13
    36d0:	4b2c      	ldr	r3, [pc, #176]	; (3784 <spi_read_reg+0x140>)
    36d2:	4798      	blx	r3
		nm_bsp_sleep(1);
    36d4:	2001      	movs	r0, #1
    36d6:	47b0      	blx	r6
    36d8:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    36da:	2d00      	cmp	r5, #0
    36dc:	d038      	beq.n	3750 <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    36de:	464b      	mov	r3, r9
    36e0:	9300      	str	r3, [sp, #0]
    36e2:	2304      	movs	r3, #4
    36e4:	2200      	movs	r2, #0
    36e6:	9f02      	ldr	r7, [sp, #8]
    36e8:	0039      	movs	r1, r7
    36ea:	9803      	ldr	r0, [sp, #12]
    36ec:	47c0      	blx	r8
    36ee:	0004      	movs	r4, r0
	if (result != N_OK) {
    36f0:	2801      	cmp	r0, #1
    36f2:	d0c5      	beq.n	3680 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    36f4:	2282      	movs	r2, #130	; 0x82
    36f6:	00d2      	lsls	r2, r2, #3
    36f8:	491e      	ldr	r1, [pc, #120]	; (3774 <spi_read_reg+0x130>)
    36fa:	481f      	ldr	r0, [pc, #124]	; (3778 <spi_read_reg+0x134>)
    36fc:	4e1f      	ldr	r6, [pc, #124]	; (377c <spi_read_reg+0x138>)
    36fe:	47b0      	blx	r6
    3700:	0039      	movs	r1, r7
    3702:	4824      	ldr	r0, [pc, #144]	; (3794 <spi_read_reg+0x150>)
    3704:	47b0      	blx	r6
    3706:	200d      	movs	r0, #13
    3708:	4b1e      	ldr	r3, [pc, #120]	; (3784 <spi_read_reg+0x140>)
    370a:	4798      	blx	r3
		goto _FAIL_;
    370c:	e7c9      	b.n	36a2 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    370e:	464a      	mov	r2, r9
    3710:	2104      	movs	r1, #4
    3712:	a805      	add	r0, sp, #20
    3714:	4b20      	ldr	r3, [pc, #128]	; (3798 <spi_read_reg+0x154>)
    3716:	4798      	blx	r3
    3718:	0004      	movs	r4, r0
	if (result != N_OK) {
    371a:	2801      	cmp	r0, #1
    371c:	d00b      	beq.n	3736 <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    371e:	4a1f      	ldr	r2, [pc, #124]	; (379c <spi_read_reg+0x158>)
    3720:	4914      	ldr	r1, [pc, #80]	; (3774 <spi_read_reg+0x130>)
    3722:	4815      	ldr	r0, [pc, #84]	; (3778 <spi_read_reg+0x134>)
    3724:	4b15      	ldr	r3, [pc, #84]	; (377c <spi_read_reg+0x138>)
    3726:	4798      	blx	r3
    3728:	481d      	ldr	r0, [pc, #116]	; (37a0 <spi_read_reg+0x15c>)
    372a:	4b1e      	ldr	r3, [pc, #120]	; (37a4 <spi_read_reg+0x160>)
    372c:	4798      	blx	r3
    372e:	200d      	movs	r0, #13
    3730:	4b14      	ldr	r3, [pc, #80]	; (3784 <spi_read_reg+0x140>)
    3732:	4798      	blx	r3
		goto _FAIL_;
    3734:	e7b5      	b.n	36a2 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    3736:	aa05      	add	r2, sp, #20
    3738:	7853      	ldrb	r3, [r2, #1]
    373a:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    373c:	7891      	ldrb	r1, [r2, #2]
    373e:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    3740:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    3742:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    3744:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    3746:	78d2      	ldrb	r2, [r2, #3]
    3748:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    374a:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    374c:	465a      	mov	r2, fp
    374e:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    3750:	0020      	movs	r0, r4
    3752:	b007      	add	sp, #28
    3754:	bc3c      	pop	{r2, r3, r4, r5}
    3756:	4690      	mov	r8, r2
    3758:	4699      	mov	r9, r3
    375a:	46a2      	mov	sl, r4
    375c:	46ab      	mov	fp, r5
    375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3760:	000090fa 	.word	0x000090fa
    3764:	0000317d 	.word	0x0000317d
    3768:	000090fb 	.word	0x000090fb
    376c:	0000331d 	.word	0x0000331d
    3770:	00000416 	.word	0x00000416
    3774:	00009160 	.word	0x00009160
    3778:	00008920 	.word	0x00008920
    377c:	000075f9 	.word	0x000075f9
    3780:	000096e0 	.word	0x000096e0
    3784:	0000762d 	.word	0x0000762d
    3788:	00000d41 	.word	0x00000d41
    378c:	00000435 	.word	0x00000435
    3790:	00009734 	.word	0x00009734
    3794:	000096b4 	.word	0x000096b4
    3798:	000033f1 	.word	0x000033f1
    379c:	0000041d 	.word	0x0000041d
    37a0:	00009714 	.word	0x00009714
    37a4:	00007715 	.word	0x00007715

000037a8 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    37a8:	b510      	push	{r4, lr}
    37aa:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    37ac:	2300      	movs	r3, #0
    37ae:	9300      	str	r3, [sp, #0]
    37b0:	2200      	movs	r2, #0
    37b2:	2100      	movs	r1, #0
    37b4:	20cf      	movs	r0, #207	; 0xcf
    37b6:	4c04      	ldr	r4, [pc, #16]	; (37c8 <nm_spi_reset+0x20>)
    37b8:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    37ba:	20cf      	movs	r0, #207	; 0xcf
    37bc:	4b03      	ldr	r3, [pc, #12]	; (37cc <nm_spi_reset+0x24>)
    37be:	4798      	blx	r3
	return M2M_SUCCESS;
}
    37c0:	2000      	movs	r0, #0
    37c2:	b002      	add	sp, #8
    37c4:	bd10      	pop	{r4, pc}
    37c6:	46c0      	nop			; (mov r8, r8)
    37c8:	0000317d 	.word	0x0000317d
    37cc:	0000331d 	.word	0x0000331d

000037d0 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    37d0:	2200      	movs	r2, #0
    37d2:	4b02      	ldr	r3, [pc, #8]	; (37dc <nm_spi_deinit+0xc>)
    37d4:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    37d6:	2000      	movs	r0, #0
    37d8:	4770      	bx	lr
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	200002b4 	.word	0x200002b4

000037e0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    37e0:	b500      	push	{lr}
    37e2:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    37e4:	a901      	add	r1, sp, #4
    37e6:	4b02      	ldr	r3, [pc, #8]	; (37f0 <nm_spi_read_reg+0x10>)
    37e8:	4798      	blx	r3

	return u32Val;
}
    37ea:	9801      	ldr	r0, [sp, #4]
    37ec:	b003      	add	sp, #12
    37ee:	bd00      	pop	{pc}
    37f0:	00003645 	.word	0x00003645

000037f4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    37f4:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    37f6:	4b04      	ldr	r3, [pc, #16]	; (3808 <nm_spi_read_reg_with_ret+0x14>)
    37f8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    37fa:	2300      	movs	r3, #0
    37fc:	2801      	cmp	r0, #1
    37fe:	d101      	bne.n	3804 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    3800:	0018      	movs	r0, r3
    3802:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    3804:	3b06      	subs	r3, #6
    3806:	e7fb      	b.n	3800 <nm_spi_read_reg_with_ret+0xc>
    3808:	00003645 	.word	0x00003645

0000380c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    380c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    380e:	4b04      	ldr	r3, [pc, #16]	; (3820 <nm_spi_write_reg+0x14>)
    3810:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3812:	2300      	movs	r3, #0
    3814:	2801      	cmp	r0, #1
    3816:	d101      	bne.n	381c <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    3818:	0018      	movs	r0, r3
    381a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    381c:	3b06      	subs	r3, #6
    381e:	e7fb      	b.n	3818 <nm_spi_write_reg+0xc>
    3820:	00003535 	.word	0x00003535

00003824 <nm_spi_init>:
{
    3824:	b510      	push	{r4, lr}
    3826:	b082      	sub	sp, #8
	uint32 reg = 0;
    3828:	2300      	movs	r3, #0
    382a:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    382c:	4a35      	ldr	r2, [pc, #212]	; (3904 <nm_spi_init+0xe0>)
    382e:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    3830:	4669      	mov	r1, sp
    3832:	4835      	ldr	r0, [pc, #212]	; (3908 <nm_spi_init+0xe4>)
    3834:	4b35      	ldr	r3, [pc, #212]	; (390c <nm_spi_init+0xe8>)
    3836:	4798      	blx	r3
    3838:	2800      	cmp	r0, #0
    383a:	d028      	beq.n	388e <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    383c:	4b31      	ldr	r3, [pc, #196]	; (3904 <nm_spi_init+0xe0>)
    383e:	781b      	ldrb	r3, [r3, #0]
    3840:	2b00      	cmp	r3, #0
    3842:	d10d      	bne.n	3860 <nm_spi_init+0x3c>
		reg &= ~0x70;
    3844:	337c      	adds	r3, #124	; 0x7c
    3846:	9900      	ldr	r1, [sp, #0]
    3848:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    384a:	3b2c      	subs	r3, #44	; 0x2c
    384c:	4319      	orrs	r1, r3
    384e:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    3850:	482d      	ldr	r0, [pc, #180]	; (3908 <nm_spi_init+0xe4>)
    3852:	4b2f      	ldr	r3, [pc, #188]	; (3910 <nm_spi_init+0xec>)
    3854:	4798      	blx	r3
    3856:	1e04      	subs	r4, r0, #0
    3858:	d03a      	beq.n	38d0 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    385a:	2201      	movs	r2, #1
    385c:	4b29      	ldr	r3, [pc, #164]	; (3904 <nm_spi_init+0xe0>)
    385e:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    3860:	a901      	add	r1, sp, #4
    3862:	2080      	movs	r0, #128	; 0x80
    3864:	0140      	lsls	r0, r0, #5
    3866:	4b29      	ldr	r3, [pc, #164]	; (390c <nm_spi_init+0xe8>)
    3868:	4798      	blx	r3
    386a:	2800      	cmp	r0, #0
    386c:	d03c      	beq.n	38e8 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    386e:	4c26      	ldr	r4, [pc, #152]	; (3908 <nm_spi_init+0xe4>)
    3870:	0020      	movs	r0, r4
    3872:	4b28      	ldr	r3, [pc, #160]	; (3914 <nm_spi_init+0xf0>)
    3874:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    3876:	2370      	movs	r3, #112	; 0x70
    3878:	0001      	movs	r1, r0
    387a:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    387c:	2050      	movs	r0, #80	; 0x50
    387e:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    3880:	0020      	movs	r0, r4
    3882:	4b25      	ldr	r3, [pc, #148]	; (3918 <nm_spi_init+0xf4>)
    3884:	4798      	blx	r3
	return M2M_SUCCESS;
    3886:	2400      	movs	r4, #0
}
    3888:	0020      	movs	r0, r4
    388a:	b002      	add	sp, #8
    388c:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    388e:	2201      	movs	r2, #1
    3890:	4b1c      	ldr	r3, [pc, #112]	; (3904 <nm_spi_init+0xe0>)
    3892:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retrying with CRC off...\n");
    3894:	2298      	movs	r2, #152	; 0x98
    3896:	00d2      	lsls	r2, r2, #3
    3898:	4920      	ldr	r1, [pc, #128]	; (391c <nm_spi_init+0xf8>)
    389a:	4821      	ldr	r0, [pc, #132]	; (3920 <nm_spi_init+0xfc>)
    389c:	4b21      	ldr	r3, [pc, #132]	; (3924 <nm_spi_init+0x100>)
    389e:	4798      	blx	r3
    38a0:	4821      	ldr	r0, [pc, #132]	; (3928 <nm_spi_init+0x104>)
    38a2:	4b22      	ldr	r3, [pc, #136]	; (392c <nm_spi_init+0x108>)
    38a4:	4798      	blx	r3
    38a6:	200d      	movs	r0, #13
    38a8:	4b21      	ldr	r3, [pc, #132]	; (3930 <nm_spi_init+0x10c>)
    38aa:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    38ac:	4669      	mov	r1, sp
    38ae:	4816      	ldr	r0, [pc, #88]	; (3908 <nm_spi_init+0xe4>)
    38b0:	4b16      	ldr	r3, [pc, #88]	; (390c <nm_spi_init+0xe8>)
    38b2:	4798      	blx	r3
    38b4:	1e04      	subs	r4, r0, #0
    38b6:	d1c1      	bne.n	383c <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    38b8:	4a1e      	ldr	r2, [pc, #120]	; (3934 <nm_spi_init+0x110>)
    38ba:	4918      	ldr	r1, [pc, #96]	; (391c <nm_spi_init+0xf8>)
    38bc:	4818      	ldr	r0, [pc, #96]	; (3920 <nm_spi_init+0xfc>)
    38be:	4b19      	ldr	r3, [pc, #100]	; (3924 <nm_spi_init+0x100>)
    38c0:	4798      	blx	r3
    38c2:	481d      	ldr	r0, [pc, #116]	; (3938 <nm_spi_init+0x114>)
    38c4:	4b19      	ldr	r3, [pc, #100]	; (392c <nm_spi_init+0x108>)
    38c6:	4798      	blx	r3
    38c8:	200d      	movs	r0, #13
    38ca:	4b19      	ldr	r3, [pc, #100]	; (3930 <nm_spi_init+0x10c>)
    38cc:	4798      	blx	r3
			return 0;
    38ce:	e7db      	b.n	3888 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    38d0:	4a1a      	ldr	r2, [pc, #104]	; (393c <nm_spi_init+0x118>)
    38d2:	4912      	ldr	r1, [pc, #72]	; (391c <nm_spi_init+0xf8>)
    38d4:	4812      	ldr	r0, [pc, #72]	; (3920 <nm_spi_init+0xfc>)
    38d6:	4b13      	ldr	r3, [pc, #76]	; (3924 <nm_spi_init+0x100>)
    38d8:	4798      	blx	r3
    38da:	4819      	ldr	r0, [pc, #100]	; (3940 <nm_spi_init+0x11c>)
    38dc:	4b13      	ldr	r3, [pc, #76]	; (392c <nm_spi_init+0x108>)
    38de:	4798      	blx	r3
    38e0:	200d      	movs	r0, #13
    38e2:	4b13      	ldr	r3, [pc, #76]	; (3930 <nm_spi_init+0x10c>)
    38e4:	4798      	blx	r3
			return 0;
    38e6:	e7cf      	b.n	3888 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    38e8:	4a16      	ldr	r2, [pc, #88]	; (3944 <nm_spi_init+0x120>)
    38ea:	490c      	ldr	r1, [pc, #48]	; (391c <nm_spi_init+0xf8>)
    38ec:	480c      	ldr	r0, [pc, #48]	; (3920 <nm_spi_init+0xfc>)
    38ee:	4b0d      	ldr	r3, [pc, #52]	; (3924 <nm_spi_init+0x100>)
    38f0:	4798      	blx	r3
    38f2:	4815      	ldr	r0, [pc, #84]	; (3948 <nm_spi_init+0x124>)
    38f4:	4b0d      	ldr	r3, [pc, #52]	; (392c <nm_spi_init+0x108>)
    38f6:	4798      	blx	r3
    38f8:	200d      	movs	r0, #13
    38fa:	4b0d      	ldr	r3, [pc, #52]	; (3930 <nm_spi_init+0x10c>)
    38fc:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    38fe:	2406      	movs	r4, #6
    3900:	4264      	negs	r4, r4
    3902:	e7c1      	b.n	3888 <nm_spi_init+0x64>
    3904:	200002b4 	.word	0x200002b4
    3908:	0000e824 	.word	0x0000e824
    390c:	00003645 	.word	0x00003645
    3910:	00003535 	.word	0x00003535
    3914:	000037e1 	.word	0x000037e1
    3918:	0000380d 	.word	0x0000380d
    391c:	0000917c 	.word	0x0000917c
    3920:	00008920 	.word	0x00008920
    3924:	000075f9 	.word	0x000075f9
    3928:	00009288 	.word	0x00009288
    392c:	00007715 	.word	0x00007715
    3930:	0000762d 	.word	0x0000762d
    3934:	000004c3 	.word	0x000004c3
    3938:	000092d8 	.word	0x000092d8
    393c:	000004cd 	.word	0x000004cd
    3940:	00009304 	.word	0x00009304
    3944:	000004d7 	.word	0x000004d7
    3948:	00009338 	.word	0x00009338

0000394c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    394c:	b5f0      	push	{r4, r5, r6, r7, lr}
    394e:	46de      	mov	lr, fp
    3950:	4657      	mov	r7, sl
    3952:	464e      	mov	r6, r9
    3954:	4645      	mov	r5, r8
    3956:	b5e0      	push	{r5, r6, r7, lr}
    3958:	b087      	sub	sp, #28
    395a:	9002      	str	r0, [sp, #8]
    395c:	9103      	str	r1, [sp, #12]
    395e:	0016      	movs	r6, r2
    3960:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    3962:	2300      	movs	r3, #0
    3964:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    3966:	2400      	movs	r4, #0
    3968:	4b3e      	ldr	r3, [pc, #248]	; (3a64 <nm_spi_read_block+0x118>)
    396a:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    396c:	46a9      	mov	r9, r5
    396e:	e037      	b.n	39e0 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    3970:	2301      	movs	r3, #1
    3972:	469b      	mov	fp, r3
		size = 2;
    3974:	3601      	adds	r6, #1
    3976:	e035      	b.n	39e4 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    3978:	20c8      	movs	r0, #200	; 0xc8
    397a:	4b3b      	ldr	r3, [pc, #236]	; (3a68 <nm_spi_read_block+0x11c>)
    397c:	4798      	blx	r3
	if (result != N_OK) {
    397e:	2801      	cmp	r0, #1
    3980:	d045      	beq.n	3a0e <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    3982:	4a3a      	ldr	r2, [pc, #232]	; (3a6c <nm_spi_read_block+0x120>)
    3984:	493a      	ldr	r1, [pc, #232]	; (3a70 <nm_spi_read_block+0x124>)
    3986:	483b      	ldr	r0, [pc, #236]	; (3a74 <nm_spi_read_block+0x128>)
    3988:	4f3b      	ldr	r7, [pc, #236]	; (3a78 <nm_spi_read_block+0x12c>)
    398a:	47b8      	blx	r7
    398c:	9902      	ldr	r1, [sp, #8]
    398e:	483b      	ldr	r0, [pc, #236]	; (3a7c <nm_spi_read_block+0x130>)
    3990:	47b8      	blx	r7
    3992:	200d      	movs	r0, #13
    3994:	4b3a      	ldr	r3, [pc, #232]	; (3a80 <nm_spi_read_block+0x134>)
    3996:	4798      	blx	r3
		nm_bsp_sleep(1);
    3998:	2001      	movs	r0, #1
    399a:	4f3a      	ldr	r7, [pc, #232]	; (3a84 <nm_spi_read_block+0x138>)
    399c:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    399e:	9400      	str	r4, [sp, #0]
    39a0:	0023      	movs	r3, r4
    39a2:	0022      	movs	r2, r4
    39a4:	0021      	movs	r1, r4
    39a6:	20cf      	movs	r0, #207	; 0xcf
    39a8:	4d2e      	ldr	r5, [pc, #184]	; (3a64 <nm_spi_read_block+0x118>)
    39aa:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    39ac:	20cf      	movs	r0, #207	; 0xcf
    39ae:	4b2e      	ldr	r3, [pc, #184]	; (3a68 <nm_spi_read_block+0x11c>)
    39b0:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    39b2:	4a35      	ldr	r2, [pc, #212]	; (3a88 <nm_spi_read_block+0x13c>)
    39b4:	492e      	ldr	r1, [pc, #184]	; (3a70 <nm_spi_read_block+0x124>)
    39b6:	482f      	ldr	r0, [pc, #188]	; (3a74 <nm_spi_read_block+0x128>)
    39b8:	4b2f      	ldr	r3, [pc, #188]	; (3a78 <nm_spi_read_block+0x12c>)
    39ba:	469a      	mov	sl, r3
    39bc:	4798      	blx	r3
    39be:	0033      	movs	r3, r6
    39c0:	9a02      	ldr	r2, [sp, #8]
    39c2:	4649      	mov	r1, r9
    39c4:	4831      	ldr	r0, [pc, #196]	; (3a8c <nm_spi_read_block+0x140>)
    39c6:	47d0      	blx	sl
    39c8:	200d      	movs	r0, #13
    39ca:	4b2d      	ldr	r3, [pc, #180]	; (3a80 <nm_spi_read_block+0x134>)
    39cc:	4798      	blx	r3
		nm_bsp_sleep(1);
    39ce:	2001      	movs	r0, #1
    39d0:	47b8      	blx	r7
    39d2:	2301      	movs	r3, #1
    39d4:	425b      	negs	r3, r3
    39d6:	469c      	mov	ip, r3
    39d8:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    39da:	464b      	mov	r3, r9
    39dc:	2b00      	cmp	r3, #0
    39de:	d038      	beq.n	3a52 <nm_spi_read_block+0x106>
	if (size == 1)
    39e0:	2e01      	cmp	r6, #1
    39e2:	d0c5      	beq.n	3970 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    39e4:	9400      	str	r4, [sp, #0]
    39e6:	0033      	movs	r3, r6
    39e8:	0022      	movs	r2, r4
    39ea:	9d02      	ldr	r5, [sp, #8]
    39ec:	0029      	movs	r1, r5
    39ee:	20c8      	movs	r0, #200	; 0xc8
    39f0:	47c0      	blx	r8
	if (result != N_OK) {
    39f2:	2801      	cmp	r0, #1
    39f4:	d0c0      	beq.n	3978 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    39f6:	4a26      	ldr	r2, [pc, #152]	; (3a90 <nm_spi_read_block+0x144>)
    39f8:	491d      	ldr	r1, [pc, #116]	; (3a70 <nm_spi_read_block+0x124>)
    39fa:	481e      	ldr	r0, [pc, #120]	; (3a74 <nm_spi_read_block+0x128>)
    39fc:	4f1e      	ldr	r7, [pc, #120]	; (3a78 <nm_spi_read_block+0x12c>)
    39fe:	47b8      	blx	r7
    3a00:	0029      	movs	r1, r5
    3a02:	4824      	ldr	r0, [pc, #144]	; (3a94 <nm_spi_read_block+0x148>)
    3a04:	47b8      	blx	r7
    3a06:	200d      	movs	r0, #13
    3a08:	4b1d      	ldr	r3, [pc, #116]	; (3a80 <nm_spi_read_block+0x134>)
    3a0a:	4798      	blx	r3
    3a0c:	e7c4      	b.n	3998 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    3a0e:	465b      	mov	r3, fp
    3a10:	2b00      	cmp	r3, #0
    3a12:	d016      	beq.n	3a42 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    3a14:	af05      	add	r7, sp, #20
    3a16:	0022      	movs	r2, r4
    3a18:	0031      	movs	r1, r6
    3a1a:	0038      	movs	r0, r7
    3a1c:	4b1e      	ldr	r3, [pc, #120]	; (3a98 <nm_spi_read_block+0x14c>)
    3a1e:	4798      	blx	r3
		buf[0] = tmp[0];
    3a20:	783b      	ldrb	r3, [r7, #0]
    3a22:	9a03      	ldr	r2, [sp, #12]
    3a24:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    3a26:	2801      	cmp	r0, #1
    3a28:	d011      	beq.n	3a4e <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    3a2a:	4a1c      	ldr	r2, [pc, #112]	; (3a9c <nm_spi_read_block+0x150>)
    3a2c:	4910      	ldr	r1, [pc, #64]	; (3a70 <nm_spi_read_block+0x124>)
    3a2e:	4811      	ldr	r0, [pc, #68]	; (3a74 <nm_spi_read_block+0x128>)
    3a30:	4b11      	ldr	r3, [pc, #68]	; (3a78 <nm_spi_read_block+0x12c>)
    3a32:	4798      	blx	r3
    3a34:	481a      	ldr	r0, [pc, #104]	; (3aa0 <nm_spi_read_block+0x154>)
    3a36:	4b1b      	ldr	r3, [pc, #108]	; (3aa4 <nm_spi_read_block+0x158>)
    3a38:	4798      	blx	r3
    3a3a:	200d      	movs	r0, #13
    3a3c:	4b10      	ldr	r3, [pc, #64]	; (3a80 <nm_spi_read_block+0x134>)
    3a3e:	4798      	blx	r3
    3a40:	e7aa      	b.n	3998 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    3a42:	0022      	movs	r2, r4
    3a44:	0031      	movs	r1, r6
    3a46:	9803      	ldr	r0, [sp, #12]
    3a48:	4b13      	ldr	r3, [pc, #76]	; (3a98 <nm_spi_read_block+0x14c>)
    3a4a:	4798      	blx	r3
    3a4c:	e7eb      	b.n	3a26 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3a4e:	2000      	movs	r0, #0
    3a50:	e001      	b.n	3a56 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3a52:	2006      	movs	r0, #6
    3a54:	4240      	negs	r0, r0

	return s8Ret;
}
    3a56:	b007      	add	sp, #28
    3a58:	bc3c      	pop	{r2, r3, r4, r5}
    3a5a:	4690      	mov	r8, r2
    3a5c:	4699      	mov	r9, r3
    3a5e:	46a2      	mov	sl, r4
    3a60:	46ab      	mov	fp, r5
    3a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a64:	0000317d 	.word	0x0000317d
    3a68:	0000331d 	.word	0x0000331d
    3a6c:	0000045c 	.word	0x0000045c
    3a70:	00009170 	.word	0x00009170
    3a74:	00008920 	.word	0x00008920
    3a78:	000075f9 	.word	0x000075f9
    3a7c:	0000938c 	.word	0x0000938c
    3a80:	0000762d 	.word	0x0000762d
    3a84:	00000d41 	.word	0x00000d41
    3a88:	0000047d 	.word	0x0000047d
    3a8c:	000093ec 	.word	0x000093ec
    3a90:	00000456 	.word	0x00000456
    3a94:	0000935c 	.word	0x0000935c
    3a98:	000033f1 	.word	0x000033f1
    3a9c:	0000046c 	.word	0x0000046c
    3aa0:	000093c4 	.word	0x000093c4
    3aa4:	00007715 	.word	0x00007715

00003aa8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aaa:	46de      	mov	lr, fp
    3aac:	4647      	mov	r7, r8
    3aae:	b580      	push	{r7, lr}
    3ab0:	b089      	sub	sp, #36	; 0x24
    3ab2:	9004      	str	r0, [sp, #16]
    3ab4:	468b      	mov	fp, r1
    3ab6:	9203      	str	r2, [sp, #12]
    3ab8:	260a      	movs	r6, #10
    3aba:	2780      	movs	r7, #128	; 0x80
    3abc:	01bf      	lsls	r7, r7, #6
    3abe:	466b      	mov	r3, sp
    3ac0:	82df      	strh	r7, [r3, #22]
    3ac2:	0035      	movs	r5, r6
    3ac4:	e02d      	b.n	3b22 <nm_spi_write_block+0x7a>
		size = 2;
    3ac6:	3301      	adds	r3, #1
    3ac8:	9303      	str	r3, [sp, #12]
    3aca:	e02d      	b.n	3b28 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3acc:	4a82      	ldr	r2, [pc, #520]	; (3cd8 <nm_spi_write_block+0x230>)
    3ace:	4983      	ldr	r1, [pc, #524]	; (3cdc <nm_spi_write_block+0x234>)
    3ad0:	4883      	ldr	r0, [pc, #524]	; (3ce0 <nm_spi_write_block+0x238>)
    3ad2:	4c84      	ldr	r4, [pc, #528]	; (3ce4 <nm_spi_write_block+0x23c>)
    3ad4:	47a0      	blx	r4
    3ad6:	0031      	movs	r1, r6
    3ad8:	4883      	ldr	r0, [pc, #524]	; (3ce8 <nm_spi_write_block+0x240>)
    3ada:	47a0      	blx	r4
    3adc:	200d      	movs	r0, #13
    3ade:	4b83      	ldr	r3, [pc, #524]	; (3cec <nm_spi_write_block+0x244>)
    3ae0:	4798      	blx	r3
		nm_bsp_sleep(1);
    3ae2:	2001      	movs	r0, #1
    3ae4:	4c82      	ldr	r4, [pc, #520]	; (3cf0 <nm_spi_write_block+0x248>)
    3ae6:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3ae8:	2300      	movs	r3, #0
    3aea:	9300      	str	r3, [sp, #0]
    3aec:	2200      	movs	r2, #0
    3aee:	2100      	movs	r1, #0
    3af0:	20cf      	movs	r0, #207	; 0xcf
    3af2:	4e80      	ldr	r6, [pc, #512]	; (3cf4 <nm_spi_write_block+0x24c>)
    3af4:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    3af6:	20cf      	movs	r0, #207	; 0xcf
    3af8:	4b7f      	ldr	r3, [pc, #508]	; (3cf8 <nm_spi_write_block+0x250>)
    3afa:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    3afc:	4a7f      	ldr	r2, [pc, #508]	; (3cfc <nm_spi_write_block+0x254>)
    3afe:	4977      	ldr	r1, [pc, #476]	; (3cdc <nm_spi_write_block+0x234>)
    3b00:	4877      	ldr	r0, [pc, #476]	; (3ce0 <nm_spi_write_block+0x238>)
    3b02:	4e78      	ldr	r6, [pc, #480]	; (3ce4 <nm_spi_write_block+0x23c>)
    3b04:	47b0      	blx	r6
    3b06:	9b03      	ldr	r3, [sp, #12]
    3b08:	9a04      	ldr	r2, [sp, #16]
    3b0a:	0029      	movs	r1, r5
    3b0c:	487c      	ldr	r0, [pc, #496]	; (3d00 <nm_spi_write_block+0x258>)
    3b0e:	47b0      	blx	r6
    3b10:	200d      	movs	r0, #13
    3b12:	4b76      	ldr	r3, [pc, #472]	; (3cec <nm_spi_write_block+0x244>)
    3b14:	4798      	blx	r3
		nm_bsp_sleep(1);
    3b16:	2001      	movs	r0, #1
    3b18:	47a0      	blx	r4
    3b1a:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    3b1c:	2d00      	cmp	r5, #0
    3b1e:	d100      	bne.n	3b22 <nm_spi_write_block+0x7a>
    3b20:	e0d2      	b.n	3cc8 <nm_spi_write_block+0x220>
	if (size == 1)
    3b22:	9b03      	ldr	r3, [sp, #12]
    3b24:	2b01      	cmp	r3, #1
    3b26:	d0ce      	beq.n	3ac6 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    3b28:	2300      	movs	r3, #0
    3b2a:	9300      	str	r3, [sp, #0]
    3b2c:	9b03      	ldr	r3, [sp, #12]
    3b2e:	2200      	movs	r2, #0
    3b30:	9e04      	ldr	r6, [sp, #16]
    3b32:	0031      	movs	r1, r6
    3b34:	20c7      	movs	r0, #199	; 0xc7
    3b36:	4c6f      	ldr	r4, [pc, #444]	; (3cf4 <nm_spi_write_block+0x24c>)
    3b38:	47a0      	blx	r4
	if (result != N_OK) {
    3b3a:	2801      	cmp	r0, #1
    3b3c:	d1c6      	bne.n	3acc <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    3b3e:	20c7      	movs	r0, #199	; 0xc7
    3b40:	4b6d      	ldr	r3, [pc, #436]	; (3cf8 <nm_spi_write_block+0x250>)
    3b42:	4798      	blx	r3
	if (result != N_OK) {
    3b44:	2801      	cmp	r0, #1
    3b46:	d00b      	beq.n	3b60 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    3b48:	4a6e      	ldr	r2, [pc, #440]	; (3d04 <nm_spi_write_block+0x25c>)
    3b4a:	4964      	ldr	r1, [pc, #400]	; (3cdc <nm_spi_write_block+0x234>)
    3b4c:	4864      	ldr	r0, [pc, #400]	; (3ce0 <nm_spi_write_block+0x238>)
    3b4e:	4c65      	ldr	r4, [pc, #404]	; (3ce4 <nm_spi_write_block+0x23c>)
    3b50:	47a0      	blx	r4
    3b52:	9904      	ldr	r1, [sp, #16]
    3b54:	486c      	ldr	r0, [pc, #432]	; (3d08 <nm_spi_write_block+0x260>)
    3b56:	47a0      	blx	r4
    3b58:	200d      	movs	r0, #13
    3b5a:	4b64      	ldr	r3, [pc, #400]	; (3cec <nm_spi_write_block+0x244>)
    3b5c:	4798      	blx	r3
    3b5e:	e7c0      	b.n	3ae2 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    3b60:	2200      	movs	r2, #0
    3b62:	ab07      	add	r3, sp, #28
    3b64:	801a      	strh	r2, [r3, #0]
    3b66:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    3b68:	2600      	movs	r6, #0
				order = 0x1;
    3b6a:	46a8      	mov	r8, r5
    3b6c:	0035      	movs	r5, r6
    3b6e:	0026      	movs	r6, r4
    3b70:	e021      	b.n	3bb6 <nm_spi_write_block+0x10e>
				order = 0x2;
    3b72:	2300      	movs	r3, #0
    3b74:	42b7      	cmp	r7, r6
    3b76:	415b      	adcs	r3, r3
    3b78:	3302      	adds	r3, #2
		cmd |= order;
    3b7a:	200b      	movs	r0, #11
    3b7c:	aa04      	add	r2, sp, #16
    3b7e:	4694      	mov	ip, r2
    3b80:	4460      	add	r0, ip
    3b82:	2210      	movs	r2, #16
    3b84:	4252      	negs	r2, r2
    3b86:	4313      	orrs	r3, r2
    3b88:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3b8a:	2101      	movs	r1, #1
    3b8c:	4b5f      	ldr	r3, [pc, #380]	; (3d0c <nm_spi_write_block+0x264>)
    3b8e:	4798      	blx	r3
    3b90:	2800      	cmp	r0, #0
    3b92:	d11d      	bne.n	3bd0 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    3b94:	465b      	mov	r3, fp
    3b96:	1958      	adds	r0, r3, r5
    3b98:	0021      	movs	r1, r4
    3b9a:	4b5c      	ldr	r3, [pc, #368]	; (3d0c <nm_spi_write_block+0x264>)
    3b9c:	4798      	blx	r3
    3b9e:	2800      	cmp	r0, #0
    3ba0:	d12e      	bne.n	3c00 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    3ba2:	4b5b      	ldr	r3, [pc, #364]	; (3d10 <nm_spi_write_block+0x268>)
    3ba4:	781b      	ldrb	r3, [r3, #0]
    3ba6:	2b00      	cmp	r3, #0
    3ba8:	d037      	beq.n	3c1a <nm_spi_write_block+0x172>
		ix += nbytes;
    3baa:	1965      	adds	r5, r4, r5
    3bac:	b22d      	sxth	r5, r5
		sz -= nbytes;
    3bae:	1b36      	subs	r6, r6, r4
    3bb0:	b2b6      	uxth	r6, r6
	} while (sz);
    3bb2:	2e00      	cmp	r6, #0
    3bb4:	d052      	beq.n	3c5c <nm_spi_write_block+0x1b4>
    3bb6:	1c34      	adds	r4, r6, #0
    3bb8:	42be      	cmp	r6, r7
    3bba:	d901      	bls.n	3bc0 <nm_spi_write_block+0x118>
    3bbc:	466b      	mov	r3, sp
    3bbe:	8adc      	ldrh	r4, [r3, #22]
    3bc0:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    3bc2:	2d00      	cmp	r5, #0
    3bc4:	d1d5      	bne.n	3b72 <nm_spi_write_block+0xca>
				order = 0x3;
    3bc6:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    3bc8:	42be      	cmp	r6, r7
    3bca:	d9d6      	bls.n	3b7a <nm_spi_write_block+0xd2>
				order = 0x1;
    3bcc:	3b02      	subs	r3, #2
    3bce:	e7d4      	b.n	3b7a <nm_spi_write_block+0xd2>
    3bd0:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    3bd2:	4a50      	ldr	r2, [pc, #320]	; (3d14 <nm_spi_write_block+0x26c>)
    3bd4:	4950      	ldr	r1, [pc, #320]	; (3d18 <nm_spi_write_block+0x270>)
    3bd6:	4842      	ldr	r0, [pc, #264]	; (3ce0 <nm_spi_write_block+0x238>)
    3bd8:	4b42      	ldr	r3, [pc, #264]	; (3ce4 <nm_spi_write_block+0x23c>)
    3bda:	4798      	blx	r3
    3bdc:	484f      	ldr	r0, [pc, #316]	; (3d1c <nm_spi_write_block+0x274>)
    3bde:	4b50      	ldr	r3, [pc, #320]	; (3d20 <nm_spi_write_block+0x278>)
    3be0:	4798      	blx	r3
    3be2:	200d      	movs	r0, #13
    3be4:	4b41      	ldr	r3, [pc, #260]	; (3cec <nm_spi_write_block+0x244>)
    3be6:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3be8:	4a4e      	ldr	r2, [pc, #312]	; (3d24 <nm_spi_write_block+0x27c>)
    3bea:	493c      	ldr	r1, [pc, #240]	; (3cdc <nm_spi_write_block+0x234>)
    3bec:	483c      	ldr	r0, [pc, #240]	; (3ce0 <nm_spi_write_block+0x238>)
    3bee:	4b3d      	ldr	r3, [pc, #244]	; (3ce4 <nm_spi_write_block+0x23c>)
    3bf0:	4798      	blx	r3
    3bf2:	484d      	ldr	r0, [pc, #308]	; (3d28 <nm_spi_write_block+0x280>)
    3bf4:	4b4a      	ldr	r3, [pc, #296]	; (3d20 <nm_spi_write_block+0x278>)
    3bf6:	4798      	blx	r3
    3bf8:	200d      	movs	r0, #13
    3bfa:	4b3c      	ldr	r3, [pc, #240]	; (3cec <nm_spi_write_block+0x244>)
    3bfc:	4798      	blx	r3
    3bfe:	e770      	b.n	3ae2 <nm_spi_write_block+0x3a>
    3c00:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    3c02:	4a4a      	ldr	r2, [pc, #296]	; (3d2c <nm_spi_write_block+0x284>)
    3c04:	4944      	ldr	r1, [pc, #272]	; (3d18 <nm_spi_write_block+0x270>)
    3c06:	4836      	ldr	r0, [pc, #216]	; (3ce0 <nm_spi_write_block+0x238>)
    3c08:	4b36      	ldr	r3, [pc, #216]	; (3ce4 <nm_spi_write_block+0x23c>)
    3c0a:	4798      	blx	r3
    3c0c:	4848      	ldr	r0, [pc, #288]	; (3d30 <nm_spi_write_block+0x288>)
    3c0e:	4b44      	ldr	r3, [pc, #272]	; (3d20 <nm_spi_write_block+0x278>)
    3c10:	4798      	blx	r3
    3c12:	200d      	movs	r0, #13
    3c14:	4b35      	ldr	r3, [pc, #212]	; (3cec <nm_spi_write_block+0x244>)
    3c16:	4798      	blx	r3
    3c18:	e7e6      	b.n	3be8 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    3c1a:	2102      	movs	r1, #2
    3c1c:	a807      	add	r0, sp, #28
    3c1e:	4b3b      	ldr	r3, [pc, #236]	; (3d0c <nm_spi_write_block+0x264>)
    3c20:	4798      	blx	r3
    3c22:	2800      	cmp	r0, #0
    3c24:	d0c1      	beq.n	3baa <nm_spi_write_block+0x102>
    3c26:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    3c28:	22d7      	movs	r2, #215	; 0xd7
    3c2a:	0092      	lsls	r2, r2, #2
    3c2c:	493a      	ldr	r1, [pc, #232]	; (3d18 <nm_spi_write_block+0x270>)
    3c2e:	482c      	ldr	r0, [pc, #176]	; (3ce0 <nm_spi_write_block+0x238>)
    3c30:	4b2c      	ldr	r3, [pc, #176]	; (3ce4 <nm_spi_write_block+0x23c>)
    3c32:	4798      	blx	r3
    3c34:	483f      	ldr	r0, [pc, #252]	; (3d34 <nm_spi_write_block+0x28c>)
    3c36:	4b3a      	ldr	r3, [pc, #232]	; (3d20 <nm_spi_write_block+0x278>)
    3c38:	4798      	blx	r3
    3c3a:	200d      	movs	r0, #13
    3c3c:	4b2b      	ldr	r3, [pc, #172]	; (3cec <nm_spi_write_block+0x244>)
    3c3e:	4798      	blx	r3
    3c40:	e7d2      	b.n	3be8 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    3c42:	229a      	movs	r2, #154	; 0x9a
    3c44:	0052      	lsls	r2, r2, #1
    3c46:	493c      	ldr	r1, [pc, #240]	; (3d38 <nm_spi_write_block+0x290>)
    3c48:	4825      	ldr	r0, [pc, #148]	; (3ce0 <nm_spi_write_block+0x238>)
    3c4a:	4b26      	ldr	r3, [pc, #152]	; (3ce4 <nm_spi_write_block+0x23c>)
    3c4c:	4798      	blx	r3
    3c4e:	483b      	ldr	r0, [pc, #236]	; (3d3c <nm_spi_write_block+0x294>)
    3c50:	4b33      	ldr	r3, [pc, #204]	; (3d20 <nm_spi_write_block+0x278>)
    3c52:	4798      	blx	r3
    3c54:	200d      	movs	r0, #13
    3c56:	4b25      	ldr	r3, [pc, #148]	; (3cec <nm_spi_write_block+0x244>)
    3c58:	4798      	blx	r3
    3c5a:	e027      	b.n	3cac <nm_spi_write_block+0x204>
    3c5c:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    3c5e:	4b2c      	ldr	r3, [pc, #176]	; (3d10 <nm_spi_write_block+0x268>)
    3c60:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    3c62:	1e63      	subs	r3, r4, #1
    3c64:	419c      	sbcs	r4, r3
    3c66:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3c68:	b2a1      	uxth	r1, r4
    3c6a:	a807      	add	r0, sp, #28
    3c6c:	4b34      	ldr	r3, [pc, #208]	; (3d40 <nm_spi_write_block+0x298>)
    3c6e:	4798      	blx	r3
    3c70:	2800      	cmp	r0, #0
    3c72:	d1e6      	bne.n	3c42 <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    3c74:	ab08      	add	r3, sp, #32
    3c76:	191b      	adds	r3, r3, r4
    3c78:	3b05      	subs	r3, #5
    3c7a:	781b      	ldrb	r3, [r3, #0]
    3c7c:	2b00      	cmp	r3, #0
    3c7e:	d106      	bne.n	3c8e <nm_spi_write_block+0x1e6>
    3c80:	ab08      	add	r3, sp, #32
    3c82:	469c      	mov	ip, r3
    3c84:	4464      	add	r4, ip
    3c86:	3c06      	subs	r4, #6
    3c88:	7823      	ldrb	r3, [r4, #0]
    3c8a:	2bc3      	cmp	r3, #195	; 0xc3
    3c8c:	d01a      	beq.n	3cc4 <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    3c8e:	223c      	movs	r2, #60	; 0x3c
    3c90:	32ff      	adds	r2, #255	; 0xff
    3c92:	4929      	ldr	r1, [pc, #164]	; (3d38 <nm_spi_write_block+0x290>)
    3c94:	4812      	ldr	r0, [pc, #72]	; (3ce0 <nm_spi_write_block+0x238>)
    3c96:	4c13      	ldr	r4, [pc, #76]	; (3ce4 <nm_spi_write_block+0x23c>)
    3c98:	47a0      	blx	r4
    3c9a:	a907      	add	r1, sp, #28
    3c9c:	788b      	ldrb	r3, [r1, #2]
    3c9e:	784a      	ldrb	r2, [r1, #1]
    3ca0:	7809      	ldrb	r1, [r1, #0]
    3ca2:	4828      	ldr	r0, [pc, #160]	; (3d44 <nm_spi_write_block+0x29c>)
    3ca4:	47a0      	blx	r4
    3ca6:	200d      	movs	r0, #13
    3ca8:	4b10      	ldr	r3, [pc, #64]	; (3cec <nm_spi_write_block+0x244>)
    3caa:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3cac:	4a26      	ldr	r2, [pc, #152]	; (3d48 <nm_spi_write_block+0x2a0>)
    3cae:	490b      	ldr	r1, [pc, #44]	; (3cdc <nm_spi_write_block+0x234>)
    3cb0:	480b      	ldr	r0, [pc, #44]	; (3ce0 <nm_spi_write_block+0x238>)
    3cb2:	4b0c      	ldr	r3, [pc, #48]	; (3ce4 <nm_spi_write_block+0x23c>)
    3cb4:	4798      	blx	r3
    3cb6:	481c      	ldr	r0, [pc, #112]	; (3d28 <nm_spi_write_block+0x280>)
    3cb8:	4b19      	ldr	r3, [pc, #100]	; (3d20 <nm_spi_write_block+0x278>)
    3cba:	4798      	blx	r3
    3cbc:	200d      	movs	r0, #13
    3cbe:	4b0b      	ldr	r3, [pc, #44]	; (3cec <nm_spi_write_block+0x244>)
    3cc0:	4798      	blx	r3
    3cc2:	e70e      	b.n	3ae2 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3cc4:	2000      	movs	r0, #0
    3cc6:	e001      	b.n	3ccc <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3cc8:	2006      	movs	r0, #6
    3cca:	4240      	negs	r0, r0

	return s8Ret;
}
    3ccc:	b009      	add	sp, #36	; 0x24
    3cce:	bc0c      	pop	{r2, r3}
    3cd0:	4690      	mov	r8, r2
    3cd2:	469b      	mov	fp, r3
    3cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cd6:	46c0      	nop			; (mov r8, r8)
    3cd8:	000003c3 	.word	0x000003c3
    3cdc:	00009150 	.word	0x00009150
    3ce0:	00008920 	.word	0x00008920
    3ce4:	000075f9 	.word	0x000075f9
    3ce8:	00009408 	.word	0x00009408
    3cec:	0000762d 	.word	0x0000762d
    3cf0:	00000d41 	.word	0x00000d41
    3cf4:	0000317d 	.word	0x0000317d
    3cf8:	0000331d 	.word	0x0000331d
    3cfc:	000003eb 	.word	0x000003eb
    3d00:	000093ec 	.word	0x000093ec
    3d04:	000003c9 	.word	0x000003c9
    3d08:	00009438 	.word	0x00009438
    3d0c:	0000315d 	.word	0x0000315d
    3d10:	200002b4 	.word	0x200002b4
    3d14:	00000349 	.word	0x00000349
    3d18:	00009130 	.word	0x00009130
    3d1c:	00009470 	.word	0x00009470
    3d20:	00007715 	.word	0x00007715
    3d24:	000003d9 	.word	0x000003d9
    3d28:	00009564 	.word	0x00009564
    3d2c:	00000352 	.word	0x00000352
    3d30:	000094a8 	.word	0x000094a8
    3d34:	000094dc 	.word	0x000094dc
    3d38:	00009104 	.word	0x00009104
    3d3c:	00009514 	.word	0x00009514
    3d40:	000032fd 	.word	0x000032fd
    3d44:	00009534 	.word	0x00009534
    3d48:	000003e1 	.word	0x000003e1

00003d4c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    3d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d4e:	46de      	mov	lr, fp
    3d50:	4657      	mov	r7, sl
    3d52:	464e      	mov	r6, r9
    3d54:	4645      	mov	r5, r8
    3d56:	b5e0      	push	{r5, r6, r7, lr}
    3d58:	b085      	sub	sp, #20
    3d5a:	9001      	str	r0, [sp, #4]
    3d5c:	000e      	movs	r6, r1
    3d5e:	9202      	str	r2, [sp, #8]
    3d60:	001d      	movs	r5, r3
    3d62:	ab0e      	add	r3, sp, #56	; 0x38
    3d64:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    3d66:	2c00      	cmp	r4, #0
    3d68:	d064      	beq.n	3e34 <Socket_ReadSocketData+0xe8>
    3d6a:	0103      	lsls	r3, r0, #4
    3d6c:	4935      	ldr	r1, [pc, #212]	; (3e44 <Socket_ReadSocketData+0xf8>)
    3d6e:	585b      	ldr	r3, [r3, r1]
    3d70:	2b00      	cmp	r3, #0
    3d72:	d05f      	beq.n	3e34 <Socket_ReadSocketData+0xe8>
    3d74:	0101      	lsls	r1, r0, #4
    3d76:	4b33      	ldr	r3, [pc, #204]	; (3e44 <Socket_ReadSocketData+0xf8>)
    3d78:	185b      	adds	r3, r3, r1
    3d7a:	889b      	ldrh	r3, [r3, #4]
    3d7c:	b29b      	uxth	r3, r3
    3d7e:	2b00      	cmp	r3, #0
    3d80:	d058      	beq.n	3e34 <Socket_ReadSocketData+0xe8>
    3d82:	4b30      	ldr	r3, [pc, #192]	; (3e44 <Socket_ReadSocketData+0xf8>)
    3d84:	185b      	adds	r3, r3, r1
    3d86:	7a9b      	ldrb	r3, [r3, #10]
    3d88:	2b01      	cmp	r3, #1
    3d8a:	d153      	bne.n	3e34 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    3d8c:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3d8e:	4b2d      	ldr	r3, [pc, #180]	; (3e44 <Socket_ReadSocketData+0xf8>)
    3d90:	469b      	mov	fp, r3
    3d92:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    3d94:	465b      	mov	r3, fp
    3d96:	220a      	movs	r2, #10
    3d98:	4690      	mov	r8, r2
    3d9a:	44d8      	add	r8, fp
    3d9c:	468a      	mov	sl, r1
    3d9e:	9500      	str	r5, [sp, #0]
    3da0:	9303      	str	r3, [sp, #12]
    3da2:	e015      	b.n	3dd0 <Socket_ReadSocketData+0x84>
    3da4:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    3da6:	2301      	movs	r3, #1
    3da8:	e01c      	b.n	3de4 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    3daa:	3301      	adds	r3, #1
    3dac:	2200      	movs	r2, #0
    3dae:	2100      	movs	r1, #0
    3db0:	2000      	movs	r0, #0
    3db2:	4c25      	ldr	r4, [pc, #148]	; (3e48 <Socket_ReadSocketData+0xfc>)
    3db4:	47a0      	blx	r4
    3db6:	e03d      	b.n	3e34 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    3db8:	4824      	ldr	r0, [pc, #144]	; (3e4c <Socket_ReadSocketData+0x100>)
    3dba:	4d25      	ldr	r5, [pc, #148]	; (3e50 <Socket_ReadSocketData+0x104>)
    3dbc:	47a8      	blx	r5
    3dbe:	0021      	movs	r1, r4
    3dc0:	4824      	ldr	r0, [pc, #144]	; (3e54 <Socket_ReadSocketData+0x108>)
    3dc2:	47a8      	blx	r5
    3dc4:	200d      	movs	r0, #13
    3dc6:	4b24      	ldr	r3, [pc, #144]	; (3e58 <Socket_ReadSocketData+0x10c>)
    3dc8:	4798      	blx	r3
				break;
    3dca:	e033      	b.n	3e34 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    3dcc:	2c00      	cmp	r4, #0
    3dce:	d031      	beq.n	3e34 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3dd0:	465b      	mov	r3, fp
    3dd2:	889b      	ldrh	r3, [r3, #4]
    3dd4:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    3dd6:	b21b      	sxth	r3, r3
    3dd8:	2b00      	cmp	r3, #0
    3dda:	dde3      	ble.n	3da4 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    3ddc:	9b03      	ldr	r3, [sp, #12]
    3dde:	889d      	ldrh	r5, [r3, #4]
    3de0:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    3de2:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    3de4:	4a17      	ldr	r2, [pc, #92]	; (3e44 <Socket_ReadSocketData+0xf8>)
    3de6:	4651      	mov	r1, sl
    3de8:	5889      	ldr	r1, [r1, r2]
    3dea:	002a      	movs	r2, r5
    3dec:	9800      	ldr	r0, [sp, #0]
    3dee:	4f16      	ldr	r7, [pc, #88]	; (3e48 <Socket_ReadSocketData+0xfc>)
    3df0:	47b8      	blx	r7
    3df2:	2800      	cmp	r0, #0
    3df4:	d1e0      	bne.n	3db8 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    3df6:	4b13      	ldr	r3, [pc, #76]	; (3e44 <Socket_ReadSocketData+0xf8>)
    3df8:	4652      	mov	r2, sl
    3dfa:	58d3      	ldr	r3, [r2, r3]
    3dfc:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    3dfe:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    3e00:	88f3      	ldrh	r3, [r6, #6]
    3e02:	1b5b      	subs	r3, r3, r5
    3e04:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    3e06:	4b15      	ldr	r3, [pc, #84]	; (3e5c <Socket_ReadSocketData+0x110>)
    3e08:	681b      	ldr	r3, [r3, #0]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d005      	beq.n	3e1a <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    3e0e:	4b13      	ldr	r3, [pc, #76]	; (3e5c <Socket_ReadSocketData+0x110>)
    3e10:	681b      	ldr	r3, [r3, #0]
    3e12:	0032      	movs	r2, r6
    3e14:	9902      	ldr	r1, [sp, #8]
    3e16:	9801      	ldr	r0, [sp, #4]
    3e18:	4798      	blx	r3
				u16ReadCount -= u16Read;
    3e1a:	1b64      	subs	r4, r4, r5
    3e1c:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    3e1e:	9b00      	ldr	r3, [sp, #0]
    3e20:	469c      	mov	ip, r3
    3e22:	44ac      	add	ip, r5
    3e24:	4663      	mov	r3, ip
    3e26:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    3e28:	4643      	mov	r3, r8
    3e2a:	781b      	ldrb	r3, [r3, #0]
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	d1cd      	bne.n	3dcc <Socket_ReadSocketData+0x80>
    3e30:	2c00      	cmp	r4, #0
    3e32:	d1ba      	bne.n	3daa <Socket_ReadSocketData+0x5e>
	}
}
    3e34:	b005      	add	sp, #20
    3e36:	bc3c      	pop	{r2, r3, r4, r5}
    3e38:	4690      	mov	r8, r2
    3e3a:	4699      	mov	r9, r3
    3e3c:	46a2      	mov	sl, r4
    3e3e:	46ab      	mov	fp, r5
    3e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e42:	46c0      	nop			; (mov r8, r8)
    3e44:	200014d0 	.word	0x200014d0
    3e48:	00001885 	.word	0x00001885
    3e4c:	00008cc0 	.word	0x00008cc0
    3e50:	000075f9 	.word	0x000075f9
    3e54:	000097cc 	.word	0x000097cc
    3e58:	0000762d 	.word	0x0000762d
    3e5c:	20001580 	.word	0x20001580

00003e60 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    3e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e62:	46d6      	mov	lr, sl
    3e64:	464f      	mov	r7, r9
    3e66:	4646      	mov	r6, r8
    3e68:	b5c0      	push	{r6, r7, lr}
    3e6a:	b09a      	sub	sp, #104	; 0x68
    3e6c:	000d      	movs	r5, r1
    3e6e:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    3e70:	2841      	cmp	r0, #65	; 0x41
    3e72:	d039      	beq.n	3ee8 <m2m_ip_cb+0x88>
    3e74:	2854      	cmp	r0, #84	; 0x54
    3e76:	d037      	beq.n	3ee8 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    3e78:	2842      	cmp	r0, #66	; 0x42
    3e7a:	d053      	beq.n	3f24 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    3e7c:	2843      	cmp	r0, #67	; 0x43
    3e7e:	d06a      	beq.n	3f56 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    3e80:	2844      	cmp	r0, #68	; 0x44
    3e82:	d100      	bne.n	3e86 <m2m_ip_cb+0x26>
    3e84:	e0af      	b.n	3fe6 <m2m_ip_cb+0x186>
    3e86:	284b      	cmp	r0, #75	; 0x4b
    3e88:	d100      	bne.n	3e8c <m2m_ip_cb+0x2c>
    3e8a:	e0ac      	b.n	3fe6 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    3e8c:	284a      	cmp	r0, #74	; 0x4a
    3e8e:	d100      	bne.n	3e92 <m2m_ip_cb+0x32>
    3e90:	e0cf      	b.n	4032 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    3e92:	2846      	cmp	r0, #70	; 0x46
    3e94:	d100      	bne.n	3e98 <m2m_ip_cb+0x38>
    3e96:	e0e5      	b.n	4064 <m2m_ip_cb+0x204>
    3e98:	2848      	cmp	r0, #72	; 0x48
    3e9a:	d100      	bne.n	3e9e <m2m_ip_cb+0x3e>
    3e9c:	e10e      	b.n	40bc <m2m_ip_cb+0x25c>
    3e9e:	284d      	cmp	r0, #77	; 0x4d
    3ea0:	d100      	bne.n	3ea4 <m2m_ip_cb+0x44>
    3ea2:	e0dc      	b.n	405e <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3ea4:	2845      	cmp	r0, #69	; 0x45
    3ea6:	d100      	bne.n	3eaa <m2m_ip_cb+0x4a>
    3ea8:	e12c      	b.n	4104 <m2m_ip_cb+0x2a4>
    3eaa:	2847      	cmp	r0, #71	; 0x47
    3eac:	d100      	bne.n	3eb0 <m2m_ip_cb+0x50>
    3eae:	e14d      	b.n	414c <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3eb0:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3eb2:	284c      	cmp	r0, #76	; 0x4c
    3eb4:	d100      	bne.n	3eb8 <m2m_ip_cb+0x58>
    3eb6:	e126      	b.n	4106 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    3eb8:	2852      	cmp	r0, #82	; 0x52
    3eba:	d12d      	bne.n	3f18 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    3ebc:	2301      	movs	r3, #1
    3ebe:	2214      	movs	r2, #20
    3ec0:	a909      	add	r1, sp, #36	; 0x24
    3ec2:	0020      	movs	r0, r4
    3ec4:	4ca2      	ldr	r4, [pc, #648]	; (4150 <m2m_ip_cb+0x2f0>)
    3ec6:	47a0      	blx	r4
    3ec8:	2800      	cmp	r0, #0
    3eca:	d125      	bne.n	3f18 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    3ecc:	4ba1      	ldr	r3, [pc, #644]	; (4154 <m2m_ip_cb+0x2f4>)
    3ece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3ed0:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    3ed2:	681b      	ldr	r3, [r3, #0]
    3ed4:	2b00      	cmp	r3, #0
    3ed6:	d01f      	beq.n	3f18 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    3ed8:	4b9e      	ldr	r3, [pc, #632]	; (4154 <m2m_ip_cb+0x2f4>)
    3eda:	681c      	ldr	r4, [r3, #0]
    3edc:	ab09      	add	r3, sp, #36	; 0x24
    3ede:	7c1a      	ldrb	r2, [r3, #16]
    3ee0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3ee2:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ee4:	47a0      	blx	r4
			}
		}
	}
}
    3ee6:	e017      	b.n	3f18 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    3ee8:	2300      	movs	r3, #0
    3eea:	2204      	movs	r2, #4
    3eec:	a909      	add	r1, sp, #36	; 0x24
    3eee:	0020      	movs	r0, r4
    3ef0:	4c97      	ldr	r4, [pc, #604]	; (4150 <m2m_ip_cb+0x2f0>)
    3ef2:	47a0      	blx	r4
    3ef4:	2800      	cmp	r0, #0
    3ef6:	d10f      	bne.n	3f18 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    3ef8:	ab09      	add	r3, sp, #36	; 0x24
    3efa:	785a      	ldrb	r2, [r3, #1]
    3efc:	ab05      	add	r3, sp, #20
    3efe:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3f00:	4b95      	ldr	r3, [pc, #596]	; (4158 <m2m_ip_cb+0x2f8>)
    3f02:	681b      	ldr	r3, [r3, #0]
    3f04:	2b00      	cmp	r3, #0
    3f06:	d007      	beq.n	3f18 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    3f08:	4b93      	ldr	r3, [pc, #588]	; (4158 <m2m_ip_cb+0x2f8>)
    3f0a:	681b      	ldr	r3, [r3, #0]
    3f0c:	aa09      	add	r2, sp, #36	; 0x24
    3f0e:	2000      	movs	r0, #0
    3f10:	5610      	ldrsb	r0, [r2, r0]
    3f12:	aa05      	add	r2, sp, #20
    3f14:	2101      	movs	r1, #1
    3f16:	4798      	blx	r3
}
    3f18:	b01a      	add	sp, #104	; 0x68
    3f1a:	bc1c      	pop	{r2, r3, r4}
    3f1c:	4690      	mov	r8, r2
    3f1e:	4699      	mov	r9, r3
    3f20:	46a2      	mov	sl, r4
    3f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    3f24:	2300      	movs	r3, #0
    3f26:	2204      	movs	r2, #4
    3f28:	a909      	add	r1, sp, #36	; 0x24
    3f2a:	0020      	movs	r0, r4
    3f2c:	4c88      	ldr	r4, [pc, #544]	; (4150 <m2m_ip_cb+0x2f0>)
    3f2e:	47a0      	blx	r4
    3f30:	2800      	cmp	r0, #0
    3f32:	d1f1      	bne.n	3f18 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    3f34:	ab09      	add	r3, sp, #36	; 0x24
    3f36:	785a      	ldrb	r2, [r3, #1]
    3f38:	ab05      	add	r3, sp, #20
    3f3a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3f3c:	4b86      	ldr	r3, [pc, #536]	; (4158 <m2m_ip_cb+0x2f8>)
    3f3e:	681b      	ldr	r3, [r3, #0]
    3f40:	2b00      	cmp	r3, #0
    3f42:	d0e9      	beq.n	3f18 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    3f44:	4b84      	ldr	r3, [pc, #528]	; (4158 <m2m_ip_cb+0x2f8>)
    3f46:	681b      	ldr	r3, [r3, #0]
    3f48:	aa09      	add	r2, sp, #36	; 0x24
    3f4a:	2000      	movs	r0, #0
    3f4c:	5610      	ldrsb	r0, [r2, r0]
    3f4e:	aa05      	add	r2, sp, #20
    3f50:	2102      	movs	r1, #2
    3f52:	4798      	blx	r3
    3f54:	e7e0      	b.n	3f18 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    3f56:	2300      	movs	r3, #0
    3f58:	220c      	movs	r2, #12
    3f5a:	a905      	add	r1, sp, #20
    3f5c:	0020      	movs	r0, r4
    3f5e:	4c7c      	ldr	r4, [pc, #496]	; (4150 <m2m_ip_cb+0x2f0>)
    3f60:	47a0      	blx	r4
    3f62:	2800      	cmp	r0, #0
    3f64:	d1d8      	bne.n	3f18 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    3f66:	ab05      	add	r3, sp, #20
    3f68:	2209      	movs	r2, #9
    3f6a:	569a      	ldrsb	r2, [r3, r2]
    3f6c:	2a00      	cmp	r2, #0
    3f6e:	db24      	blt.n	3fba <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    3f70:	0018      	movs	r0, r3
    3f72:	2108      	movs	r1, #8
    3f74:	5659      	ldrsb	r1, [r3, r1]
    3f76:	4b79      	ldr	r3, [pc, #484]	; (415c <m2m_ip_cb+0x2fc>)
    3f78:	0109      	lsls	r1, r1, #4
    3f7a:	1859      	adds	r1, r3, r1
    3f7c:	7ac9      	ldrb	r1, [r1, #11]
    3f7e:	b2c9      	uxtb	r1, r1
    3f80:	0114      	lsls	r4, r2, #4
    3f82:	191b      	adds	r3, r3, r4
    3f84:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    3f86:	2101      	movs	r1, #1
    3f88:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3f8a:	8941      	ldrh	r1, [r0, #10]
    3f8c:	3908      	subs	r1, #8
    3f8e:	b289      	uxth	r1, r1
    3f90:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    3f92:	4973      	ldr	r1, [pc, #460]	; (4160 <m2m_ip_cb+0x300>)
    3f94:	880b      	ldrh	r3, [r1, #0]
    3f96:	3301      	adds	r3, #1
    3f98:	b29b      	uxth	r3, r3
    3f9a:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    3f9c:	880b      	ldrh	r3, [r1, #0]
    3f9e:	b29b      	uxth	r3, r3
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d103      	bne.n	3fac <m2m_ip_cb+0x14c>
					++gu16SessionID;
    3fa4:	880b      	ldrh	r3, [r1, #0]
    3fa6:	3301      	adds	r3, #1
    3fa8:	b29b      	uxth	r3, r3
    3faa:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    3fac:	4b6c      	ldr	r3, [pc, #432]	; (4160 <m2m_ip_cb+0x300>)
    3fae:	8819      	ldrh	r1, [r3, #0]
    3fb0:	b289      	uxth	r1, r1
    3fb2:	0110      	lsls	r0, r2, #4
    3fb4:	4b69      	ldr	r3, [pc, #420]	; (415c <m2m_ip_cb+0x2fc>)
    3fb6:	181b      	adds	r3, r3, r0
    3fb8:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    3fba:	ab09      	add	r3, sp, #36	; 0x24
    3fbc:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    3fbe:	2202      	movs	r2, #2
    3fc0:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    3fc2:	aa05      	add	r2, sp, #20
    3fc4:	8851      	ldrh	r1, [r2, #2]
    3fc6:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    3fc8:	9a06      	ldr	r2, [sp, #24]
    3fca:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    3fcc:	4b62      	ldr	r3, [pc, #392]	; (4158 <m2m_ip_cb+0x2f8>)
    3fce:	681b      	ldr	r3, [r3, #0]
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	d0a1      	beq.n	3f18 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    3fd4:	4b60      	ldr	r3, [pc, #384]	; (4158 <m2m_ip_cb+0x2f8>)
    3fd6:	681b      	ldr	r3, [r3, #0]
    3fd8:	aa05      	add	r2, sp, #20
    3fda:	2008      	movs	r0, #8
    3fdc:	5610      	ldrsb	r0, [r2, r0]
    3fde:	aa09      	add	r2, sp, #36	; 0x24
    3fe0:	2104      	movs	r1, #4
    3fe2:	4798      	blx	r3
    3fe4:	e798      	b.n	3f18 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    3fe6:	2300      	movs	r3, #0
    3fe8:	2204      	movs	r2, #4
    3fea:	a909      	add	r1, sp, #36	; 0x24
    3fec:	0020      	movs	r0, r4
    3fee:	4c58      	ldr	r4, [pc, #352]	; (4150 <m2m_ip_cb+0x2f0>)
    3ff0:	47a0      	blx	r4
    3ff2:	2800      	cmp	r0, #0
    3ff4:	d000      	beq.n	3ff8 <m2m_ip_cb+0x198>
    3ff6:	e78f      	b.n	3f18 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    3ff8:	ab09      	add	r3, sp, #36	; 0x24
    3ffa:	2000      	movs	r0, #0
    3ffc:	5618      	ldrsb	r0, [r3, r0]
    3ffe:	aa05      	add	r2, sp, #20
    4000:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    4002:	785b      	ldrb	r3, [r3, #1]
    4004:	b25b      	sxtb	r3, r3
    4006:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    4008:	2b00      	cmp	r3, #0
    400a:	d107      	bne.n	401c <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    400c:	ab09      	add	r3, sp, #36	; 0x24
    400e:	885b      	ldrh	r3, [r3, #2]
    4010:	3b08      	subs	r3, #8
    4012:	b29b      	uxth	r3, r3
    4014:	0101      	lsls	r1, r0, #4
    4016:	4a51      	ldr	r2, [pc, #324]	; (415c <m2m_ip_cb+0x2fc>)
    4018:	1852      	adds	r2, r2, r1
    401a:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    401c:	4b4e      	ldr	r3, [pc, #312]	; (4158 <m2m_ip_cb+0x2f8>)
    401e:	681b      	ldr	r3, [r3, #0]
    4020:	2b00      	cmp	r3, #0
    4022:	d100      	bne.n	4026 <m2m_ip_cb+0x1c6>
    4024:	e778      	b.n	3f18 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    4026:	4b4c      	ldr	r3, [pc, #304]	; (4158 <m2m_ip_cb+0x2f8>)
    4028:	681b      	ldr	r3, [r3, #0]
    402a:	aa05      	add	r2, sp, #20
    402c:	2105      	movs	r1, #5
    402e:	4798      	blx	r3
	{
    4030:	e772      	b.n	3f18 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    4032:	2300      	movs	r3, #0
    4034:	2244      	movs	r2, #68	; 0x44
    4036:	a909      	add	r1, sp, #36	; 0x24
    4038:	0020      	movs	r0, r4
    403a:	4c45      	ldr	r4, [pc, #276]	; (4150 <m2m_ip_cb+0x2f0>)
    403c:	47a0      	blx	r4
    403e:	2800      	cmp	r0, #0
    4040:	d000      	beq.n	4044 <m2m_ip_cb+0x1e4>
    4042:	e769      	b.n	3f18 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    4044:	4b47      	ldr	r3, [pc, #284]	; (4164 <m2m_ip_cb+0x304>)
    4046:	681b      	ldr	r3, [r3, #0]
    4048:	2b00      	cmp	r3, #0
    404a:	d100      	bne.n	404e <m2m_ip_cb+0x1ee>
    404c:	e764      	b.n	3f18 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    404e:	4b45      	ldr	r3, [pc, #276]	; (4164 <m2m_ip_cb+0x304>)
    4050:	681b      	ldr	r3, [r3, #0]
    4052:	9a19      	ldr	r2, [sp, #100]	; 0x64
    4054:	9203      	str	r2, [sp, #12]
    4056:	0011      	movs	r1, r2
    4058:	a809      	add	r0, sp, #36	; 0x24
    405a:	4798      	blx	r3
    405c:	e75c      	b.n	3f18 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    405e:	2306      	movs	r3, #6
    4060:	469a      	mov	sl, r3
    4062:	e001      	b.n	4068 <m2m_ip_cb+0x208>
    4064:	2306      	movs	r3, #6
    4066:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    4068:	2300      	movs	r3, #0
    406a:	2210      	movs	r2, #16
    406c:	a905      	add	r1, sp, #20
    406e:	0020      	movs	r0, r4
    4070:	4f37      	ldr	r7, [pc, #220]	; (4150 <m2m_ip_cb+0x2f0>)
    4072:	47b8      	blx	r7
    4074:	2800      	cmp	r0, #0
    4076:	d000      	beq.n	407a <m2m_ip_cb+0x21a>
    4078:	e74e      	b.n	3f18 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    407a:	aa05      	add	r2, sp, #20
    407c:	200c      	movs	r0, #12
    407e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    4080:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    4082:	0107      	lsls	r7, r0, #4
    4084:	4935      	ldr	r1, [pc, #212]	; (415c <m2m_ip_cb+0x2fc>)
    4086:	19c9      	adds	r1, r1, r7
    4088:	2700      	movs	r7, #0
    408a:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    408c:	2608      	movs	r6, #8
    408e:	5f97      	ldrsh	r7, [r2, r6]
    4090:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    4092:	8957      	ldrh	r7, [r2, #10]
    4094:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    4096:	af09      	add	r7, sp, #36	; 0x24
    4098:	8856      	ldrh	r6, [r2, #2]
    409a:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    409c:	9a06      	ldr	r2, [sp, #24]
    409e:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    40a0:	88ca      	ldrh	r2, [r1, #6]
    40a2:	b292      	uxth	r2, r2
    40a4:	4293      	cmp	r3, r2
    40a6:	d00c      	beq.n	40c2 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    40a8:	2d10      	cmp	r5, #16
    40aa:	d800      	bhi.n	40ae <m2m_ip_cb+0x24e>
    40ac:	e734      	b.n	3f18 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    40ae:	2301      	movs	r3, #1
    40b0:	2200      	movs	r2, #0
    40b2:	2100      	movs	r1, #0
    40b4:	2000      	movs	r0, #0
    40b6:	4c26      	ldr	r4, [pc, #152]	; (4150 <m2m_ip_cb+0x2f0>)
    40b8:	47a0      	blx	r4
	{
    40ba:	e72d      	b.n	3f18 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    40bc:	2309      	movs	r3, #9
    40be:	469a      	mov	sl, r3
    40c0:	e7d2      	b.n	4068 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    40c2:	4643      	mov	r3, r8
    40c4:	2b00      	cmp	r3, #0
    40c6:	dd01      	ble.n	40cc <m2m_ip_cb+0x26c>
    40c8:	45a8      	cmp	r8, r5
    40ca:	db0f      	blt.n	40ec <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    40cc:	ab09      	add	r3, sp, #36	; 0x24
    40ce:	4642      	mov	r2, r8
    40d0:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    40d2:	2300      	movs	r3, #0
    40d4:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    40d6:	4b20      	ldr	r3, [pc, #128]	; (4158 <m2m_ip_cb+0x2f8>)
    40d8:	681b      	ldr	r3, [r3, #0]
    40da:	2b00      	cmp	r3, #0
    40dc:	d100      	bne.n	40e0 <m2m_ip_cb+0x280>
    40de:	e71b      	b.n	3f18 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    40e0:	4b1d      	ldr	r3, [pc, #116]	; (4158 <m2m_ip_cb+0x2f8>)
    40e2:	681b      	ldr	r3, [r3, #0]
    40e4:	aa09      	add	r2, sp, #36	; 0x24
    40e6:	4651      	mov	r1, sl
    40e8:	4798      	blx	r3
    40ea:	e715      	b.n	3f18 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    40ec:	0023      	movs	r3, r4
    40ee:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    40f0:	4642      	mov	r2, r8
    40f2:	4669      	mov	r1, sp
    40f4:	818a      	strh	r2, [r1, #12]
    40f6:	898a      	ldrh	r2, [r1, #12]
    40f8:	9200      	str	r2, [sp, #0]
    40fa:	4652      	mov	r2, sl
    40fc:	0039      	movs	r1, r7
    40fe:	4c1a      	ldr	r4, [pc, #104]	; (4168 <m2m_ip_cb+0x308>)
    4100:	47a0      	blx	r4
    4102:	e709      	b.n	3f18 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    4104:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    4106:	2300      	movs	r3, #0
    4108:	2208      	movs	r2, #8
    410a:	a909      	add	r1, sp, #36	; 0x24
    410c:	0020      	movs	r0, r4
    410e:	4c10      	ldr	r4, [pc, #64]	; (4150 <m2m_ip_cb+0x2f0>)
    4110:	47a0      	blx	r4
    4112:	2800      	cmp	r0, #0
    4114:	d000      	beq.n	4118 <m2m_ip_cb+0x2b8>
    4116:	e6ff      	b.n	3f18 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    4118:	ab09      	add	r3, sp, #36	; 0x24
    411a:	2000      	movs	r0, #0
    411c:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    411e:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    4120:	8859      	ldrh	r1, [r3, #2]
    4122:	ab05      	add	r3, sp, #20
    4124:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4126:	0101      	lsls	r1, r0, #4
    4128:	4b0c      	ldr	r3, [pc, #48]	; (415c <m2m_ip_cb+0x2fc>)
    412a:	185b      	adds	r3, r3, r1
    412c:	88db      	ldrh	r3, [r3, #6]
    412e:	b29b      	uxth	r3, r3
    4130:	429a      	cmp	r2, r3
    4132:	d000      	beq.n	4136 <m2m_ip_cb+0x2d6>
    4134:	e6f0      	b.n	3f18 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    4136:	4b08      	ldr	r3, [pc, #32]	; (4158 <m2m_ip_cb+0x2f8>)
    4138:	681b      	ldr	r3, [r3, #0]
    413a:	2b00      	cmp	r3, #0
    413c:	d100      	bne.n	4140 <m2m_ip_cb+0x2e0>
    413e:	e6eb      	b.n	3f18 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    4140:	4b05      	ldr	r3, [pc, #20]	; (4158 <m2m_ip_cb+0x2f8>)
    4142:	681b      	ldr	r3, [r3, #0]
    4144:	aa05      	add	r2, sp, #20
    4146:	0029      	movs	r1, r5
    4148:	4798      	blx	r3
	{
    414a:	e6e5      	b.n	3f18 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    414c:	2508      	movs	r5, #8
    414e:	e7da      	b.n	4106 <m2m_ip_cb+0x2a6>
    4150:	00001885 	.word	0x00001885
    4154:	20001584 	.word	0x20001584
    4158:	20001580 	.word	0x20001580
    415c:	200014d0 	.word	0x200014d0
    4160:	200002b6 	.word	0x200002b6
    4164:	20001588 	.word	0x20001588
    4168:	00003d4d 	.word	0x00003d4d

0000416c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    416c:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    416e:	4b0a      	ldr	r3, [pc, #40]	; (4198 <socketInit+0x2c>)
    4170:	781b      	ldrb	r3, [r3, #0]
    4172:	2b00      	cmp	r3, #0
    4174:	d000      	beq.n	4178 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    4176:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    4178:	22b0      	movs	r2, #176	; 0xb0
    417a:	2100      	movs	r1, #0
    417c:	4807      	ldr	r0, [pc, #28]	; (419c <socketInit+0x30>)
    417e:	4b08      	ldr	r3, [pc, #32]	; (41a0 <socketInit+0x34>)
    4180:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    4182:	4908      	ldr	r1, [pc, #32]	; (41a4 <socketInit+0x38>)
    4184:	2002      	movs	r0, #2
    4186:	4b08      	ldr	r3, [pc, #32]	; (41a8 <socketInit+0x3c>)
    4188:	4798      	blx	r3
		gbSocketInit	= 1;
    418a:	2201      	movs	r2, #1
    418c:	4b02      	ldr	r3, [pc, #8]	; (4198 <socketInit+0x2c>)
    418e:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    4190:	2200      	movs	r2, #0
    4192:	4b06      	ldr	r3, [pc, #24]	; (41ac <socketInit+0x40>)
    4194:	801a      	strh	r2, [r3, #0]
}
    4196:	e7ee      	b.n	4176 <socketInit+0xa>
    4198:	200002b5 	.word	0x200002b5
    419c:	200014d0 	.word	0x200014d0
    41a0:	000010e1 	.word	0x000010e1
    41a4:	00003e61 	.word	0x00003e61
    41a8:	0000196d 	.word	0x0000196d
    41ac:	200002b6 	.word	0x200002b6

000041b0 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    41b0:	4b02      	ldr	r3, [pc, #8]	; (41bc <registerSocketCallback+0xc>)
    41b2:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    41b4:	4b02      	ldr	r3, [pc, #8]	; (41c0 <registerSocketCallback+0x10>)
    41b6:	6019      	str	r1, [r3, #0]
}
    41b8:	4770      	bx	lr
    41ba:	46c0      	nop			; (mov r8, r8)
    41bc:	20001580 	.word	0x20001580
    41c0:	20001588 	.word	0x20001588

000041c4 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    41c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    41c6:	46d6      	mov	lr, sl
    41c8:	4647      	mov	r7, r8
    41ca:	b580      	push	{r7, lr}
    41cc:	b089      	sub	sp, #36	; 0x24
    41ce:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    41d0:	2802      	cmp	r0, #2
    41d2:	d000      	beq.n	41d6 <socket+0x12>
    41d4:	e09c      	b.n	4310 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    41d6:	2901      	cmp	r1, #1
    41d8:	d00a      	beq.n	41f0 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    41da:	2902      	cmp	r1, #2
    41dc:	d100      	bne.n	41e0 <socket+0x1c>
    41de:	e070      	b.n	42c2 <socket+0xfe>
	SOCKET					sock = -1;
    41e0:	2501      	movs	r5, #1
    41e2:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    41e4:	0028      	movs	r0, r5
    41e6:	b009      	add	sp, #36	; 0x24
    41e8:	bc0c      	pop	{r2, r3}
    41ea:	4690      	mov	r8, r2
    41ec:	469a      	mov	sl, r3
    41ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    41f0:	4c49      	ldr	r4, [pc, #292]	; (4318 <socket+0x154>)
    41f2:	7827      	ldrb	r7, [r4, #0]
    41f4:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    41f6:	7826      	ldrb	r6, [r4, #0]
    41f8:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    41fa:	7820      	ldrb	r0, [r4, #0]
    41fc:	3001      	adds	r0, #1
    41fe:	3106      	adds	r1, #6
    4200:	4b46      	ldr	r3, [pc, #280]	; (431c <socket+0x158>)
    4202:	4798      	blx	r3
    4204:	b2c9      	uxtb	r1, r1
    4206:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    4208:	0132      	lsls	r2, r6, #4
    420a:	4b45      	ldr	r3, [pc, #276]	; (4320 <socket+0x15c>)
    420c:	189b      	adds	r3, r3, r2
    420e:	7a9b      	ldrb	r3, [r3, #10]
    4210:	2506      	movs	r5, #6
    4212:	2b00      	cmp	r3, #0
    4214:	d018      	beq.n	4248 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    4216:	4e40      	ldr	r6, [pc, #256]	; (4318 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    4218:	4b40      	ldr	r3, [pc, #256]	; (431c <socket+0x158>)
    421a:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    421c:	4b40      	ldr	r3, [pc, #256]	; (4320 <socket+0x15c>)
    421e:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    4220:	7837      	ldrb	r7, [r6, #0]
    4222:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    4224:	7834      	ldrb	r4, [r6, #0]
    4226:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    4228:	7830      	ldrb	r0, [r6, #0]
    422a:	3001      	adds	r0, #1
    422c:	2107      	movs	r1, #7
    422e:	47d0      	blx	sl
    4230:	b2c9      	uxtb	r1, r1
    4232:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    4234:	0123      	lsls	r3, r4, #4
    4236:	4443      	add	r3, r8
    4238:	7a9b      	ldrb	r3, [r3, #10]
    423a:	2b00      	cmp	r3, #0
    423c:	d007      	beq.n	424e <socket+0x8a>
    423e:	3d01      	subs	r5, #1
    4240:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    4242:	2d00      	cmp	r5, #0
    4244:	d1ec      	bne.n	4220 <socket+0x5c>
    4246:	e7cb      	b.n	41e0 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    4248:	4b35      	ldr	r3, [pc, #212]	; (4320 <socket+0x15c>)
    424a:	18d4      	adds	r4, r2, r3
    424c:	e002      	b.n	4254 <socket+0x90>
    424e:	0124      	lsls	r4, r4, #4
    4250:	4b33      	ldr	r3, [pc, #204]	; (4320 <socket+0x15c>)
    4252:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    4254:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    4256:	2d00      	cmp	r5, #0
    4258:	dbc4      	blt.n	41e4 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    425a:	2210      	movs	r2, #16
    425c:	2100      	movs	r1, #0
    425e:	0020      	movs	r0, r4
    4260:	4b30      	ldr	r3, [pc, #192]	; (4324 <socket+0x160>)
    4262:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    4264:	2301      	movs	r3, #1
    4266:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    4268:	4a2f      	ldr	r2, [pc, #188]	; (4328 <socket+0x164>)
    426a:	8813      	ldrh	r3, [r2, #0]
    426c:	3301      	adds	r3, #1
    426e:	b29b      	uxth	r3, r3
    4270:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    4272:	8813      	ldrh	r3, [r2, #0]
    4274:	b29b      	uxth	r3, r3
    4276:	2b00      	cmp	r3, #0
    4278:	d103      	bne.n	4282 <socket+0xbe>
				++gu16SessionID;
    427a:	8813      	ldrh	r3, [r2, #0]
    427c:	3301      	adds	r3, #1
    427e:	b29b      	uxth	r3, r3
    4280:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    4282:	4e29      	ldr	r6, [pc, #164]	; (4328 <socket+0x164>)
    4284:	8833      	ldrh	r3, [r6, #0]
    4286:	b29b      	uxth	r3, r3
    4288:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    428a:	4828      	ldr	r0, [pc, #160]	; (432c <socket+0x168>)
    428c:	4f28      	ldr	r7, [pc, #160]	; (4330 <socket+0x16c>)
    428e:	47b8      	blx	r7
    4290:	8832      	ldrh	r2, [r6, #0]
    4292:	b292      	uxth	r2, r2
    4294:	0029      	movs	r1, r5
    4296:	4827      	ldr	r0, [pc, #156]	; (4334 <socket+0x170>)
    4298:	47b8      	blx	r7
    429a:	200d      	movs	r0, #13
    429c:	4b26      	ldr	r3, [pc, #152]	; (4338 <socket+0x174>)
    429e:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    42a0:	9b05      	ldr	r3, [sp, #20]
    42a2:	07db      	lsls	r3, r3, #31
    42a4:	d59e      	bpl.n	41e4 <socket+0x20>
				strSSLCreate.sslSock = sock;
    42a6:	aa07      	add	r2, sp, #28
    42a8:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    42aa:	2321      	movs	r3, #33	; 0x21
    42ac:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    42ae:	2300      	movs	r3, #0
    42b0:	9302      	str	r3, [sp, #8]
    42b2:	9301      	str	r3, [sp, #4]
    42b4:	9300      	str	r3, [sp, #0]
    42b6:	3304      	adds	r3, #4
    42b8:	2150      	movs	r1, #80	; 0x50
    42ba:	2002      	movs	r0, #2
    42bc:	4c1f      	ldr	r4, [pc, #124]	; (433c <socket+0x178>)
    42be:	47a0      	blx	r4
    42c0:	e790      	b.n	41e4 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    42c2:	4b1f      	ldr	r3, [pc, #124]	; (4340 <socket+0x17c>)
    42c4:	781d      	ldrb	r5, [r3, #0]
    42c6:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    42c8:	781c      	ldrb	r4, [r3, #0]
    42ca:	0124      	lsls	r4, r4, #4
    42cc:	4a1d      	ldr	r2, [pc, #116]	; (4344 <socket+0x180>)
    42ce:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    42d0:	7819      	ldrb	r1, [r3, #0]
    42d2:	3101      	adds	r1, #1
    42d4:	2203      	movs	r2, #3
    42d6:	400a      	ands	r2, r1
    42d8:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    42da:	7aa3      	ldrb	r3, [r4, #10]
    42dc:	2b00      	cmp	r3, #0
    42de:	d014      	beq.n	430a <socket+0x146>
    42e0:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    42e2:	4917      	ldr	r1, [pc, #92]	; (4340 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    42e4:	4f17      	ldr	r7, [pc, #92]	; (4344 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    42e6:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    42e8:	780d      	ldrb	r5, [r1, #0]
    42ea:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    42ec:	780c      	ldrb	r4, [r1, #0]
    42ee:	0124      	lsls	r4, r4, #4
    42f0:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    42f2:	780b      	ldrb	r3, [r1, #0]
    42f4:	3301      	adds	r3, #1
    42f6:	4003      	ands	r3, r0
    42f8:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    42fa:	7aa3      	ldrb	r3, [r4, #10]
    42fc:	2b00      	cmp	r3, #0
    42fe:	d004      	beq.n	430a <socket+0x146>
    4300:	3a01      	subs	r2, #1
    4302:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    4304:	2a00      	cmp	r2, #0
    4306:	d1ef      	bne.n	42e8 <socket+0x124>
    4308:	e76a      	b.n	41e0 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    430a:	3507      	adds	r5, #7
    430c:	b26d      	sxtb	r5, r5
					break;
    430e:	e7a2      	b.n	4256 <socket+0x92>
	SOCKET					sock = -1;
    4310:	2501      	movs	r5, #1
    4312:	426d      	negs	r5, r5
    4314:	e766      	b.n	41e4 <socket+0x20>
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	200002b8 	.word	0x200002b8
    431c:	00007399 	.word	0x00007399
    4320:	200014d0 	.word	0x200014d0
    4324:	000010e1 	.word	0x000010e1
    4328:	200002b6 	.word	0x200002b6
    432c:	00008cc0 	.word	0x00008cc0
    4330:	000075f9 	.word	0x000075f9
    4334:	000097f8 	.word	0x000097f8
    4338:	0000762d 	.word	0x0000762d
    433c:	000011f5 	.word	0x000011f5
    4340:	200002b9 	.word	0x200002b9
    4344:	20001540 	.word	0x20001540

00004348 <bind>:

Date
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    4348:	b570      	push	{r4, r5, r6, lr}
    434a:	b088      	sub	sp, #32
    434c:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    434e:	2900      	cmp	r1, #0
    4350:	d02b      	beq.n	43aa <bind+0x62>
    4352:	2800      	cmp	r0, #0
    4354:	db2c      	blt.n	43b0 <bind+0x68>
    4356:	0100      	lsls	r0, r0, #4
    4358:	4b1a      	ldr	r3, [pc, #104]	; (43c4 <bind+0x7c>)
    435a:	181b      	adds	r3, r3, r0
    435c:	7a9b      	ldrb	r3, [r3, #10]
    435e:	2b01      	cmp	r3, #1
    4360:	d129      	bne.n	43b6 <bind+0x6e>
    4362:	2a00      	cmp	r2, #0
    4364:	d02a      	beq.n	43bc <bind+0x74>
	{
		tstrBindCmd			strBind;
		uint8				u8CMD = SOCKET_CMD_BIND;
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4366:	4b17      	ldr	r3, [pc, #92]	; (43c4 <bind+0x7c>)
    4368:	181b      	adds	r3, r3, r0
    436a:	7adb      	ldrb	r3, [r3, #11]
		uint8				u8CMD = SOCKET_CMD_BIND;
    436c:	2641      	movs	r6, #65	; 0x41
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    436e:	07db      	lsls	r3, r3, #31
    4370:	d500      	bpl.n	4374 <bind+0x2c>
		{
			u8CMD = SOCKET_CMD_SSL_BIND;
    4372:	3613      	adds	r6, #19
		}

		/* Build the bind request. */
		strBind.sock = sock;
    4374:	ad05      	add	r5, sp, #20
    4376:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    4378:	2208      	movs	r2, #8
    437a:	0028      	movs	r0, r5
    437c:	4b12      	ldr	r3, [pc, #72]	; (43c8 <bind+0x80>)
    437e:	4798      	blx	r3
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
    4380:	0124      	lsls	r4, r4, #4
    4382:	4b10      	ldr	r3, [pc, #64]	; (43c4 <bind+0x7c>)
    4384:	191c      	adds	r4, r3, r4
    4386:	88e3      	ldrh	r3, [r4, #6]
    4388:	816b      	strh	r3, [r5, #10]
		
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
    438a:	2300      	movs	r3, #0
    438c:	9302      	str	r3, [sp, #8]
    438e:	9301      	str	r3, [sp, #4]
    4390:	9300      	str	r3, [sp, #0]
    4392:	330c      	adds	r3, #12
    4394:	002a      	movs	r2, r5
    4396:	0031      	movs	r1, r6
    4398:	2002      	movs	r0, #2
    439a:	4c0c      	ldr	r4, [pc, #48]	; (43cc <bind+0x84>)
    439c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    439e:	2800      	cmp	r0, #0
    43a0:	d001      	beq.n	43a6 <bind+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    43a2:	2009      	movs	r0, #9
    43a4:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    43a6:	b008      	add	sp, #32
    43a8:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    43aa:	2006      	movs	r0, #6
    43ac:	4240      	negs	r0, r0
    43ae:	e7fa      	b.n	43a6 <bind+0x5e>
    43b0:	2006      	movs	r0, #6
    43b2:	4240      	negs	r0, r0
    43b4:	e7f7      	b.n	43a6 <bind+0x5e>
    43b6:	2006      	movs	r0, #6
    43b8:	4240      	negs	r0, r0
    43ba:	e7f4      	b.n	43a6 <bind+0x5e>
    43bc:	2006      	movs	r0, #6
    43be:	4240      	negs	r0, r0
    43c0:	e7f1      	b.n	43a6 <bind+0x5e>
    43c2:	46c0      	nop			; (mov r8, r8)
    43c4:	200014d0 	.word	0x200014d0
    43c8:	000010cd 	.word	0x000010cd
    43cc:	000011f5 	.word	0x000011f5

000043d0 <listen>:

Date
		5 June 2012
*********************************************************************/
sint8 listen(SOCKET sock, uint8 backlog)
{
    43d0:	b510      	push	{r4, lr}
    43d2:	b086      	sub	sp, #24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    43d4:	2800      	cmp	r0, #0
    43d6:	db1c      	blt.n	4412 <listen+0x42>
    43d8:	0102      	lsls	r2, r0, #4
    43da:	4b11      	ldr	r3, [pc, #68]	; (4420 <listen+0x50>)
    43dc:	189b      	adds	r3, r3, r2
    43de:	7a9b      	ldrb	r3, [r3, #10]
    43e0:	2b01      	cmp	r3, #1
    43e2:	d119      	bne.n	4418 <listen+0x48>
	{
		tstrListenCmd		strListen;

		strListen.sock = sock;
    43e4:	aa05      	add	r2, sp, #20
    43e6:	7010      	strb	r0, [r2, #0]
		strListen.u8BackLog = backlog;
    43e8:	7051      	strb	r1, [r2, #1]
		strListen.u16SessionID		= gastrSockets[sock].u16SessionID;
    43ea:	0100      	lsls	r0, r0, #4
    43ec:	4b0c      	ldr	r3, [pc, #48]	; (4420 <listen+0x50>)
    43ee:	1818      	adds	r0, r3, r0
    43f0:	88c3      	ldrh	r3, [r0, #6]
    43f2:	8053      	strh	r3, [r2, #2]

		s8Ret = SOCKET_REQUEST(SOCKET_CMD_LISTEN, (uint8*)&strListen, sizeof(tstrListenCmd), NULL, 0, 0);
    43f4:	2300      	movs	r3, #0
    43f6:	9302      	str	r3, [sp, #8]
    43f8:	9301      	str	r3, [sp, #4]
    43fa:	9300      	str	r3, [sp, #0]
    43fc:	3304      	adds	r3, #4
    43fe:	2142      	movs	r1, #66	; 0x42
    4400:	2002      	movs	r0, #2
    4402:	4c08      	ldr	r4, [pc, #32]	; (4424 <listen+0x54>)
    4404:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    4406:	2800      	cmp	r0, #0
    4408:	d001      	beq.n	440e <listen+0x3e>
		{
			s8Ret = SOCK_ERR_INVALID;
    440a:	2009      	movs	r0, #9
    440c:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    440e:	b006      	add	sp, #24
    4410:	bd10      	pop	{r4, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    4412:	2006      	movs	r0, #6
    4414:	4240      	negs	r0, r0
    4416:	e7fa      	b.n	440e <listen+0x3e>
    4418:	2006      	movs	r0, #6
    441a:	4240      	negs	r0, r0
    441c:	e7f7      	b.n	440e <listen+0x3e>
    441e:	46c0      	nop			; (mov r8, r8)
    4420:	200014d0 	.word	0x200014d0
    4424:	000011f5 	.word	0x000011f5

00004428 <accept>:
*********************************************************************/
sint8 accept(SOCKET sock, struct sockaddr *addr, uint8 *addrlen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1) )
    4428:	2800      	cmp	r0, #0
    442a:	db07      	blt.n	443c <accept+0x14>
    442c:	0100      	lsls	r0, r0, #4
    442e:	4b06      	ldr	r3, [pc, #24]	; (4448 <accept+0x20>)
    4430:	1818      	adds	r0, r3, r0
    4432:	7a83      	ldrb	r3, [r0, #10]
    4434:	2b01      	cmp	r3, #1
    4436:	d104      	bne.n	4442 <accept+0x1a>
	{
		s8Ret = SOCK_ERR_NO_ERROR;
    4438:	2000      	movs	r0, #0
	}
	return s8Ret;
}
    443a:	4770      	bx	lr
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    443c:	2006      	movs	r0, #6
    443e:	4240      	negs	r0, r0
    4440:	e7fb      	b.n	443a <accept+0x12>
    4442:	2006      	movs	r0, #6
    4444:	4240      	negs	r0, r0
    4446:	e7f8      	b.n	443a <accept+0x12>
    4448:	200014d0 	.word	0x200014d0

0000444c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    444c:	b570      	push	{r4, r5, r6, lr}
    444e:	b088      	sub	sp, #32
    4450:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    4452:	db30      	blt.n	44b6 <connect+0x6a>
    4454:	2900      	cmp	r1, #0
    4456:	d031      	beq.n	44bc <connect+0x70>
    4458:	0100      	lsls	r0, r0, #4
    445a:	4b1d      	ldr	r3, [pc, #116]	; (44d0 <connect+0x84>)
    445c:	181b      	adds	r3, r3, r0
    445e:	7a9b      	ldrb	r3, [r3, #10]
    4460:	2b01      	cmp	r3, #1
    4462:	d12e      	bne.n	44c2 <connect+0x76>
    4464:	2a00      	cmp	r2, #0
    4466:	d02f      	beq.n	44c8 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    4468:	4b19      	ldr	r3, [pc, #100]	; (44d0 <connect+0x84>)
    446a:	181b      	adds	r3, r3, r0
    446c:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    446e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    4470:	07db      	lsls	r3, r3, #31
    4472:	d505      	bpl.n	4480 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    4474:	4b16      	ldr	r3, [pc, #88]	; (44d0 <connect+0x84>)
    4476:	181b      	adds	r3, r3, r0
    4478:	7ada      	ldrb	r2, [r3, #11]
    447a:	ab05      	add	r3, sp, #20
    447c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    447e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    4480:	ad05      	add	r5, sp, #20
    4482:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    4484:	2208      	movs	r2, #8
    4486:	0028      	movs	r0, r5
    4488:	4b12      	ldr	r3, [pc, #72]	; (44d4 <connect+0x88>)
    448a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    448c:	0124      	lsls	r4, r4, #4
    448e:	4b10      	ldr	r3, [pc, #64]	; (44d0 <connect+0x84>)
    4490:	191c      	adds	r4, r3, r4
    4492:	88e3      	ldrh	r3, [r4, #6]
    4494:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    4496:	2300      	movs	r3, #0
    4498:	9302      	str	r3, [sp, #8]
    449a:	9301      	str	r3, [sp, #4]
    449c:	9300      	str	r3, [sp, #0]
    449e:	330c      	adds	r3, #12
    44a0:	002a      	movs	r2, r5
    44a2:	0031      	movs	r1, r6
    44a4:	2002      	movs	r0, #2
    44a6:	4c0c      	ldr	r4, [pc, #48]	; (44d8 <connect+0x8c>)
    44a8:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    44aa:	2800      	cmp	r0, #0
    44ac:	d001      	beq.n	44b2 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    44ae:	2009      	movs	r0, #9
    44b0:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    44b2:	b008      	add	sp, #32
    44b4:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    44b6:	2006      	movs	r0, #6
    44b8:	4240      	negs	r0, r0
    44ba:	e7fa      	b.n	44b2 <connect+0x66>
    44bc:	2006      	movs	r0, #6
    44be:	4240      	negs	r0, r0
    44c0:	e7f7      	b.n	44b2 <connect+0x66>
    44c2:	2006      	movs	r0, #6
    44c4:	4240      	negs	r0, r0
    44c6:	e7f4      	b.n	44b2 <connect+0x66>
    44c8:	2006      	movs	r0, #6
    44ca:	4240      	negs	r0, r0
    44cc:	e7f1      	b.n	44b2 <connect+0x66>
    44ce:	46c0      	nop			; (mov r8, r8)
    44d0:	200014d0 	.word	0x200014d0
    44d4:	000010cd 	.word	0x000010cd
    44d8:	000011f5 	.word	0x000011f5

000044dc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    44dc:	b530      	push	{r4, r5, lr}
    44de:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    44e0:	2800      	cmp	r0, #0
    44e2:	db36      	blt.n	4552 <send+0x76>
    44e4:	2900      	cmp	r1, #0
    44e6:	d037      	beq.n	4558 <send+0x7c>
    44e8:	23af      	movs	r3, #175	; 0xaf
    44ea:	00db      	lsls	r3, r3, #3
    44ec:	429a      	cmp	r2, r3
    44ee:	d836      	bhi.n	455e <send+0x82>
    44f0:	0104      	lsls	r4, r0, #4
    44f2:	4b1e      	ldr	r3, [pc, #120]	; (456c <send+0x90>)
    44f4:	191b      	adds	r3, r3, r4
    44f6:	7a9b      	ldrb	r3, [r3, #10]
    44f8:	2b01      	cmp	r3, #1
    44fa:	d133      	bne.n	4564 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    44fc:	ab04      	add	r3, sp, #16
    44fe:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    4500:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    4502:	0025      	movs	r5, r4
    4504:	4c19      	ldr	r4, [pc, #100]	; (456c <send+0x90>)
    4506:	1964      	adds	r4, r4, r5
    4508:	88e4      	ldrh	r4, [r4, #6]
    450a:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    450c:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    450e:	2806      	cmp	r0, #6
    4510:	dd00      	ble.n	4514 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    4512:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4514:	0104      	lsls	r4, r0, #4
    4516:	4b15      	ldr	r3, [pc, #84]	; (456c <send+0x90>)
    4518:	191b      	adds	r3, r3, r4
    451a:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    451c:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    451e:	07e4      	lsls	r4, r4, #31
    4520:	d505      	bpl.n	452e <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    4522:	0100      	lsls	r0, r0, #4
    4524:	4b11      	ldr	r3, [pc, #68]	; (456c <send+0x90>)
    4526:	1818      	adds	r0, r3, r0
    4528:	8905      	ldrh	r5, [r0, #8]
    452a:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    452c:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    452e:	2080      	movs	r0, #128	; 0x80
    4530:	4318      	orrs	r0, r3
    4532:	9502      	str	r5, [sp, #8]
    4534:	9201      	str	r2, [sp, #4]
    4536:	9100      	str	r1, [sp, #0]
    4538:	2310      	movs	r3, #16
    453a:	aa04      	add	r2, sp, #16
    453c:	0001      	movs	r1, r0
    453e:	2002      	movs	r0, #2
    4540:	4c0b      	ldr	r4, [pc, #44]	; (4570 <send+0x94>)
    4542:	47a0      	blx	r4
    4544:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    4546:	2800      	cmp	r0, #0
    4548:	d000      	beq.n	454c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    454a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    454c:	0018      	movs	r0, r3
    454e:	b009      	add	sp, #36	; 0x24
    4550:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    4552:	2306      	movs	r3, #6
    4554:	425b      	negs	r3, r3
    4556:	e7f9      	b.n	454c <send+0x70>
    4558:	2306      	movs	r3, #6
    455a:	425b      	negs	r3, r3
    455c:	e7f6      	b.n	454c <send+0x70>
    455e:	2306      	movs	r3, #6
    4560:	425b      	negs	r3, r3
    4562:	e7f3      	b.n	454c <send+0x70>
    4564:	2306      	movs	r3, #6
    4566:	425b      	negs	r3, r3
    4568:	e7f0      	b.n	454c <send+0x70>
    456a:	46c0      	nop			; (mov r8, r8)
    456c:	200014d0 	.word	0x200014d0
    4570:	000011f5 	.word	0x000011f5

00004574 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    4574:	b530      	push	{r4, r5, lr}
    4576:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    4578:	2800      	cmp	r0, #0
    457a:	db34      	blt.n	45e6 <recv+0x72>
    457c:	2900      	cmp	r1, #0
    457e:	d035      	beq.n	45ec <recv+0x78>
    4580:	2a00      	cmp	r2, #0
    4582:	d036      	beq.n	45f2 <recv+0x7e>
    4584:	0105      	lsls	r5, r0, #4
    4586:	4c1e      	ldr	r4, [pc, #120]	; (4600 <recv+0x8c>)
    4588:	1964      	adds	r4, r4, r5
    458a:	7aa4      	ldrb	r4, [r4, #10]
    458c:	2c01      	cmp	r4, #1
    458e:	d133      	bne.n	45f8 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    4590:	4c1b      	ldr	r4, [pc, #108]	; (4600 <recv+0x8c>)
    4592:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    4594:	1964      	adds	r4, r4, r5
    4596:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    4598:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    459a:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    459c:	2900      	cmp	r1, #0
    459e:	d11d      	bne.n	45dc <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    45a0:	2101      	movs	r1, #1
    45a2:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    45a4:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    45a6:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    45a8:	07d2      	lsls	r2, r2, #31
    45aa:	d500      	bpl.n	45ae <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    45ac:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    45ae:	2b00      	cmp	r3, #0
    45b0:	d117      	bne.n	45e2 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    45b2:	3b01      	subs	r3, #1
    45b4:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    45b6:	aa04      	add	r2, sp, #16
    45b8:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    45ba:	0100      	lsls	r0, r0, #4
    45bc:	4b10      	ldr	r3, [pc, #64]	; (4600 <recv+0x8c>)
    45be:	1818      	adds	r0, r3, r0
    45c0:	88c3      	ldrh	r3, [r0, #6]
    45c2:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    45c4:	2300      	movs	r3, #0
    45c6:	9302      	str	r3, [sp, #8]
    45c8:	9301      	str	r3, [sp, #4]
    45ca:	9300      	str	r3, [sp, #0]
    45cc:	3308      	adds	r3, #8
    45ce:	2002      	movs	r0, #2
    45d0:	4c0c      	ldr	r4, [pc, #48]	; (4604 <recv+0x90>)
    45d2:	47a0      	blx	r4
    45d4:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    45d6:	2800      	cmp	r0, #0
    45d8:	d000      	beq.n	45dc <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    45da:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    45dc:	0010      	movs	r0, r2
    45de:	b007      	add	sp, #28
    45e0:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    45e2:	9304      	str	r3, [sp, #16]
    45e4:	e7e7      	b.n	45b6 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    45e6:	2206      	movs	r2, #6
    45e8:	4252      	negs	r2, r2
    45ea:	e7f7      	b.n	45dc <recv+0x68>
    45ec:	2206      	movs	r2, #6
    45ee:	4252      	negs	r2, r2
    45f0:	e7f4      	b.n	45dc <recv+0x68>
    45f2:	2206      	movs	r2, #6
    45f4:	4252      	negs	r2, r2
    45f6:	e7f1      	b.n	45dc <recv+0x68>
    45f8:	2206      	movs	r2, #6
    45fa:	4252      	negs	r2, r2
    45fc:	e7ee      	b.n	45dc <recv+0x68>
    45fe:	46c0      	nop			; (mov r8, r8)
    4600:	200014d0 	.word	0x200014d0
    4604:	000011f5 	.word	0x000011f5

00004608 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    4608:	b530      	push	{r4, r5, lr}
    460a:	b087      	sub	sp, #28
    460c:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    460e:	481c      	ldr	r0, [pc, #112]	; (4680 <close+0x78>)
    4610:	4d1c      	ldr	r5, [pc, #112]	; (4684 <close+0x7c>)
    4612:	47a8      	blx	r5
    4614:	0021      	movs	r1, r4
    4616:	481c      	ldr	r0, [pc, #112]	; (4688 <close+0x80>)
    4618:	47a8      	blx	r5
    461a:	200d      	movs	r0, #13
    461c:	4b1b      	ldr	r3, [pc, #108]	; (468c <close+0x84>)
    461e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    4620:	2c00      	cmp	r4, #0
    4622:	db27      	blt.n	4674 <close+0x6c>
    4624:	0122      	lsls	r2, r4, #4
    4626:	4b1a      	ldr	r3, [pc, #104]	; (4690 <close+0x88>)
    4628:	189b      	adds	r3, r3, r2
    462a:	7a9b      	ldrb	r3, [r3, #10]
    462c:	2b01      	cmp	r3, #1
    462e:	d124      	bne.n	467a <close+0x72>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    4630:	a905      	add	r1, sp, #20
    4632:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    4634:	4b16      	ldr	r3, [pc, #88]	; (4690 <close+0x88>)
    4636:	189b      	adds	r3, r3, r2
    4638:	88da      	ldrh	r2, [r3, #6]
    463a:	804a      	strh	r2, [r1, #2]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    463c:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    463e:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4640:	07db      	lsls	r3, r3, #31
    4642:	d500      	bpl.n	4646 <close+0x3e>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    4644:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    4646:	2300      	movs	r3, #0
    4648:	9302      	str	r3, [sp, #8]
    464a:	9301      	str	r3, [sp, #4]
    464c:	9300      	str	r3, [sp, #0]
    464e:	3304      	adds	r3, #4
    4650:	aa05      	add	r2, sp, #20
    4652:	2002      	movs	r0, #2
    4654:	4d0f      	ldr	r5, [pc, #60]	; (4694 <close+0x8c>)
    4656:	47a8      	blx	r5
    4658:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    465a:	d001      	beq.n	4660 <close+0x58>
		{
			s8Ret = SOCK_ERR_INVALID;
    465c:	2509      	movs	r5, #9
    465e:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    4660:	0124      	lsls	r4, r4, #4
    4662:	480b      	ldr	r0, [pc, #44]	; (4690 <close+0x88>)
    4664:	1820      	adds	r0, r4, r0
    4666:	2210      	movs	r2, #16
    4668:	2100      	movs	r1, #0
    466a:	4b0b      	ldr	r3, [pc, #44]	; (4698 <close+0x90>)
    466c:	4798      	blx	r3
	}
	return s8Ret;
}
    466e:	0028      	movs	r0, r5
    4670:	b007      	add	sp, #28
    4672:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    4674:	2506      	movs	r5, #6
    4676:	426d      	negs	r5, r5
    4678:	e7f9      	b.n	466e <close+0x66>
    467a:	2506      	movs	r5, #6
    467c:	426d      	negs	r5, r5
    467e:	e7f6      	b.n	466e <close+0x66>
    4680:	00008cc0 	.word	0x00008cc0
    4684:	000075f9 	.word	0x000075f9
    4688:	000097e0 	.word	0x000097e0
    468c:	0000762d 	.word	0x0000762d
    4690:	200014d0 	.word	0x200014d0
    4694:	000011f5 	.word	0x000011f5
    4698:	000010e1 	.word	0x000010e1

0000469c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    469c:	b570      	push	{r4, r5, r6, lr}
    469e:	b082      	sub	sp, #8
    46a0:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    46a2:	4b2a      	ldr	r3, [pc, #168]	; (474c <spi_flash_enable+0xb0>)
    46a4:	4798      	blx	r3
    46a6:	0500      	lsls	r0, r0, #20
    46a8:	0d00      	lsrs	r0, r0, #20
    46aa:	4b29      	ldr	r3, [pc, #164]	; (4750 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    46ac:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    46ae:	4298      	cmp	r0, r3
    46b0:	d802      	bhi.n	46b8 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    46b2:	0028      	movs	r0, r5
    46b4:	b002      	add	sp, #8
    46b6:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    46b8:	a901      	add	r1, sp, #4
    46ba:	4826      	ldr	r0, [pc, #152]	; (4754 <spi_flash_enable+0xb8>)
    46bc:	4b26      	ldr	r3, [pc, #152]	; (4758 <spi_flash_enable+0xbc>)
    46be:	4798      	blx	r3
    46c0:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    46c2:	d1f6      	bne.n	46b2 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    46c4:	4b25      	ldr	r3, [pc, #148]	; (475c <spi_flash_enable+0xc0>)
    46c6:	9a01      	ldr	r2, [sp, #4]
    46c8:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    46ca:	4925      	ldr	r1, [pc, #148]	; (4760 <spi_flash_enable+0xc4>)
    46cc:	4319      	orrs	r1, r3
    46ce:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    46d0:	4820      	ldr	r0, [pc, #128]	; (4754 <spi_flash_enable+0xb8>)
    46d2:	4b24      	ldr	r3, [pc, #144]	; (4764 <spi_flash_enable+0xc8>)
    46d4:	4798      	blx	r3
		if(enable) {
    46d6:	2c00      	cmp	r4, #0
    46d8:	d020      	beq.n	471c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    46da:	2100      	movs	r1, #0
    46dc:	4822      	ldr	r0, [pc, #136]	; (4768 <spi_flash_enable+0xcc>)
    46de:	4c21      	ldr	r4, [pc, #132]	; (4764 <spi_flash_enable+0xc8>)
    46e0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    46e2:	21ab      	movs	r1, #171	; 0xab
    46e4:	4821      	ldr	r0, [pc, #132]	; (476c <spi_flash_enable+0xd0>)
    46e6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    46e8:	2101      	movs	r1, #1
    46ea:	4821      	ldr	r0, [pc, #132]	; (4770 <spi_flash_enable+0xd4>)
    46ec:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    46ee:	2100      	movs	r1, #0
    46f0:	4820      	ldr	r0, [pc, #128]	; (4774 <spi_flash_enable+0xd8>)
    46f2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    46f4:	2181      	movs	r1, #129	; 0x81
    46f6:	4820      	ldr	r0, [pc, #128]	; (4778 <spi_flash_enable+0xdc>)
    46f8:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    46fa:	4e20      	ldr	r6, [pc, #128]	; (477c <spi_flash_enable+0xe0>)
    46fc:	4c20      	ldr	r4, [pc, #128]	; (4780 <spi_flash_enable+0xe4>)
    46fe:	0030      	movs	r0, r6
    4700:	47a0      	blx	r4
    4702:	2801      	cmp	r0, #1
    4704:	d1fb      	bne.n	46fe <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    4706:	4b15      	ldr	r3, [pc, #84]	; (475c <spi_flash_enable+0xc0>)
    4708:	9a01      	ldr	r2, [sp, #4]
    470a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    470c:	2180      	movs	r1, #128	; 0x80
    470e:	0249      	lsls	r1, r1, #9
    4710:	4319      	orrs	r1, r3
    4712:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    4714:	480f      	ldr	r0, [pc, #60]	; (4754 <spi_flash_enable+0xb8>)
    4716:	4b13      	ldr	r3, [pc, #76]	; (4764 <spi_flash_enable+0xc8>)
    4718:	4798      	blx	r3
    471a:	e7ca      	b.n	46b2 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    471c:	2100      	movs	r1, #0
    471e:	4812      	ldr	r0, [pc, #72]	; (4768 <spi_flash_enable+0xcc>)
    4720:	4c10      	ldr	r4, [pc, #64]	; (4764 <spi_flash_enable+0xc8>)
    4722:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    4724:	21b9      	movs	r1, #185	; 0xb9
    4726:	4811      	ldr	r0, [pc, #68]	; (476c <spi_flash_enable+0xd0>)
    4728:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    472a:	2101      	movs	r1, #1
    472c:	4810      	ldr	r0, [pc, #64]	; (4770 <spi_flash_enable+0xd4>)
    472e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    4730:	2100      	movs	r1, #0
    4732:	4810      	ldr	r0, [pc, #64]	; (4774 <spi_flash_enable+0xd8>)
    4734:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    4736:	2181      	movs	r1, #129	; 0x81
    4738:	480f      	ldr	r0, [pc, #60]	; (4778 <spi_flash_enable+0xdc>)
    473a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    473c:	4e0f      	ldr	r6, [pc, #60]	; (477c <spi_flash_enable+0xe0>)
    473e:	4c10      	ldr	r4, [pc, #64]	; (4780 <spi_flash_enable+0xe4>)
    4740:	0030      	movs	r0, r6
    4742:	47a0      	blx	r4
    4744:	2801      	cmp	r0, #1
    4746:	d1fb      	bne.n	4740 <spi_flash_enable+0xa4>
    4748:	e7dd      	b.n	4706 <spi_flash_enable+0x6a>
    474a:	46c0      	nop			; (mov r8, r8)
    474c:	0000287d 	.word	0x0000287d
    4750:	0000039f 	.word	0x0000039f
    4754:	00001410 	.word	0x00001410
    4758:	00002df9 	.word	0x00002df9
    475c:	f8888fff 	.word	0xf8888fff
    4760:	01111000 	.word	0x01111000
    4764:	00002e05 	.word	0x00002e05
    4768:	00010208 	.word	0x00010208
    476c:	0001020c 	.word	0x0001020c
    4770:	00010214 	.word	0x00010214
    4774:	0001021c 	.word	0x0001021c
    4778:	00010204 	.word	0x00010204
    477c:	00010218 	.word	0x00010218
    4780:	00002ded 	.word	0x00002ded

00004784 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4784:	4b0c      	ldr	r3, [pc, #48]	; (47b8 <cpu_irq_enter_critical+0x34>)
    4786:	681b      	ldr	r3, [r3, #0]
    4788:	2b00      	cmp	r3, #0
    478a:	d106      	bne.n	479a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    478c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4790:	2b00      	cmp	r3, #0
    4792:	d007      	beq.n	47a4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4794:	2200      	movs	r2, #0
    4796:	4b09      	ldr	r3, [pc, #36]	; (47bc <cpu_irq_enter_critical+0x38>)
    4798:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    479a:	4a07      	ldr	r2, [pc, #28]	; (47b8 <cpu_irq_enter_critical+0x34>)
    479c:	6813      	ldr	r3, [r2, #0]
    479e:	3301      	adds	r3, #1
    47a0:	6013      	str	r3, [r2, #0]
}
    47a2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    47a4:	b672      	cpsid	i
    47a6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    47aa:	2200      	movs	r2, #0
    47ac:	4b04      	ldr	r3, [pc, #16]	; (47c0 <cpu_irq_enter_critical+0x3c>)
    47ae:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    47b0:	3201      	adds	r2, #1
    47b2:	4b02      	ldr	r3, [pc, #8]	; (47bc <cpu_irq_enter_critical+0x38>)
    47b4:	701a      	strb	r2, [r3, #0]
    47b6:	e7f0      	b.n	479a <cpu_irq_enter_critical+0x16>
    47b8:	200002bc 	.word	0x200002bc
    47bc:	200002c0 	.word	0x200002c0
    47c0:	2000000a 	.word	0x2000000a

000047c4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    47c4:	4b08      	ldr	r3, [pc, #32]	; (47e8 <cpu_irq_leave_critical+0x24>)
    47c6:	681a      	ldr	r2, [r3, #0]
    47c8:	3a01      	subs	r2, #1
    47ca:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    47cc:	681b      	ldr	r3, [r3, #0]
    47ce:	2b00      	cmp	r3, #0
    47d0:	d109      	bne.n	47e6 <cpu_irq_leave_critical+0x22>
    47d2:	4b06      	ldr	r3, [pc, #24]	; (47ec <cpu_irq_leave_critical+0x28>)
    47d4:	781b      	ldrb	r3, [r3, #0]
    47d6:	2b00      	cmp	r3, #0
    47d8:	d005      	beq.n	47e6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    47da:	2201      	movs	r2, #1
    47dc:	4b04      	ldr	r3, [pc, #16]	; (47f0 <cpu_irq_leave_critical+0x2c>)
    47de:	701a      	strb	r2, [r3, #0]
    47e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    47e4:	b662      	cpsie	i
	}
}
    47e6:	4770      	bx	lr
    47e8:	200002bc 	.word	0x200002bc
    47ec:	200002c0 	.word	0x200002c0
    47f0:	2000000a 	.word	0x2000000a

000047f4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    47f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    47f6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    47f8:	ac01      	add	r4, sp, #4
    47fa:	2501      	movs	r5, #1
    47fc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    47fe:	2700      	movs	r7, #0
    4800:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4802:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4804:	0021      	movs	r1, r4
    4806:	203e      	movs	r0, #62	; 0x3e
    4808:	4e06      	ldr	r6, [pc, #24]	; (4824 <system_board_init+0x30>)
    480a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    480c:	2280      	movs	r2, #128	; 0x80
    480e:	05d2      	lsls	r2, r2, #23
    4810:	4b05      	ldr	r3, [pc, #20]	; (4828 <system_board_init+0x34>)
    4812:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4814:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4816:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4818:	0021      	movs	r1, r4
    481a:	200f      	movs	r0, #15
    481c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    481e:	b003      	add	sp, #12
    4820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4822:	46c0      	nop			; (mov r8, r8)
    4824:	000049fd 	.word	0x000049fd
    4828:	41004480 	.word	0x41004480

0000482c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    482c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    482e:	2a00      	cmp	r2, #0
    4830:	d001      	beq.n	4836 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4832:	0018      	movs	r0, r3
    4834:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4836:	008b      	lsls	r3, r1, #2
    4838:	4a06      	ldr	r2, [pc, #24]	; (4854 <extint_register_callback+0x28>)
    483a:	589b      	ldr	r3, [r3, r2]
    483c:	2b00      	cmp	r3, #0
    483e:	d003      	beq.n	4848 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4840:	4283      	cmp	r3, r0
    4842:	d005      	beq.n	4850 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4844:	231d      	movs	r3, #29
    4846:	e7f4      	b.n	4832 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4848:	0089      	lsls	r1, r1, #2
    484a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    484c:	2300      	movs	r3, #0
    484e:	e7f0      	b.n	4832 <extint_register_callback+0x6>
		return STATUS_OK;
    4850:	2300      	movs	r3, #0
    4852:	e7ee      	b.n	4832 <extint_register_callback+0x6>
    4854:	20001590 	.word	0x20001590

00004858 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4858:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    485a:	2900      	cmp	r1, #0
    485c:	d001      	beq.n	4862 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    485e:	0018      	movs	r0, r3
    4860:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    4862:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4864:	281f      	cmp	r0, #31
    4866:	d800      	bhi.n	486a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4868:	4a02      	ldr	r2, [pc, #8]	; (4874 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    486a:	2301      	movs	r3, #1
    486c:	4083      	lsls	r3, r0
    486e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4870:	2300      	movs	r3, #0
    4872:	e7f4      	b.n	485e <extint_chan_enable_callback+0x6>
    4874:	40001800 	.word	0x40001800

00004878 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4878:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    487a:	2900      	cmp	r1, #0
    487c:	d001      	beq.n	4882 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    487e:	0018      	movs	r0, r3
    4880:	4770      	bx	lr
		return NULL;
    4882:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4884:	281f      	cmp	r0, #31
    4886:	d800      	bhi.n	488a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    4888:	4a02      	ldr	r2, [pc, #8]	; (4894 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    488a:	2301      	movs	r3, #1
    488c:	4083      	lsls	r3, r0
    488e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    4890:	2300      	movs	r3, #0
    4892:	e7f4      	b.n	487e <extint_chan_disable_callback+0x6>
    4894:	40001800 	.word	0x40001800

00004898 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4898:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    489a:	2200      	movs	r2, #0
    489c:	4b10      	ldr	r3, [pc, #64]	; (48e0 <EIC_Handler+0x48>)
    489e:	701a      	strb	r2, [r3, #0]
    48a0:	2300      	movs	r3, #0
    48a2:	4910      	ldr	r1, [pc, #64]	; (48e4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    48a4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    48a6:	4e10      	ldr	r6, [pc, #64]	; (48e8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    48a8:	4c0d      	ldr	r4, [pc, #52]	; (48e0 <EIC_Handler+0x48>)
    48aa:	e00a      	b.n	48c2 <EIC_Handler+0x2a>
		return eics[eic_index];
    48ac:	490d      	ldr	r1, [pc, #52]	; (48e4 <EIC_Handler+0x4c>)
    48ae:	e008      	b.n	48c2 <EIC_Handler+0x2a>
    48b0:	7823      	ldrb	r3, [r4, #0]
    48b2:	3301      	adds	r3, #1
    48b4:	b2db      	uxtb	r3, r3
    48b6:	7023      	strb	r3, [r4, #0]
    48b8:	2b0f      	cmp	r3, #15
    48ba:	d810      	bhi.n	48de <EIC_Handler+0x46>
		return NULL;
    48bc:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    48be:	2b1f      	cmp	r3, #31
    48c0:	d9f4      	bls.n	48ac <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    48c2:	0028      	movs	r0, r5
    48c4:	4018      	ands	r0, r3
    48c6:	2201      	movs	r2, #1
    48c8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    48ca:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    48cc:	4210      	tst	r0, r2
    48ce:	d0ef      	beq.n	48b0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    48d0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    48d2:	009b      	lsls	r3, r3, #2
    48d4:	599b      	ldr	r3, [r3, r6]
    48d6:	2b00      	cmp	r3, #0
    48d8:	d0ea      	beq.n	48b0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    48da:	4798      	blx	r3
    48dc:	e7e8      	b.n	48b0 <EIC_Handler+0x18>
			}
		}
	}
}
    48de:	bd70      	pop	{r4, r5, r6, pc}
    48e0:	2000158c 	.word	0x2000158c
    48e4:	40001800 	.word	0x40001800
    48e8:	20001590 	.word	0x20001590

000048ec <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    48ec:	4a04      	ldr	r2, [pc, #16]	; (4900 <_extint_enable+0x14>)
    48ee:	7813      	ldrb	r3, [r2, #0]
    48f0:	2102      	movs	r1, #2
    48f2:	430b      	orrs	r3, r1
    48f4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    48f6:	7853      	ldrb	r3, [r2, #1]
    48f8:	b25b      	sxtb	r3, r3
    48fa:	2b00      	cmp	r3, #0
    48fc:	dbfb      	blt.n	48f6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    48fe:	4770      	bx	lr
    4900:	40001800 	.word	0x40001800

00004904 <_system_extint_init>:
{
    4904:	b500      	push	{lr}
    4906:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4908:	4a12      	ldr	r2, [pc, #72]	; (4954 <_system_extint_init+0x50>)
    490a:	6993      	ldr	r3, [r2, #24]
    490c:	2140      	movs	r1, #64	; 0x40
    490e:	430b      	orrs	r3, r1
    4910:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4912:	a901      	add	r1, sp, #4
    4914:	2300      	movs	r3, #0
    4916:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4918:	2005      	movs	r0, #5
    491a:	4b0f      	ldr	r3, [pc, #60]	; (4958 <_system_extint_init+0x54>)
    491c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    491e:	2005      	movs	r0, #5
    4920:	4b0e      	ldr	r3, [pc, #56]	; (495c <_system_extint_init+0x58>)
    4922:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4924:	4a0e      	ldr	r2, [pc, #56]	; (4960 <_system_extint_init+0x5c>)
    4926:	7813      	ldrb	r3, [r2, #0]
    4928:	2101      	movs	r1, #1
    492a:	430b      	orrs	r3, r1
    492c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    492e:	7853      	ldrb	r3, [r2, #1]
    4930:	b25b      	sxtb	r3, r3
    4932:	2b00      	cmp	r3, #0
    4934:	dbfb      	blt.n	492e <_system_extint_init+0x2a>
    4936:	4b0b      	ldr	r3, [pc, #44]	; (4964 <_system_extint_init+0x60>)
    4938:	0019      	movs	r1, r3
    493a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    493c:	2200      	movs	r2, #0
    493e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4940:	4299      	cmp	r1, r3
    4942:	d1fc      	bne.n	493e <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4944:	2210      	movs	r2, #16
    4946:	4b08      	ldr	r3, [pc, #32]	; (4968 <_system_extint_init+0x64>)
    4948:	601a      	str	r2, [r3, #0]
	_extint_enable();
    494a:	4b08      	ldr	r3, [pc, #32]	; (496c <_system_extint_init+0x68>)
    494c:	4798      	blx	r3
}
    494e:	b003      	add	sp, #12
    4950:	bd00      	pop	{pc}
    4952:	46c0      	nop			; (mov r8, r8)
    4954:	40000400 	.word	0x40000400
    4958:	000060d5 	.word	0x000060d5
    495c:	00006049 	.word	0x00006049
    4960:	40001800 	.word	0x40001800
    4964:	20001590 	.word	0x20001590
    4968:	e000e100 	.word	0xe000e100
    496c:	000048ed 	.word	0x000048ed

00004970 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4970:	2300      	movs	r3, #0
    4972:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4974:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4976:	2201      	movs	r2, #1
    4978:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    497a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    497c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    497e:	3302      	adds	r3, #2
    4980:	72c3      	strb	r3, [r0, #11]
}
    4982:	4770      	bx	lr

00004984 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4984:	b5f0      	push	{r4, r5, r6, r7, lr}
    4986:	b083      	sub	sp, #12
    4988:	0005      	movs	r5, r0
    498a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    498c:	a901      	add	r1, sp, #4
    498e:	2300      	movs	r3, #0
    4990:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4992:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4994:	7923      	ldrb	r3, [r4, #4]
    4996:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4998:	7a23      	ldrb	r3, [r4, #8]
    499a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    499c:	7820      	ldrb	r0, [r4, #0]
    499e:	4b15      	ldr	r3, [pc, #84]	; (49f4 <extint_chan_set_config+0x70>)
    49a0:	4798      	blx	r3
		return NULL;
    49a2:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    49a4:	2d1f      	cmp	r5, #31
    49a6:	d800      	bhi.n	49aa <extint_chan_set_config+0x26>
		return eics[eic_index];
    49a8:	4813      	ldr	r0, [pc, #76]	; (49f8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    49aa:	2207      	movs	r2, #7
    49ac:	402a      	ands	r2, r5
    49ae:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    49b0:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    49b2:	7aa3      	ldrb	r3, [r4, #10]
    49b4:	2b00      	cmp	r3, #0
    49b6:	d001      	beq.n	49bc <extint_chan_set_config+0x38>
    49b8:	2308      	movs	r3, #8
    49ba:	431f      	orrs	r7, r3
    49bc:	08eb      	lsrs	r3, r5, #3
    49be:	009b      	lsls	r3, r3, #2
    49c0:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    49c2:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    49c4:	260f      	movs	r6, #15
    49c6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    49c8:	43b1      	bics	r1, r6
			(new_config << config_pos);
    49ca:	4097      	lsls	r7, r2
    49cc:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    49ce:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    49d0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    49d2:	7a63      	ldrb	r3, [r4, #9]
    49d4:	2b00      	cmp	r3, #0
    49d6:	d106      	bne.n	49e6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    49d8:	6943      	ldr	r3, [r0, #20]
    49da:	2201      	movs	r2, #1
    49dc:	40aa      	lsls	r2, r5
    49de:	4393      	bics	r3, r2
    49e0:	6143      	str	r3, [r0, #20]
	}
}
    49e2:	b003      	add	sp, #12
    49e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    49e6:	6942      	ldr	r2, [r0, #20]
    49e8:	2301      	movs	r3, #1
    49ea:	40ab      	lsls	r3, r5
    49ec:	4313      	orrs	r3, r2
    49ee:	6143      	str	r3, [r0, #20]
    49f0:	e7f7      	b.n	49e2 <extint_chan_set_config+0x5e>
    49f2:	46c0      	nop			; (mov r8, r8)
    49f4:	000061cd 	.word	0x000061cd
    49f8:	40001800 	.word	0x40001800

000049fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    49fc:	b500      	push	{lr}
    49fe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4a00:	ab01      	add	r3, sp, #4
    4a02:	2280      	movs	r2, #128	; 0x80
    4a04:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4a06:	780a      	ldrb	r2, [r1, #0]
    4a08:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4a0a:	784a      	ldrb	r2, [r1, #1]
    4a0c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4a0e:	788a      	ldrb	r2, [r1, #2]
    4a10:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4a12:	0019      	movs	r1, r3
    4a14:	4b01      	ldr	r3, [pc, #4]	; (4a1c <port_pin_set_config+0x20>)
    4a16:	4798      	blx	r3
}
    4a18:	b003      	add	sp, #12
    4a1a:	bd00      	pop	{pc}
    4a1c:	000061cd 	.word	0x000061cd

00004a20 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4a20:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a22:	46de      	mov	lr, fp
    4a24:	4657      	mov	r7, sl
    4a26:	464e      	mov	r6, r9
    4a28:	4645      	mov	r5, r8
    4a2a:	b5e0      	push	{r5, r6, r7, lr}
    4a2c:	b087      	sub	sp, #28
    4a2e:	4680      	mov	r8, r0
    4a30:	9104      	str	r1, [sp, #16]
    4a32:	0016      	movs	r6, r2
    4a34:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4a36:	2200      	movs	r2, #0
    4a38:	2300      	movs	r3, #0
    4a3a:	2100      	movs	r1, #0
    4a3c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    4a3e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4a40:	2001      	movs	r0, #1
    4a42:	0021      	movs	r1, r4
    4a44:	9600      	str	r6, [sp, #0]
    4a46:	9701      	str	r7, [sp, #4]
    4a48:	465c      	mov	r4, fp
    4a4a:	9403      	str	r4, [sp, #12]
    4a4c:	4644      	mov	r4, r8
    4a4e:	9405      	str	r4, [sp, #20]
    4a50:	e013      	b.n	4a7a <long_division+0x5a>
    4a52:	2420      	movs	r4, #32
    4a54:	1a64      	subs	r4, r4, r1
    4a56:	0005      	movs	r5, r0
    4a58:	40e5      	lsrs	r5, r4
    4a5a:	46a8      	mov	r8, r5
    4a5c:	e014      	b.n	4a88 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    4a5e:	9c00      	ldr	r4, [sp, #0]
    4a60:	9d01      	ldr	r5, [sp, #4]
    4a62:	1b12      	subs	r2, r2, r4
    4a64:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4a66:	465c      	mov	r4, fp
    4a68:	464d      	mov	r5, r9
    4a6a:	432c      	orrs	r4, r5
    4a6c:	46a3      	mov	fp, r4
    4a6e:	9c03      	ldr	r4, [sp, #12]
    4a70:	4645      	mov	r5, r8
    4a72:	432c      	orrs	r4, r5
    4a74:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4a76:	3901      	subs	r1, #1
    4a78:	d325      	bcc.n	4ac6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4a7a:	2420      	movs	r4, #32
    4a7c:	4264      	negs	r4, r4
    4a7e:	190c      	adds	r4, r1, r4
    4a80:	d4e7      	bmi.n	4a52 <long_division+0x32>
    4a82:	0005      	movs	r5, r0
    4a84:	40a5      	lsls	r5, r4
    4a86:	46a8      	mov	r8, r5
    4a88:	0004      	movs	r4, r0
    4a8a:	408c      	lsls	r4, r1
    4a8c:	46a1      	mov	r9, r4
		r = r << 1;
    4a8e:	1892      	adds	r2, r2, r2
    4a90:	415b      	adcs	r3, r3
    4a92:	0014      	movs	r4, r2
    4a94:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4a96:	9e05      	ldr	r6, [sp, #20]
    4a98:	464f      	mov	r7, r9
    4a9a:	403e      	ands	r6, r7
    4a9c:	46b4      	mov	ip, r6
    4a9e:	9e04      	ldr	r6, [sp, #16]
    4aa0:	4647      	mov	r7, r8
    4aa2:	403e      	ands	r6, r7
    4aa4:	46b2      	mov	sl, r6
    4aa6:	4666      	mov	r6, ip
    4aa8:	4657      	mov	r7, sl
    4aaa:	433e      	orrs	r6, r7
    4aac:	d003      	beq.n	4ab6 <long_division+0x96>
			r |= 0x01;
    4aae:	0006      	movs	r6, r0
    4ab0:	4326      	orrs	r6, r4
    4ab2:	0032      	movs	r2, r6
    4ab4:	002b      	movs	r3, r5
		if (r >= d) {
    4ab6:	9c00      	ldr	r4, [sp, #0]
    4ab8:	9d01      	ldr	r5, [sp, #4]
    4aba:	429d      	cmp	r5, r3
    4abc:	d8db      	bhi.n	4a76 <long_division+0x56>
    4abe:	d1ce      	bne.n	4a5e <long_division+0x3e>
    4ac0:	4294      	cmp	r4, r2
    4ac2:	d8d8      	bhi.n	4a76 <long_division+0x56>
    4ac4:	e7cb      	b.n	4a5e <long_division+0x3e>
    4ac6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4ac8:	4658      	mov	r0, fp
    4aca:	0019      	movs	r1, r3
    4acc:	b007      	add	sp, #28
    4ace:	bc3c      	pop	{r2, r3, r4, r5}
    4ad0:	4690      	mov	r8, r2
    4ad2:	4699      	mov	r9, r3
    4ad4:	46a2      	mov	sl, r4
    4ad6:	46ab      	mov	fp, r5
    4ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004ada <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4ada:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4adc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4ade:	2340      	movs	r3, #64	; 0x40
    4ae0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    4ae2:	4281      	cmp	r1, r0
    4ae4:	d202      	bcs.n	4aec <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    4ae6:	0018      	movs	r0, r3
    4ae8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4aea:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4aec:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4aee:	1c63      	adds	r3, r4, #1
    4af0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    4af2:	4288      	cmp	r0, r1
    4af4:	d9f9      	bls.n	4aea <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4af6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4af8:	2cff      	cmp	r4, #255	; 0xff
    4afa:	d8f4      	bhi.n	4ae6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4afc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4afe:	2300      	movs	r3, #0
    4b00:	e7f1      	b.n	4ae6 <_sercom_get_sync_baud_val+0xc>
	...

00004b04 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b06:	b083      	sub	sp, #12
    4b08:	000f      	movs	r7, r1
    4b0a:	0016      	movs	r6, r2
    4b0c:	aa08      	add	r2, sp, #32
    4b0e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4b10:	0004      	movs	r4, r0
    4b12:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4b14:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    4b16:	42bc      	cmp	r4, r7
    4b18:	d902      	bls.n	4b20 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4b1a:	0010      	movs	r0, r2
    4b1c:	b003      	add	sp, #12
    4b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4b20:	2b00      	cmp	r3, #0
    4b22:	d114      	bne.n	4b4e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4b24:	0002      	movs	r2, r0
    4b26:	0008      	movs	r0, r1
    4b28:	2100      	movs	r1, #0
    4b2a:	4c19      	ldr	r4, [pc, #100]	; (4b90 <_sercom_get_async_baud_val+0x8c>)
    4b2c:	47a0      	blx	r4
    4b2e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    4b30:	003a      	movs	r2, r7
    4b32:	2300      	movs	r3, #0
    4b34:	2000      	movs	r0, #0
    4b36:	4c17      	ldr	r4, [pc, #92]	; (4b94 <_sercom_get_async_baud_val+0x90>)
    4b38:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4b3a:	2200      	movs	r2, #0
    4b3c:	2301      	movs	r3, #1
    4b3e:	1a12      	subs	r2, r2, r0
    4b40:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    4b42:	0c12      	lsrs	r2, r2, #16
    4b44:	041b      	lsls	r3, r3, #16
    4b46:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4b48:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4b4a:	2200      	movs	r2, #0
    4b4c:	e7e5      	b.n	4b1a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    4b4e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4b50:	2b01      	cmp	r3, #1
    4b52:	d1f9      	bne.n	4b48 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4b54:	000a      	movs	r2, r1
    4b56:	2300      	movs	r3, #0
    4b58:	2100      	movs	r1, #0
    4b5a:	4c0d      	ldr	r4, [pc, #52]	; (4b90 <_sercom_get_async_baud_val+0x8c>)
    4b5c:	47a0      	blx	r4
    4b5e:	0002      	movs	r2, r0
    4b60:	000b      	movs	r3, r1
    4b62:	9200      	str	r2, [sp, #0]
    4b64:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4b66:	0038      	movs	r0, r7
    4b68:	2100      	movs	r1, #0
    4b6a:	4c0a      	ldr	r4, [pc, #40]	; (4b94 <_sercom_get_async_baud_val+0x90>)
    4b6c:	47a0      	blx	r4
    4b6e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4b70:	2380      	movs	r3, #128	; 0x80
    4b72:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4b74:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    4b76:	4298      	cmp	r0, r3
    4b78:	d8cf      	bhi.n	4b1a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4b7a:	0f79      	lsrs	r1, r7, #29
    4b7c:	00f8      	lsls	r0, r7, #3
    4b7e:	9a00      	ldr	r2, [sp, #0]
    4b80:	9b01      	ldr	r3, [sp, #4]
    4b82:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4b84:	00ea      	lsls	r2, r5, #3
    4b86:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4b88:	b2d2      	uxtb	r2, r2
    4b8a:	0352      	lsls	r2, r2, #13
    4b8c:	432a      	orrs	r2, r5
    4b8e:	e7db      	b.n	4b48 <_sercom_get_async_baud_val+0x44>
    4b90:	000073a5 	.word	0x000073a5
    4b94:	00004a21 	.word	0x00004a21

00004b98 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4b98:	b510      	push	{r4, lr}
    4b9a:	b082      	sub	sp, #8
    4b9c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4b9e:	4b0e      	ldr	r3, [pc, #56]	; (4bd8 <sercom_set_gclk_generator+0x40>)
    4ba0:	781b      	ldrb	r3, [r3, #0]
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d007      	beq.n	4bb6 <sercom_set_gclk_generator+0x1e>
    4ba6:	2900      	cmp	r1, #0
    4ba8:	d105      	bne.n	4bb6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4baa:	4b0b      	ldr	r3, [pc, #44]	; (4bd8 <sercom_set_gclk_generator+0x40>)
    4bac:	785b      	ldrb	r3, [r3, #1]
    4bae:	4283      	cmp	r3, r0
    4bb0:	d010      	beq.n	4bd4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4bb2:	201d      	movs	r0, #29
    4bb4:	e00c      	b.n	4bd0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4bb6:	a901      	add	r1, sp, #4
    4bb8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4bba:	2013      	movs	r0, #19
    4bbc:	4b07      	ldr	r3, [pc, #28]	; (4bdc <sercom_set_gclk_generator+0x44>)
    4bbe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4bc0:	2013      	movs	r0, #19
    4bc2:	4b07      	ldr	r3, [pc, #28]	; (4be0 <sercom_set_gclk_generator+0x48>)
    4bc4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    4bc6:	4b04      	ldr	r3, [pc, #16]	; (4bd8 <sercom_set_gclk_generator+0x40>)
    4bc8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4bca:	2201      	movs	r2, #1
    4bcc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4bce:	2000      	movs	r0, #0
}
    4bd0:	b002      	add	sp, #8
    4bd2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4bd4:	2000      	movs	r0, #0
    4bd6:	e7fb      	b.n	4bd0 <sercom_set_gclk_generator+0x38>
    4bd8:	200002c4 	.word	0x200002c4
    4bdc:	000060d5 	.word	0x000060d5
    4be0:	00006049 	.word	0x00006049

00004be4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4be4:	4b40      	ldr	r3, [pc, #256]	; (4ce8 <_sercom_get_default_pad+0x104>)
    4be6:	4298      	cmp	r0, r3
    4be8:	d031      	beq.n	4c4e <_sercom_get_default_pad+0x6a>
    4bea:	d90a      	bls.n	4c02 <_sercom_get_default_pad+0x1e>
    4bec:	4b3f      	ldr	r3, [pc, #252]	; (4cec <_sercom_get_default_pad+0x108>)
    4bee:	4298      	cmp	r0, r3
    4bf0:	d04d      	beq.n	4c8e <_sercom_get_default_pad+0xaa>
    4bf2:	4b3f      	ldr	r3, [pc, #252]	; (4cf0 <_sercom_get_default_pad+0x10c>)
    4bf4:	4298      	cmp	r0, r3
    4bf6:	d05a      	beq.n	4cae <_sercom_get_default_pad+0xca>
    4bf8:	4b3e      	ldr	r3, [pc, #248]	; (4cf4 <_sercom_get_default_pad+0x110>)
    4bfa:	4298      	cmp	r0, r3
    4bfc:	d037      	beq.n	4c6e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4bfe:	2000      	movs	r0, #0
}
    4c00:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    4c02:	4b3d      	ldr	r3, [pc, #244]	; (4cf8 <_sercom_get_default_pad+0x114>)
    4c04:	4298      	cmp	r0, r3
    4c06:	d00c      	beq.n	4c22 <_sercom_get_default_pad+0x3e>
    4c08:	4b3c      	ldr	r3, [pc, #240]	; (4cfc <_sercom_get_default_pad+0x118>)
    4c0a:	4298      	cmp	r0, r3
    4c0c:	d1f7      	bne.n	4bfe <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c0e:	2901      	cmp	r1, #1
    4c10:	d017      	beq.n	4c42 <_sercom_get_default_pad+0x5e>
    4c12:	2900      	cmp	r1, #0
    4c14:	d05d      	beq.n	4cd2 <_sercom_get_default_pad+0xee>
    4c16:	2902      	cmp	r1, #2
    4c18:	d015      	beq.n	4c46 <_sercom_get_default_pad+0x62>
    4c1a:	2903      	cmp	r1, #3
    4c1c:	d015      	beq.n	4c4a <_sercom_get_default_pad+0x66>
	return 0;
    4c1e:	2000      	movs	r0, #0
    4c20:	e7ee      	b.n	4c00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c22:	2901      	cmp	r1, #1
    4c24:	d007      	beq.n	4c36 <_sercom_get_default_pad+0x52>
    4c26:	2900      	cmp	r1, #0
    4c28:	d051      	beq.n	4cce <_sercom_get_default_pad+0xea>
    4c2a:	2902      	cmp	r1, #2
    4c2c:	d005      	beq.n	4c3a <_sercom_get_default_pad+0x56>
    4c2e:	2903      	cmp	r1, #3
    4c30:	d005      	beq.n	4c3e <_sercom_get_default_pad+0x5a>
	return 0;
    4c32:	2000      	movs	r0, #0
    4c34:	e7e4      	b.n	4c00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c36:	4832      	ldr	r0, [pc, #200]	; (4d00 <_sercom_get_default_pad+0x11c>)
    4c38:	e7e2      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4c3a:	4832      	ldr	r0, [pc, #200]	; (4d04 <_sercom_get_default_pad+0x120>)
    4c3c:	e7e0      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4c3e:	4832      	ldr	r0, [pc, #200]	; (4d08 <_sercom_get_default_pad+0x124>)
    4c40:	e7de      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4c42:	4832      	ldr	r0, [pc, #200]	; (4d0c <_sercom_get_default_pad+0x128>)
    4c44:	e7dc      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4c46:	4832      	ldr	r0, [pc, #200]	; (4d10 <_sercom_get_default_pad+0x12c>)
    4c48:	e7da      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4c4a:	4832      	ldr	r0, [pc, #200]	; (4d14 <_sercom_get_default_pad+0x130>)
    4c4c:	e7d8      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4c4e:	2901      	cmp	r1, #1
    4c50:	d007      	beq.n	4c62 <_sercom_get_default_pad+0x7e>
    4c52:	2900      	cmp	r1, #0
    4c54:	d03f      	beq.n	4cd6 <_sercom_get_default_pad+0xf2>
    4c56:	2902      	cmp	r1, #2
    4c58:	d005      	beq.n	4c66 <_sercom_get_default_pad+0x82>
    4c5a:	2903      	cmp	r1, #3
    4c5c:	d005      	beq.n	4c6a <_sercom_get_default_pad+0x86>
	return 0;
    4c5e:	2000      	movs	r0, #0
    4c60:	e7ce      	b.n	4c00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c62:	482d      	ldr	r0, [pc, #180]	; (4d18 <_sercom_get_default_pad+0x134>)
    4c64:	e7cc      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4c66:	482d      	ldr	r0, [pc, #180]	; (4d1c <_sercom_get_default_pad+0x138>)
    4c68:	e7ca      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4c6a:	482d      	ldr	r0, [pc, #180]	; (4d20 <_sercom_get_default_pad+0x13c>)
    4c6c:	e7c8      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4c6e:	2901      	cmp	r1, #1
    4c70:	d007      	beq.n	4c82 <_sercom_get_default_pad+0x9e>
    4c72:	2900      	cmp	r1, #0
    4c74:	d031      	beq.n	4cda <_sercom_get_default_pad+0xf6>
    4c76:	2902      	cmp	r1, #2
    4c78:	d005      	beq.n	4c86 <_sercom_get_default_pad+0xa2>
    4c7a:	2903      	cmp	r1, #3
    4c7c:	d005      	beq.n	4c8a <_sercom_get_default_pad+0xa6>
	return 0;
    4c7e:	2000      	movs	r0, #0
    4c80:	e7be      	b.n	4c00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c82:	4828      	ldr	r0, [pc, #160]	; (4d24 <_sercom_get_default_pad+0x140>)
    4c84:	e7bc      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4c86:	4828      	ldr	r0, [pc, #160]	; (4d28 <_sercom_get_default_pad+0x144>)
    4c88:	e7ba      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4c8a:	4828      	ldr	r0, [pc, #160]	; (4d2c <_sercom_get_default_pad+0x148>)
    4c8c:	e7b8      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4c8e:	2901      	cmp	r1, #1
    4c90:	d007      	beq.n	4ca2 <_sercom_get_default_pad+0xbe>
    4c92:	2900      	cmp	r1, #0
    4c94:	d023      	beq.n	4cde <_sercom_get_default_pad+0xfa>
    4c96:	2902      	cmp	r1, #2
    4c98:	d005      	beq.n	4ca6 <_sercom_get_default_pad+0xc2>
    4c9a:	2903      	cmp	r1, #3
    4c9c:	d005      	beq.n	4caa <_sercom_get_default_pad+0xc6>
	return 0;
    4c9e:	2000      	movs	r0, #0
    4ca0:	e7ae      	b.n	4c00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4ca2:	4823      	ldr	r0, [pc, #140]	; (4d30 <_sercom_get_default_pad+0x14c>)
    4ca4:	e7ac      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4ca6:	4823      	ldr	r0, [pc, #140]	; (4d34 <_sercom_get_default_pad+0x150>)
    4ca8:	e7aa      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4caa:	4823      	ldr	r0, [pc, #140]	; (4d38 <_sercom_get_default_pad+0x154>)
    4cac:	e7a8      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4cae:	2901      	cmp	r1, #1
    4cb0:	d007      	beq.n	4cc2 <_sercom_get_default_pad+0xde>
    4cb2:	2900      	cmp	r1, #0
    4cb4:	d015      	beq.n	4ce2 <_sercom_get_default_pad+0xfe>
    4cb6:	2902      	cmp	r1, #2
    4cb8:	d005      	beq.n	4cc6 <_sercom_get_default_pad+0xe2>
    4cba:	2903      	cmp	r1, #3
    4cbc:	d005      	beq.n	4cca <_sercom_get_default_pad+0xe6>
	return 0;
    4cbe:	2000      	movs	r0, #0
    4cc0:	e79e      	b.n	4c00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4cc2:	481e      	ldr	r0, [pc, #120]	; (4d3c <_sercom_get_default_pad+0x158>)
    4cc4:	e79c      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4cc6:	481e      	ldr	r0, [pc, #120]	; (4d40 <_sercom_get_default_pad+0x15c>)
    4cc8:	e79a      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4cca:	481e      	ldr	r0, [pc, #120]	; (4d44 <_sercom_get_default_pad+0x160>)
    4ccc:	e798      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4cce:	481e      	ldr	r0, [pc, #120]	; (4d48 <_sercom_get_default_pad+0x164>)
    4cd0:	e796      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4cd2:	2003      	movs	r0, #3
    4cd4:	e794      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4cd6:	481d      	ldr	r0, [pc, #116]	; (4d4c <_sercom_get_default_pad+0x168>)
    4cd8:	e792      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4cda:	481d      	ldr	r0, [pc, #116]	; (4d50 <_sercom_get_default_pad+0x16c>)
    4cdc:	e790      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4cde:	481d      	ldr	r0, [pc, #116]	; (4d54 <_sercom_get_default_pad+0x170>)
    4ce0:	e78e      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4ce2:	481d      	ldr	r0, [pc, #116]	; (4d58 <_sercom_get_default_pad+0x174>)
    4ce4:	e78c      	b.n	4c00 <_sercom_get_default_pad+0x1c>
    4ce6:	46c0      	nop			; (mov r8, r8)
    4ce8:	42001000 	.word	0x42001000
    4cec:	42001800 	.word	0x42001800
    4cf0:	42001c00 	.word	0x42001c00
    4cf4:	42001400 	.word	0x42001400
    4cf8:	42000800 	.word	0x42000800
    4cfc:	42000c00 	.word	0x42000c00
    4d00:	00050003 	.word	0x00050003
    4d04:	00060003 	.word	0x00060003
    4d08:	00070003 	.word	0x00070003
    4d0c:	00010003 	.word	0x00010003
    4d10:	001e0003 	.word	0x001e0003
    4d14:	001f0003 	.word	0x001f0003
    4d18:	00090003 	.word	0x00090003
    4d1c:	000a0003 	.word	0x000a0003
    4d20:	000b0003 	.word	0x000b0003
    4d24:	00110003 	.word	0x00110003
    4d28:	00120003 	.word	0x00120003
    4d2c:	00130003 	.word	0x00130003
    4d30:	000d0003 	.word	0x000d0003
    4d34:	000e0003 	.word	0x000e0003
    4d38:	000f0003 	.word	0x000f0003
    4d3c:	00170003 	.word	0x00170003
    4d40:	00180003 	.word	0x00180003
    4d44:	00190003 	.word	0x00190003
    4d48:	00040003 	.word	0x00040003
    4d4c:	00080003 	.word	0x00080003
    4d50:	00100003 	.word	0x00100003
    4d54:	000c0003 	.word	0x000c0003
    4d58:	00160003 	.word	0x00160003

00004d5c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4d5c:	b530      	push	{r4, r5, lr}
    4d5e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4d60:	4b0b      	ldr	r3, [pc, #44]	; (4d90 <_sercom_get_sercom_inst_index+0x34>)
    4d62:	466a      	mov	r2, sp
    4d64:	cb32      	ldmia	r3!, {r1, r4, r5}
    4d66:	c232      	stmia	r2!, {r1, r4, r5}
    4d68:	cb32      	ldmia	r3!, {r1, r4, r5}
    4d6a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4d6c:	9b00      	ldr	r3, [sp, #0]
    4d6e:	4283      	cmp	r3, r0
    4d70:	d00b      	beq.n	4d8a <_sercom_get_sercom_inst_index+0x2e>
    4d72:	2301      	movs	r3, #1
    4d74:	009a      	lsls	r2, r3, #2
    4d76:	4669      	mov	r1, sp
    4d78:	5852      	ldr	r2, [r2, r1]
    4d7a:	4282      	cmp	r2, r0
    4d7c:	d006      	beq.n	4d8c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4d7e:	3301      	adds	r3, #1
    4d80:	2b06      	cmp	r3, #6
    4d82:	d1f7      	bne.n	4d74 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4d84:	2000      	movs	r0, #0
}
    4d86:	b007      	add	sp, #28
    4d88:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4d8a:	2300      	movs	r3, #0
			return i;
    4d8c:	b2d8      	uxtb	r0, r3
    4d8e:	e7fa      	b.n	4d86 <_sercom_get_sercom_inst_index+0x2a>
    4d90:	00009814 	.word	0x00009814

00004d94 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4d94:	4770      	bx	lr
	...

00004d98 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4d98:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4d9a:	4b0a      	ldr	r3, [pc, #40]	; (4dc4 <_sercom_set_handler+0x2c>)
    4d9c:	781b      	ldrb	r3, [r3, #0]
    4d9e:	2b00      	cmp	r3, #0
    4da0:	d10c      	bne.n	4dbc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4da2:	4f09      	ldr	r7, [pc, #36]	; (4dc8 <_sercom_set_handler+0x30>)
    4da4:	4e09      	ldr	r6, [pc, #36]	; (4dcc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    4da6:	4d0a      	ldr	r5, [pc, #40]	; (4dd0 <_sercom_set_handler+0x38>)
    4da8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4daa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4dac:	195a      	adds	r2, r3, r5
    4dae:	6014      	str	r4, [r2, #0]
    4db0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4db2:	2b18      	cmp	r3, #24
    4db4:	d1f9      	bne.n	4daa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    4db6:	2201      	movs	r2, #1
    4db8:	4b02      	ldr	r3, [pc, #8]	; (4dc4 <_sercom_set_handler+0x2c>)
    4dba:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4dbc:	0080      	lsls	r0, r0, #2
    4dbe:	4b02      	ldr	r3, [pc, #8]	; (4dc8 <_sercom_set_handler+0x30>)
    4dc0:	50c1      	str	r1, [r0, r3]
}
    4dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dc4:	200002c6 	.word	0x200002c6
    4dc8:	200002c8 	.word	0x200002c8
    4dcc:	00004d95 	.word	0x00004d95
    4dd0:	200015d0 	.word	0x200015d0

00004dd4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4dd4:	b500      	push	{lr}
    4dd6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4dd8:	2309      	movs	r3, #9
    4dda:	466a      	mov	r2, sp
    4ddc:	7013      	strb	r3, [r2, #0]
    4dde:	3301      	adds	r3, #1
    4de0:	7053      	strb	r3, [r2, #1]
    4de2:	3301      	adds	r3, #1
    4de4:	7093      	strb	r3, [r2, #2]
    4de6:	3301      	adds	r3, #1
    4de8:	70d3      	strb	r3, [r2, #3]
    4dea:	3301      	adds	r3, #1
    4dec:	7113      	strb	r3, [r2, #4]
    4dee:	3301      	adds	r3, #1
    4df0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4df2:	4b03      	ldr	r3, [pc, #12]	; (4e00 <_sercom_get_interrupt_vector+0x2c>)
    4df4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4df6:	466b      	mov	r3, sp
    4df8:	5618      	ldrsb	r0, [r3, r0]
}
    4dfa:	b003      	add	sp, #12
    4dfc:	bd00      	pop	{pc}
    4dfe:	46c0      	nop			; (mov r8, r8)
    4e00:	00004d5d 	.word	0x00004d5d

00004e04 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4e04:	b510      	push	{r4, lr}
    4e06:	4b02      	ldr	r3, [pc, #8]	; (4e10 <SERCOM0_Handler+0xc>)
    4e08:	681b      	ldr	r3, [r3, #0]
    4e0a:	2000      	movs	r0, #0
    4e0c:	4798      	blx	r3
    4e0e:	bd10      	pop	{r4, pc}
    4e10:	200002c8 	.word	0x200002c8

00004e14 <SERCOM1_Handler>:
    4e14:	b510      	push	{r4, lr}
    4e16:	4b02      	ldr	r3, [pc, #8]	; (4e20 <SERCOM1_Handler+0xc>)
    4e18:	685b      	ldr	r3, [r3, #4]
    4e1a:	2001      	movs	r0, #1
    4e1c:	4798      	blx	r3
    4e1e:	bd10      	pop	{r4, pc}
    4e20:	200002c8 	.word	0x200002c8

00004e24 <SERCOM2_Handler>:
    4e24:	b510      	push	{r4, lr}
    4e26:	4b02      	ldr	r3, [pc, #8]	; (4e30 <SERCOM2_Handler+0xc>)
    4e28:	689b      	ldr	r3, [r3, #8]
    4e2a:	2002      	movs	r0, #2
    4e2c:	4798      	blx	r3
    4e2e:	bd10      	pop	{r4, pc}
    4e30:	200002c8 	.word	0x200002c8

00004e34 <SERCOM3_Handler>:
    4e34:	b510      	push	{r4, lr}
    4e36:	4b02      	ldr	r3, [pc, #8]	; (4e40 <SERCOM3_Handler+0xc>)
    4e38:	68db      	ldr	r3, [r3, #12]
    4e3a:	2003      	movs	r0, #3
    4e3c:	4798      	blx	r3
    4e3e:	bd10      	pop	{r4, pc}
    4e40:	200002c8 	.word	0x200002c8

00004e44 <SERCOM4_Handler>:
    4e44:	b510      	push	{r4, lr}
    4e46:	4b02      	ldr	r3, [pc, #8]	; (4e50 <SERCOM4_Handler+0xc>)
    4e48:	691b      	ldr	r3, [r3, #16]
    4e4a:	2004      	movs	r0, #4
    4e4c:	4798      	blx	r3
    4e4e:	bd10      	pop	{r4, pc}
    4e50:	200002c8 	.word	0x200002c8

00004e54 <SERCOM5_Handler>:
    4e54:	b510      	push	{r4, lr}
    4e56:	4b02      	ldr	r3, [pc, #8]	; (4e60 <SERCOM5_Handler+0xc>)
    4e58:	695b      	ldr	r3, [r3, #20]
    4e5a:	2005      	movs	r0, #5
    4e5c:	4798      	blx	r3
    4e5e:	bd10      	pop	{r4, pc}
    4e60:	200002c8 	.word	0x200002c8

00004e64 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e66:	b08b      	sub	sp, #44	; 0x2c
    4e68:	0005      	movs	r5, r0
    4e6a:	000c      	movs	r4, r1
    4e6c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4e6e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4e70:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    4e72:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4e74:	079b      	lsls	r3, r3, #30
    4e76:	d501      	bpl.n	4e7c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4e78:	b00b      	add	sp, #44	; 0x2c
    4e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4e7c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    4e7e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4e80:	07db      	lsls	r3, r3, #31
    4e82:	d4f9      	bmi.n	4e78 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e84:	0008      	movs	r0, r1
    4e86:	4b60      	ldr	r3, [pc, #384]	; (5008 <spi_init+0x1a4>)
    4e88:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4e8a:	4a60      	ldr	r2, [pc, #384]	; (500c <spi_init+0x1a8>)
    4e8c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4e8e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4e90:	2301      	movs	r3, #1
    4e92:	40bb      	lsls	r3, r7
    4e94:	430b      	orrs	r3, r1
    4e96:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4e98:	a909      	add	r1, sp, #36	; 0x24
    4e9a:	2724      	movs	r7, #36	; 0x24
    4e9c:	5df3      	ldrb	r3, [r6, r7]
    4e9e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4ea0:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4ea2:	b2c3      	uxtb	r3, r0
    4ea4:	9301      	str	r3, [sp, #4]
    4ea6:	0018      	movs	r0, r3
    4ea8:	4b59      	ldr	r3, [pc, #356]	; (5010 <spi_init+0x1ac>)
    4eaa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4eac:	9801      	ldr	r0, [sp, #4]
    4eae:	4b59      	ldr	r3, [pc, #356]	; (5014 <spi_init+0x1b0>)
    4eb0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4eb2:	5df0      	ldrb	r0, [r6, r7]
    4eb4:	2100      	movs	r1, #0
    4eb6:	4b58      	ldr	r3, [pc, #352]	; (5018 <spi_init+0x1b4>)
    4eb8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4eba:	7833      	ldrb	r3, [r6, #0]
    4ebc:	2b01      	cmp	r3, #1
    4ebe:	d038      	beq.n	4f32 <spi_init+0xce>
    4ec0:	002b      	movs	r3, r5
    4ec2:	330c      	adds	r3, #12
    4ec4:	0029      	movs	r1, r5
    4ec6:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    4ec8:	2200      	movs	r2, #0
    4eca:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4ecc:	428b      	cmp	r3, r1
    4ece:	d1fc      	bne.n	4eca <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    4ed0:	2300      	movs	r3, #0
    4ed2:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4ed4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4ed6:	2400      	movs	r4, #0
    4ed8:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4eda:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4edc:	3336      	adds	r3, #54	; 0x36
    4ede:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4ee0:	3301      	adds	r3, #1
    4ee2:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4ee4:	3301      	adds	r3, #1
    4ee6:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    4ee8:	3b35      	subs	r3, #53	; 0x35
    4eea:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4eec:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4eee:	6828      	ldr	r0, [r5, #0]
    4ef0:	4b45      	ldr	r3, [pc, #276]	; (5008 <spi_init+0x1a4>)
    4ef2:	4798      	blx	r3
    4ef4:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4ef6:	4949      	ldr	r1, [pc, #292]	; (501c <spi_init+0x1b8>)
    4ef8:	4b49      	ldr	r3, [pc, #292]	; (5020 <spi_init+0x1bc>)
    4efa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4efc:	00bf      	lsls	r7, r7, #2
    4efe:	4b49      	ldr	r3, [pc, #292]	; (5024 <spi_init+0x1c0>)
    4f00:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4f02:	682f      	ldr	r7, [r5, #0]
    4f04:	ab04      	add	r3, sp, #16
    4f06:	2280      	movs	r2, #128	; 0x80
    4f08:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4f0a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4f0c:	3a7f      	subs	r2, #127	; 0x7f
    4f0e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4f10:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    4f12:	7833      	ldrb	r3, [r6, #0]
    4f14:	2b00      	cmp	r3, #0
    4f16:	d102      	bne.n	4f1e <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4f18:	2200      	movs	r2, #0
    4f1a:	ab04      	add	r3, sp, #16
    4f1c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4f1e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4f20:	9305      	str	r3, [sp, #20]
    4f22:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4f24:	9306      	str	r3, [sp, #24]
    4f26:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4f28:	9307      	str	r3, [sp, #28]
    4f2a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4f2c:	9308      	str	r3, [sp, #32]
    4f2e:	2400      	movs	r4, #0
    4f30:	e00b      	b.n	4f4a <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4f32:	6823      	ldr	r3, [r4, #0]
    4f34:	220c      	movs	r2, #12
    4f36:	4313      	orrs	r3, r2
    4f38:	6023      	str	r3, [r4, #0]
    4f3a:	e7c1      	b.n	4ec0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4f3c:	0038      	movs	r0, r7
    4f3e:	4b3a      	ldr	r3, [pc, #232]	; (5028 <spi_init+0x1c4>)
    4f40:	4798      	blx	r3
    4f42:	e00a      	b.n	4f5a <spi_init+0xf6>
    4f44:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4f46:	2c04      	cmp	r4, #4
    4f48:	d010      	beq.n	4f6c <spi_init+0x108>
    4f4a:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4f4c:	00a3      	lsls	r3, r4, #2
    4f4e:	aa02      	add	r2, sp, #8
    4f50:	200c      	movs	r0, #12
    4f52:	1812      	adds	r2, r2, r0
    4f54:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    4f56:	2800      	cmp	r0, #0
    4f58:	d0f0      	beq.n	4f3c <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    4f5a:	1c43      	adds	r3, r0, #1
    4f5c:	d0f2      	beq.n	4f44 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4f5e:	a904      	add	r1, sp, #16
    4f60:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4f62:	0c00      	lsrs	r0, r0, #16
    4f64:	b2c0      	uxtb	r0, r0
    4f66:	4b31      	ldr	r3, [pc, #196]	; (502c <spi_init+0x1c8>)
    4f68:	4798      	blx	r3
    4f6a:	e7eb      	b.n	4f44 <spi_init+0xe0>
	module->mode             = config->mode;
    4f6c:	7833      	ldrb	r3, [r6, #0]
    4f6e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4f70:	7c33      	ldrb	r3, [r6, #16]
    4f72:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    4f74:	7cb3      	ldrb	r3, [r6, #18]
    4f76:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4f78:	7d33      	ldrb	r3, [r6, #20]
    4f7a:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    4f7c:	2200      	movs	r2, #0
    4f7e:	ab02      	add	r3, sp, #8
    4f80:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4f82:	7833      	ldrb	r3, [r6, #0]
    4f84:	2b01      	cmp	r3, #1
    4f86:	d028      	beq.n	4fda <spi_init+0x176>
	ctrla |= config->transfer_mode;
    4f88:	6873      	ldr	r3, [r6, #4]
    4f8a:	68b2      	ldr	r2, [r6, #8]
    4f8c:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    4f8e:	68f2      	ldr	r2, [r6, #12]
    4f90:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    4f92:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    4f94:	7c72      	ldrb	r2, [r6, #17]
    4f96:	2a00      	cmp	r2, #0
    4f98:	d103      	bne.n	4fa2 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4f9a:	4a25      	ldr	r2, [pc, #148]	; (5030 <spi_init+0x1cc>)
    4f9c:	7892      	ldrb	r2, [r2, #2]
    4f9e:	0792      	lsls	r2, r2, #30
    4fa0:	d501      	bpl.n	4fa6 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4fa2:	2280      	movs	r2, #128	; 0x80
    4fa4:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    4fa6:	7cb2      	ldrb	r2, [r6, #18]
    4fa8:	2a00      	cmp	r2, #0
    4faa:	d002      	beq.n	4fb2 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4fac:	2280      	movs	r2, #128	; 0x80
    4fae:	0292      	lsls	r2, r2, #10
    4fb0:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    4fb2:	7cf2      	ldrb	r2, [r6, #19]
    4fb4:	2a00      	cmp	r2, #0
    4fb6:	d002      	beq.n	4fbe <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4fb8:	2280      	movs	r2, #128	; 0x80
    4fba:	0092      	lsls	r2, r2, #2
    4fbc:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    4fbe:	7d32      	ldrb	r2, [r6, #20]
    4fc0:	2a00      	cmp	r2, #0
    4fc2:	d002      	beq.n	4fca <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4fc4:	2280      	movs	r2, #128	; 0x80
    4fc6:	0192      	lsls	r2, r2, #6
    4fc8:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    4fca:	683a      	ldr	r2, [r7, #0]
    4fcc:	4313      	orrs	r3, r2
    4fce:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4fd0:	687b      	ldr	r3, [r7, #4]
    4fd2:	430b      	orrs	r3, r1
    4fd4:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    4fd6:	2000      	movs	r0, #0
    4fd8:	e74e      	b.n	4e78 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4fda:	6828      	ldr	r0, [r5, #0]
    4fdc:	4b0a      	ldr	r3, [pc, #40]	; (5008 <spi_init+0x1a4>)
    4fde:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4fe0:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4fe2:	b2c0      	uxtb	r0, r0
    4fe4:	4b13      	ldr	r3, [pc, #76]	; (5034 <spi_init+0x1d0>)
    4fe6:	4798      	blx	r3
    4fe8:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4fea:	ab02      	add	r3, sp, #8
    4fec:	1d9a      	adds	r2, r3, #6
    4fee:	69b0      	ldr	r0, [r6, #24]
    4ff0:	4b11      	ldr	r3, [pc, #68]	; (5038 <spi_init+0x1d4>)
    4ff2:	4798      	blx	r3
    4ff4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4ff6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	d000      	beq.n	4ffe <spi_init+0x19a>
    4ffc:	e73c      	b.n	4e78 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    4ffe:	ab02      	add	r3, sp, #8
    5000:	3306      	adds	r3, #6
    5002:	781b      	ldrb	r3, [r3, #0]
    5004:	733b      	strb	r3, [r7, #12]
    5006:	e7bf      	b.n	4f88 <spi_init+0x124>
    5008:	00004d5d 	.word	0x00004d5d
    500c:	40000400 	.word	0x40000400
    5010:	000060d5 	.word	0x000060d5
    5014:	00006049 	.word	0x00006049
    5018:	00004b99 	.word	0x00004b99
    501c:	000052d1 	.word	0x000052d1
    5020:	00004d99 	.word	0x00004d99
    5024:	200015d0 	.word	0x200015d0
    5028:	00004be5 	.word	0x00004be5
    502c:	000061cd 	.word	0x000061cd
    5030:	41002000 	.word	0x41002000
    5034:	000060f1 	.word	0x000060f1
    5038:	00004adb 	.word	0x00004adb

0000503c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    503c:	b5f0      	push	{r4, r5, r6, r7, lr}
    503e:	46d6      	mov	lr, sl
    5040:	4647      	mov	r7, r8
    5042:	b580      	push	{r7, lr}
    5044:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    5046:	2438      	movs	r4, #56	; 0x38
    5048:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    504a:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    504c:	2d05      	cmp	r5, #5
    504e:	d002      	beq.n	5056 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5050:	3412      	adds	r4, #18
	if (length == 0) {
    5052:	2a00      	cmp	r2, #0
    5054:	d105      	bne.n	5062 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    5056:	0020      	movs	r0, r4
    5058:	b003      	add	sp, #12
    505a:	bc0c      	pop	{r2, r3}
    505c:	4690      	mov	r8, r2
    505e:	469a      	mov	sl, r3
    5060:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    5062:	79c4      	ldrb	r4, [r0, #7]
    5064:	2c00      	cmp	r4, #0
    5066:	d144      	bne.n	50f2 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    5068:	341c      	adds	r4, #28
    506a:	e7f4      	b.n	5056 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    506c:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    506e:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    5070:	423c      	tst	r4, r7
    5072:	d0fc      	beq.n	506e <spi_read_buffer_wait+0x32>
    5074:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    5076:	423c      	tst	r4, r7
    5078:	d01a      	beq.n	50b0 <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    507a:	4644      	mov	r4, r8
    507c:	62ac      	str	r4, [r5, #40]	; 0x28
    507e:	e017      	b.n	50b0 <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5080:	7984      	ldrb	r4, [r0, #6]
    5082:	2c01      	cmp	r4, #1
    5084:	d026      	beq.n	50d4 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5086:	6aad      	ldr	r5, [r5, #40]	; 0x28
    5088:	b2ec      	uxtb	r4, r5
    508a:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    508c:	9c01      	ldr	r4, [sp, #4]
    508e:	2c00      	cmp	r4, #0
    5090:	d13a      	bne.n	5108 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    5092:	1c75      	adds	r5, r6, #1
    5094:	b2ad      	uxth	r5, r5
    5096:	4664      	mov	r4, ip
    5098:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    509a:	7984      	ldrb	r4, [r0, #6]
    509c:	2c01      	cmp	r4, #1
    509e:	d01e      	beq.n	50de <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    50a0:	002e      	movs	r6, r5
	while (length--) {
    50a2:	3a01      	subs	r2, #1
    50a4:	b292      	uxth	r2, r2
    50a6:	4552      	cmp	r2, sl
    50a8:	d01f      	beq.n	50ea <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    50aa:	7944      	ldrb	r4, [r0, #5]
    50ac:	2c01      	cmp	r4, #1
    50ae:	d0dd      	beq.n	506c <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    50b0:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    50b2:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    50b4:	421c      	tst	r4, r3
    50b6:	d0fc      	beq.n	50b2 <spi_read_buffer_wait+0x76>
    50b8:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    50ba:	421c      	tst	r4, r3
    50bc:	d017      	beq.n	50ee <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    50be:	8b6c      	ldrh	r4, [r5, #26]
    50c0:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    50c2:	2400      	movs	r4, #0
    50c4:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    50c6:	4664      	mov	r4, ip
    50c8:	421c      	tst	r4, r3
    50ca:	d0d9      	beq.n	5080 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    50cc:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    50ce:	241e      	movs	r4, #30
    50d0:	9401      	str	r4, [sp, #4]
    50d2:	e7d5      	b.n	5080 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    50d4:	6aac      	ldr	r4, [r5, #40]	; 0x28
    50d6:	05e4      	lsls	r4, r4, #23
    50d8:	0de4      	lsrs	r4, r4, #23
    50da:	46a4      	mov	ip, r4
    50dc:	e7d6      	b.n	508c <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    50de:	3602      	adds	r6, #2
    50e0:	b2b6      	uxth	r6, r6
    50e2:	4664      	mov	r4, ip
    50e4:	0a24      	lsrs	r4, r4, #8
    50e6:	554c      	strb	r4, [r1, r5]
    50e8:	e7db      	b.n	50a2 <spi_read_buffer_wait+0x66>
    50ea:	9c01      	ldr	r4, [sp, #4]
    50ec:	e7b3      	b.n	5056 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    50ee:	2410      	movs	r4, #16
    50f0:	e7b1      	b.n	5056 <spi_read_buffer_wait+0x1a>
	while (length--) {
    50f2:	3a01      	subs	r2, #1
    50f4:	b292      	uxth	r2, r2
    50f6:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    50f8:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    50fa:	05db      	lsls	r3, r3, #23
    50fc:	0ddb      	lsrs	r3, r3, #23
    50fe:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    5100:	2304      	movs	r3, #4
	while (length--) {
    5102:	4c02      	ldr	r4, [pc, #8]	; (510c <spi_read_buffer_wait+0xd0>)
    5104:	46a2      	mov	sl, r4
    5106:	e7d0      	b.n	50aa <spi_read_buffer_wait+0x6e>
    5108:	9c01      	ldr	r4, [sp, #4]
    510a:	e7a4      	b.n	5056 <spi_read_buffer_wait+0x1a>
    510c:	0000ffff 	.word	0x0000ffff

00005110 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5110:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5112:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5114:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    5116:	2c01      	cmp	r4, #1
    5118:	d001      	beq.n	511e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    511a:	0018      	movs	r0, r3
    511c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    511e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5120:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5122:	2c00      	cmp	r4, #0
    5124:	d1f9      	bne.n	511a <spi_select_slave+0xa>
		if (select) {
    5126:	2a00      	cmp	r2, #0
    5128:	d058      	beq.n	51dc <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    512a:	784b      	ldrb	r3, [r1, #1]
    512c:	2b00      	cmp	r3, #0
    512e:	d044      	beq.n	51ba <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5130:	6803      	ldr	r3, [r0, #0]
    5132:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5134:	07db      	lsls	r3, r3, #31
    5136:	d410      	bmi.n	515a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5138:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    513a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    513c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    513e:	2900      	cmp	r1, #0
    5140:	d104      	bne.n	514c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    5142:	0953      	lsrs	r3, r2, #5
    5144:	01db      	lsls	r3, r3, #7
    5146:	492e      	ldr	r1, [pc, #184]	; (5200 <spi_select_slave+0xf0>)
    5148:	468c      	mov	ip, r1
    514a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    514c:	211f      	movs	r1, #31
    514e:	4011      	ands	r1, r2
    5150:	2201      	movs	r2, #1
    5152:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5154:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    5156:	2305      	movs	r3, #5
    5158:	e7df      	b.n	511a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    515a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    515c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    515e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5160:	2c00      	cmp	r4, #0
    5162:	d104      	bne.n	516e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5164:	0953      	lsrs	r3, r2, #5
    5166:	01db      	lsls	r3, r3, #7
    5168:	4c25      	ldr	r4, [pc, #148]	; (5200 <spi_select_slave+0xf0>)
    516a:	46a4      	mov	ip, r4
    516c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    516e:	241f      	movs	r4, #31
    5170:	4014      	ands	r4, r2
    5172:	2201      	movs	r2, #1
    5174:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5176:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5178:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    517a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    517c:	07d2      	lsls	r2, r2, #31
    517e:	d501      	bpl.n	5184 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5180:	788a      	ldrb	r2, [r1, #2]
    5182:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5184:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5186:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5188:	2a00      	cmp	r2, #0
    518a:	d1c6      	bne.n	511a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    518c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    518e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5190:	7e13      	ldrb	r3, [r2, #24]
    5192:	420b      	tst	r3, r1
    5194:	d0fc      	beq.n	5190 <spi_select_slave+0x80>
    5196:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5198:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    519a:	0749      	lsls	r1, r1, #29
    519c:	d5bd      	bpl.n	511a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    519e:	8b53      	ldrh	r3, [r2, #26]
    51a0:	075b      	lsls	r3, r3, #29
    51a2:	d501      	bpl.n	51a8 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    51a4:	2304      	movs	r3, #4
    51a6:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    51a8:	7983      	ldrb	r3, [r0, #6]
    51aa:	2b01      	cmp	r3, #1
    51ac:	d002      	beq.n	51b4 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    51ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    51b0:	2300      	movs	r3, #0
    51b2:	e7b2      	b.n	511a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    51b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    51b6:	2300      	movs	r3, #0
    51b8:	e7af      	b.n	511a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    51ba:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    51bc:	09d1      	lsrs	r1, r2, #7
		return NULL;
    51be:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    51c0:	2900      	cmp	r1, #0
    51c2:	d104      	bne.n	51ce <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    51c4:	0953      	lsrs	r3, r2, #5
    51c6:	01db      	lsls	r3, r3, #7
    51c8:	490d      	ldr	r1, [pc, #52]	; (5200 <spi_select_slave+0xf0>)
    51ca:	468c      	mov	ip, r1
    51cc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    51ce:	211f      	movs	r1, #31
    51d0:	4011      	ands	r1, r2
    51d2:	2201      	movs	r2, #1
    51d4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    51d6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    51d8:	2300      	movs	r3, #0
    51da:	e79e      	b.n	511a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    51dc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    51de:	09d1      	lsrs	r1, r2, #7
		return NULL;
    51e0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    51e2:	2900      	cmp	r1, #0
    51e4:	d104      	bne.n	51f0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    51e6:	0953      	lsrs	r3, r2, #5
    51e8:	01db      	lsls	r3, r3, #7
    51ea:	4905      	ldr	r1, [pc, #20]	; (5200 <spi_select_slave+0xf0>)
    51ec:	468c      	mov	ip, r1
    51ee:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    51f0:	211f      	movs	r1, #31
    51f2:	4011      	ands	r1, r2
    51f4:	2201      	movs	r2, #1
    51f6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    51f8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    51fa:	2300      	movs	r3, #0
    51fc:	e78d      	b.n	511a <spi_select_slave+0xa>
    51fe:	46c0      	nop			; (mov r8, r8)
    5200:	41004400 	.word	0x41004400

00005204 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5204:	b5f0      	push	{r4, r5, r6, r7, lr}
    5206:	46de      	mov	lr, fp
    5208:	4657      	mov	r7, sl
    520a:	464e      	mov	r6, r9
    520c:	4645      	mov	r5, r8
    520e:	b5e0      	push	{r5, r6, r7, lr}
    5210:	b083      	sub	sp, #12
    5212:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    5214:	2338      	movs	r3, #56	; 0x38
    5216:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    5218:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    521a:	2c05      	cmp	r4, #5
    521c:	d002      	beq.n	5224 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    521e:	3312      	adds	r3, #18
	if (length == 0) {
    5220:	2a00      	cmp	r2, #0
    5222:	d14b      	bne.n	52bc <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    5224:	0018      	movs	r0, r3
    5226:	b003      	add	sp, #12
    5228:	bc3c      	pop	{r2, r3, r4, r5}
    522a:	4690      	mov	r8, r2
    522c:	4699      	mov	r9, r3
    522e:	46a2      	mov	sl, r4
    5230:	46ab      	mov	fp, r5
    5232:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    5234:	3702      	adds	r7, #2
    5236:	b2bf      	uxth	r7, r7
    5238:	4641      	mov	r1, r8
    523a:	4653      	mov	r3, sl
    523c:	5c59      	ldrb	r1, [r3, r1]
    523e:	0209      	lsls	r1, r1, #8
    5240:	465b      	mov	r3, fp
    5242:	430b      	orrs	r3, r1
    5244:	e018      	b.n	5278 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5246:	7983      	ldrb	r3, [r0, #6]
    5248:	2b01      	cmp	r3, #1
    524a:	d02a      	beq.n	52a2 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    524c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    524e:	3e01      	subs	r6, #1
    5250:	b2b6      	uxth	r6, r6
    5252:	4566      	cmp	r6, ip
    5254:	d027      	beq.n	52a6 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5256:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5258:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    525a:	4223      	tst	r3, r4
    525c:	d0fc      	beq.n	5258 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    525e:	1c7b      	adds	r3, r7, #1
    5260:	b29b      	uxth	r3, r3
    5262:	4698      	mov	r8, r3
    5264:	4653      	mov	r3, sl
    5266:	5ddb      	ldrb	r3, [r3, r7]
    5268:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    526a:	7981      	ldrb	r1, [r0, #6]
    526c:	2901      	cmp	r1, #1
    526e:	d0e1      	beq.n	5234 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    5270:	4669      	mov	r1, sp
    5272:	80cb      	strh	r3, [r1, #6]
    5274:	88cb      	ldrh	r3, [r1, #6]
    5276:	4647      	mov	r7, r8
    5278:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    527a:	4221      	tst	r1, r4
    527c:	d002      	beq.n	5284 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    527e:	05db      	lsls	r3, r3, #23
    5280:	0ddb      	lsrs	r3, r3, #23
    5282:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    5284:	79c3      	ldrb	r3, [r0, #7]
    5286:	2b00      	cmp	r3, #0
    5288:	d0e1      	beq.n	524e <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    528a:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    528c:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    528e:	422b      	tst	r3, r5
    5290:	d0fc      	beq.n	528c <spi_write_buffer_wait+0x88>
    5292:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    5294:	422b      	tst	r3, r5
    5296:	d0da      	beq.n	524e <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5298:	8b53      	ldrh	r3, [r2, #26]
    529a:	422b      	tst	r3, r5
    529c:	d0d3      	beq.n	5246 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    529e:	8355      	strh	r5, [r2, #26]
    52a0:	e7d1      	b.n	5246 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    52a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    52a4:	e7d3      	b.n	524e <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    52a6:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    52a8:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    52aa:	2a01      	cmp	r2, #1
    52ac:	d1ba      	bne.n	5224 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    52ae:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    52b0:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    52b2:	7e0b      	ldrb	r3, [r1, #24]
    52b4:	4213      	tst	r3, r2
    52b6:	d0fc      	beq.n	52b2 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    52b8:	2300      	movs	r3, #0
    52ba:	e7b3      	b.n	5224 <spi_write_buffer_wait+0x20>
	while (length--) {
    52bc:	3a01      	subs	r2, #1
    52be:	b296      	uxth	r6, r2
    52c0:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    52c2:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    52c4:	2504      	movs	r5, #4
	while (length--) {
    52c6:	4b01      	ldr	r3, [pc, #4]	; (52cc <spi_write_buffer_wait+0xc8>)
    52c8:	469c      	mov	ip, r3
    52ca:	e7c4      	b.n	5256 <spi_write_buffer_wait+0x52>
    52cc:	0000ffff 	.word	0x0000ffff

000052d0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    52d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    52d2:	0080      	lsls	r0, r0, #2
    52d4:	4b70      	ldr	r3, [pc, #448]	; (5498 <_spi_interrupt_handler+0x1c8>)
    52d6:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    52d8:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    52da:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    52dc:	5ce7      	ldrb	r7, [r4, r3]
    52de:	2236      	movs	r2, #54	; 0x36
    52e0:	5ca2      	ldrb	r2, [r4, r2]
    52e2:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    52e4:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    52e6:	7db5      	ldrb	r5, [r6, #22]
    52e8:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    52ea:	07eb      	lsls	r3, r5, #31
    52ec:	d502      	bpl.n	52f4 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    52ee:	7963      	ldrb	r3, [r4, #5]
    52f0:	2b01      	cmp	r3, #1
    52f2:	d01e      	beq.n	5332 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    52f4:	076b      	lsls	r3, r5, #29
    52f6:	d511      	bpl.n	531c <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    52f8:	8b73      	ldrh	r3, [r6, #26]
    52fa:	075b      	lsls	r3, r3, #29
    52fc:	d55a      	bpl.n	53b4 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    52fe:	7a63      	ldrb	r3, [r4, #9]
    5300:	2b01      	cmp	r3, #1
    5302:	d008      	beq.n	5316 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    5304:	221e      	movs	r2, #30
    5306:	2338      	movs	r3, #56	; 0x38
    5308:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    530a:	3b35      	subs	r3, #53	; 0x35
    530c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    530e:	3302      	adds	r3, #2
    5310:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    5312:	073b      	lsls	r3, r7, #28
    5314:	d44a      	bmi.n	53ac <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    5316:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5318:	2304      	movs	r3, #4
    531a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    531c:	07ab      	lsls	r3, r5, #30
    531e:	d503      	bpl.n	5328 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5320:	7963      	ldrb	r3, [r4, #5]
    5322:	2b01      	cmp	r3, #1
    5324:	d100      	bne.n	5328 <_spi_interrupt_handler+0x58>
    5326:	e097      	b.n	5458 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    5328:	b26d      	sxtb	r5, r5
    532a:	2d00      	cmp	r5, #0
    532c:	da00      	bge.n	5330 <_spi_interrupt_handler+0x60>
    532e:	e0a9      	b.n	5484 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    5330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    5332:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    5334:	2b00      	cmp	r3, #0
    5336:	d022      	beq.n	537e <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    5338:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    533a:	2b00      	cmp	r3, #0
    533c:	d0da      	beq.n	52f4 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    533e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    5340:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5342:	7813      	ldrb	r3, [r2, #0]
    5344:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    5346:	1c50      	adds	r0, r2, #1
    5348:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    534a:	79a0      	ldrb	r0, [r4, #6]
    534c:	2801      	cmp	r0, #1
    534e:	d027      	beq.n	53a0 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    5350:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    5352:	05db      	lsls	r3, r3, #23
    5354:	0ddb      	lsrs	r3, r3, #23
    5356:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    5358:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    535a:	3b01      	subs	r3, #1
    535c:	b29b      	uxth	r3, r3
    535e:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    5360:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    5362:	b29b      	uxth	r3, r3
    5364:	2b00      	cmp	r3, #0
    5366:	d1c5      	bne.n	52f4 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5368:	3301      	adds	r3, #1
    536a:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    536c:	7a63      	ldrb	r3, [r4, #9]
    536e:	2b01      	cmp	r3, #1
    5370:	d1c0      	bne.n	52f4 <_spi_interrupt_handler+0x24>
    5372:	79e3      	ldrb	r3, [r4, #7]
    5374:	2b00      	cmp	r3, #0
    5376:	d1bd      	bne.n	52f4 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5378:	3302      	adds	r3, #2
    537a:	75b3      	strb	r3, [r6, #22]
    537c:	e7ba      	b.n	52f4 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    537e:	4b47      	ldr	r3, [pc, #284]	; (549c <_spi_interrupt_handler+0x1cc>)
    5380:	881b      	ldrh	r3, [r3, #0]
    5382:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    5384:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5386:	3b01      	subs	r3, #1
    5388:	b29b      	uxth	r3, r3
    538a:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    538c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    538e:	b29b      	uxth	r3, r3
    5390:	2b00      	cmp	r3, #0
    5392:	d101      	bne.n	5398 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5394:	3301      	adds	r3, #1
    5396:	7533      	strb	r3, [r6, #20]
		if (0
    5398:	7963      	ldrb	r3, [r4, #5]
    539a:	2b01      	cmp	r3, #1
    539c:	d0cc      	beq.n	5338 <_spi_interrupt_handler+0x68>
    539e:	e7a9      	b.n	52f4 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    53a0:	7850      	ldrb	r0, [r2, #1]
    53a2:	0200      	lsls	r0, r0, #8
    53a4:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    53a6:	3202      	adds	r2, #2
    53a8:	62e2      	str	r2, [r4, #44]	; 0x2c
    53aa:	e7d2      	b.n	5352 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    53ac:	0020      	movs	r0, r4
    53ae:	69a3      	ldr	r3, [r4, #24]
    53b0:	4798      	blx	r3
    53b2:	e7b0      	b.n	5316 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    53b4:	7a63      	ldrb	r3, [r4, #9]
    53b6:	2b01      	cmp	r3, #1
    53b8:	d028      	beq.n	540c <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    53ba:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    53bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53be:	05db      	lsls	r3, r3, #23
    53c0:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    53c2:	b2da      	uxtb	r2, r3
    53c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    53c6:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    53c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    53ca:	1c51      	adds	r1, r2, #1
    53cc:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    53ce:	79a1      	ldrb	r1, [r4, #6]
    53d0:	2901      	cmp	r1, #1
    53d2:	d034      	beq.n	543e <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    53d4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    53d6:	3b01      	subs	r3, #1
    53d8:	b29b      	uxth	r3, r3
    53da:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    53dc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    53de:	b29b      	uxth	r3, r3
    53e0:	2b00      	cmp	r3, #0
    53e2:	d000      	beq.n	53e6 <_spi_interrupt_handler+0x116>
    53e4:	e79a      	b.n	531c <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    53e6:	2200      	movs	r2, #0
    53e8:	3338      	adds	r3, #56	; 0x38
    53ea:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    53ec:	3b34      	subs	r3, #52	; 0x34
    53ee:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    53f0:	7a63      	ldrb	r3, [r4, #9]
    53f2:	2b02      	cmp	r3, #2
    53f4:	d029      	beq.n	544a <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    53f6:	7a63      	ldrb	r3, [r4, #9]
    53f8:	2b00      	cmp	r3, #0
    53fa:	d000      	beq.n	53fe <_spi_interrupt_handler+0x12e>
    53fc:	e78e      	b.n	531c <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    53fe:	07bb      	lsls	r3, r7, #30
    5400:	d400      	bmi.n	5404 <_spi_interrupt_handler+0x134>
    5402:	e78b      	b.n	531c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5404:	0020      	movs	r0, r4
    5406:	6923      	ldr	r3, [r4, #16]
    5408:	4798      	blx	r3
    540a:	e787      	b.n	531c <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    540c:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    5410:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5412:	3b01      	subs	r3, #1
    5414:	b29b      	uxth	r3, r3
    5416:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    5418:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    541a:	b29b      	uxth	r3, r3
    541c:	2b00      	cmp	r3, #0
    541e:	d000      	beq.n	5422 <_spi_interrupt_handler+0x152>
    5420:	e77c      	b.n	531c <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5422:	3304      	adds	r3, #4
    5424:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    5426:	2200      	movs	r2, #0
    5428:	3334      	adds	r3, #52	; 0x34
    542a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    542c:	3b35      	subs	r3, #53	; 0x35
    542e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    5430:	07fb      	lsls	r3, r7, #31
    5432:	d400      	bmi.n	5436 <_spi_interrupt_handler+0x166>
    5434:	e772      	b.n	531c <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    5436:	0020      	movs	r0, r4
    5438:	68e3      	ldr	r3, [r4, #12]
    543a:	4798      	blx	r3
    543c:	e76e      	b.n	531c <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    543e:	0a1b      	lsrs	r3, r3, #8
    5440:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    5442:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5444:	3301      	adds	r3, #1
    5446:	62a3      	str	r3, [r4, #40]	; 0x28
    5448:	e7c4      	b.n	53d4 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    544a:	077b      	lsls	r3, r7, #29
    544c:	d400      	bmi.n	5450 <_spi_interrupt_handler+0x180>
    544e:	e765      	b.n	531c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    5450:	0020      	movs	r0, r4
    5452:	6963      	ldr	r3, [r4, #20]
    5454:	4798      	blx	r3
    5456:	e761      	b.n	531c <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5458:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    545a:	2b01      	cmp	r3, #1
    545c:	d000      	beq.n	5460 <_spi_interrupt_handler+0x190>
    545e:	e763      	b.n	5328 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5460:	79e3      	ldrb	r3, [r4, #7]
    5462:	2b00      	cmp	r3, #0
    5464:	d000      	beq.n	5468 <_spi_interrupt_handler+0x198>
    5466:	e75f      	b.n	5328 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5468:	3302      	adds	r3, #2
    546a:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    546c:	3301      	adds	r3, #1
    546e:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    5470:	2200      	movs	r2, #0
    5472:	3335      	adds	r3, #53	; 0x35
    5474:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    5476:	07fb      	lsls	r3, r7, #31
    5478:	d400      	bmi.n	547c <_spi_interrupt_handler+0x1ac>
    547a:	e755      	b.n	5328 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    547c:	0020      	movs	r0, r4
    547e:	68e3      	ldr	r3, [r4, #12]
    5480:	4798      	blx	r3
    5482:	e751      	b.n	5328 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5484:	2380      	movs	r3, #128	; 0x80
    5486:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5488:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    548a:	067b      	lsls	r3, r7, #25
    548c:	d400      	bmi.n	5490 <_spi_interrupt_handler+0x1c0>
    548e:	e74f      	b.n	5330 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    5490:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5492:	0020      	movs	r0, r4
    5494:	4798      	blx	r3
}
    5496:	e74b      	b.n	5330 <_spi_interrupt_handler+0x60>
    5498:	200015d0 	.word	0x200015d0
    549c:	200015e8 	.word	0x200015e8

000054a0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    54a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54a2:	46de      	mov	lr, fp
    54a4:	4657      	mov	r7, sl
    54a6:	464e      	mov	r6, r9
    54a8:	4645      	mov	r5, r8
    54aa:	b5e0      	push	{r5, r6, r7, lr}
    54ac:	b091      	sub	sp, #68	; 0x44
    54ae:	0005      	movs	r5, r0
    54b0:	000c      	movs	r4, r1
    54b2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    54b4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    54b6:	0008      	movs	r0, r1
    54b8:	4bbc      	ldr	r3, [pc, #752]	; (57ac <usart_init+0x30c>)
    54ba:	4798      	blx	r3
    54bc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    54be:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    54c0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    54c2:	07db      	lsls	r3, r3, #31
    54c4:	d506      	bpl.n	54d4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    54c6:	b011      	add	sp, #68	; 0x44
    54c8:	bc3c      	pop	{r2, r3, r4, r5}
    54ca:	4690      	mov	r8, r2
    54cc:	4699      	mov	r9, r3
    54ce:	46a2      	mov	sl, r4
    54d0:	46ab      	mov	fp, r5
    54d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    54d4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    54d6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    54d8:	079b      	lsls	r3, r3, #30
    54da:	d4f4      	bmi.n	54c6 <usart_init+0x26>
    54dc:	49b4      	ldr	r1, [pc, #720]	; (57b0 <usart_init+0x310>)
    54de:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    54e0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    54e2:	2301      	movs	r3, #1
    54e4:	40bb      	lsls	r3, r7
    54e6:	4303      	orrs	r3, r0
    54e8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    54ea:	a90f      	add	r1, sp, #60	; 0x3c
    54ec:	272d      	movs	r7, #45	; 0x2d
    54ee:	5df3      	ldrb	r3, [r6, r7]
    54f0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    54f2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    54f4:	b2d3      	uxtb	r3, r2
    54f6:	9302      	str	r3, [sp, #8]
    54f8:	0018      	movs	r0, r3
    54fa:	4bae      	ldr	r3, [pc, #696]	; (57b4 <usart_init+0x314>)
    54fc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    54fe:	9802      	ldr	r0, [sp, #8]
    5500:	4bad      	ldr	r3, [pc, #692]	; (57b8 <usart_init+0x318>)
    5502:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5504:	5df0      	ldrb	r0, [r6, r7]
    5506:	2100      	movs	r1, #0
    5508:	4bac      	ldr	r3, [pc, #688]	; (57bc <usart_init+0x31c>)
    550a:	4798      	blx	r3
	module->character_size = config->character_size;
    550c:	7af3      	ldrb	r3, [r6, #11]
    550e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    5510:	2324      	movs	r3, #36	; 0x24
    5512:	5cf3      	ldrb	r3, [r6, r3]
    5514:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5516:	2325      	movs	r3, #37	; 0x25
    5518:	5cf3      	ldrb	r3, [r6, r3]
    551a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    551c:	7ef3      	ldrb	r3, [r6, #27]
    551e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5520:	7f33      	ldrb	r3, [r6, #28]
    5522:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5524:	682b      	ldr	r3, [r5, #0]
    5526:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5528:	0018      	movs	r0, r3
    552a:	4ba0      	ldr	r3, [pc, #640]	; (57ac <usart_init+0x30c>)
    552c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    552e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    5530:	2200      	movs	r2, #0
    5532:	230e      	movs	r3, #14
    5534:	a906      	add	r1, sp, #24
    5536:	468c      	mov	ip, r1
    5538:	4463      	add	r3, ip
    553a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    553c:	8a32      	ldrh	r2, [r6, #16]
    553e:	9202      	str	r2, [sp, #8]
    5540:	2380      	movs	r3, #128	; 0x80
    5542:	01db      	lsls	r3, r3, #7
    5544:	429a      	cmp	r2, r3
    5546:	d100      	bne.n	554a <usart_init+0xaa>
    5548:	e09e      	b.n	5688 <usart_init+0x1e8>
    554a:	d90f      	bls.n	556c <usart_init+0xcc>
    554c:	23c0      	movs	r3, #192	; 0xc0
    554e:	01db      	lsls	r3, r3, #7
    5550:	9a02      	ldr	r2, [sp, #8]
    5552:	429a      	cmp	r2, r3
    5554:	d100      	bne.n	5558 <usart_init+0xb8>
    5556:	e092      	b.n	567e <usart_init+0x1de>
    5558:	2380      	movs	r3, #128	; 0x80
    555a:	021b      	lsls	r3, r3, #8
    555c:	429a      	cmp	r2, r3
    555e:	d000      	beq.n	5562 <usart_init+0xc2>
    5560:	e11f      	b.n	57a2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5562:	2303      	movs	r3, #3
    5564:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5566:	2300      	movs	r3, #0
    5568:	9307      	str	r3, [sp, #28]
    556a:	e008      	b.n	557e <usart_init+0xde>
	switch (config->sample_rate) {
    556c:	2380      	movs	r3, #128	; 0x80
    556e:	019b      	lsls	r3, r3, #6
    5570:	429a      	cmp	r2, r3
    5572:	d000      	beq.n	5576 <usart_init+0xd6>
    5574:	e115      	b.n	57a2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5576:	2310      	movs	r3, #16
    5578:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    557a:	3b0f      	subs	r3, #15
    557c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    557e:	6833      	ldr	r3, [r6, #0]
    5580:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5582:	68f3      	ldr	r3, [r6, #12]
    5584:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5586:	6973      	ldr	r3, [r6, #20]
    5588:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    558a:	7e33      	ldrb	r3, [r6, #24]
    558c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    558e:	2326      	movs	r3, #38	; 0x26
    5590:	5cf3      	ldrb	r3, [r6, r3]
    5592:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5594:	6873      	ldr	r3, [r6, #4]
    5596:	4699      	mov	r9, r3
	switch (transfer_mode)
    5598:	2b00      	cmp	r3, #0
    559a:	d100      	bne.n	559e <usart_init+0xfe>
    559c:	e0a0      	b.n	56e0 <usart_init+0x240>
    559e:	2380      	movs	r3, #128	; 0x80
    55a0:	055b      	lsls	r3, r3, #21
    55a2:	4599      	cmp	r9, r3
    55a4:	d100      	bne.n	55a8 <usart_init+0x108>
    55a6:	e084      	b.n	56b2 <usart_init+0x212>
	if(config->encoding_format_enable) {
    55a8:	7e73      	ldrb	r3, [r6, #25]
    55aa:	2b00      	cmp	r3, #0
    55ac:	d002      	beq.n	55b4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    55ae:	7eb3      	ldrb	r3, [r6, #26]
    55b0:	4642      	mov	r2, r8
    55b2:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    55b4:	682a      	ldr	r2, [r5, #0]
    55b6:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    55b8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    55ba:	2b00      	cmp	r3, #0
    55bc:	d1fc      	bne.n	55b8 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    55be:	330e      	adds	r3, #14
    55c0:	aa06      	add	r2, sp, #24
    55c2:	4694      	mov	ip, r2
    55c4:	4463      	add	r3, ip
    55c6:	881b      	ldrh	r3, [r3, #0]
    55c8:	4642      	mov	r2, r8
    55ca:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    55cc:	9b05      	ldr	r3, [sp, #20]
    55ce:	9a03      	ldr	r2, [sp, #12]
    55d0:	4313      	orrs	r3, r2
    55d2:	9a04      	ldr	r2, [sp, #16]
    55d4:	4313      	orrs	r3, r2
    55d6:	464a      	mov	r2, r9
    55d8:	4313      	orrs	r3, r2
    55da:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    55dc:	465b      	mov	r3, fp
    55de:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    55e0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    55e2:	4653      	mov	r3, sl
    55e4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    55e6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    55e8:	2327      	movs	r3, #39	; 0x27
    55ea:	5cf3      	ldrb	r3, [r6, r3]
    55ec:	2b00      	cmp	r3, #0
    55ee:	d101      	bne.n	55f4 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    55f0:	3304      	adds	r3, #4
    55f2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    55f4:	7e73      	ldrb	r3, [r6, #25]
    55f6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    55f8:	7f32      	ldrb	r2, [r6, #28]
    55fa:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    55fc:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    55fe:	7f72      	ldrb	r2, [r6, #29]
    5600:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5602:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5604:	2224      	movs	r2, #36	; 0x24
    5606:	5cb2      	ldrb	r2, [r6, r2]
    5608:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    560a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    560c:	2225      	movs	r2, #37	; 0x25
    560e:	5cb2      	ldrb	r2, [r6, r2]
    5610:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5612:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    5614:	7ab1      	ldrb	r1, [r6, #10]
    5616:	7af2      	ldrb	r2, [r6, #11]
    5618:	4311      	orrs	r1, r2
    561a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    561c:	8933      	ldrh	r3, [r6, #8]
    561e:	2bff      	cmp	r3, #255	; 0xff
    5620:	d100      	bne.n	5624 <usart_init+0x184>
    5622:	e081      	b.n	5728 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5624:	2280      	movs	r2, #128	; 0x80
    5626:	0452      	lsls	r2, r2, #17
    5628:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    562a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    562c:	232c      	movs	r3, #44	; 0x2c
    562e:	5cf3      	ldrb	r3, [r6, r3]
    5630:	2b00      	cmp	r3, #0
    5632:	d103      	bne.n	563c <usart_init+0x19c>
    5634:	4b62      	ldr	r3, [pc, #392]	; (57c0 <usart_init+0x320>)
    5636:	789b      	ldrb	r3, [r3, #2]
    5638:	079b      	lsls	r3, r3, #30
    563a:	d501      	bpl.n	5640 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    563c:	2380      	movs	r3, #128	; 0x80
    563e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    5640:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5642:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5644:	2b00      	cmp	r3, #0
    5646:	d1fc      	bne.n	5642 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    5648:	4643      	mov	r3, r8
    564a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    564c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    564e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5650:	2b00      	cmp	r3, #0
    5652:	d1fc      	bne.n	564e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    5654:	4643      	mov	r3, r8
    5656:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5658:	ab0e      	add	r3, sp, #56	; 0x38
    565a:	2280      	movs	r2, #128	; 0x80
    565c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    565e:	2200      	movs	r2, #0
    5660:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    5662:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5664:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5666:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5668:	930a      	str	r3, [sp, #40]	; 0x28
    566a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    566c:	930b      	str	r3, [sp, #44]	; 0x2c
    566e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    5670:	930c      	str	r3, [sp, #48]	; 0x30
    5672:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    5674:	9302      	str	r3, [sp, #8]
    5676:	930d      	str	r3, [sp, #52]	; 0x34
    5678:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    567a:	ae0a      	add	r6, sp, #40	; 0x28
    567c:	e063      	b.n	5746 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    567e:	2308      	movs	r3, #8
    5680:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5682:	3b07      	subs	r3, #7
    5684:	9307      	str	r3, [sp, #28]
    5686:	e77a      	b.n	557e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    5688:	6833      	ldr	r3, [r6, #0]
    568a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    568c:	68f3      	ldr	r3, [r6, #12]
    568e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5690:	6973      	ldr	r3, [r6, #20]
    5692:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5694:	7e33      	ldrb	r3, [r6, #24]
    5696:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5698:	2326      	movs	r3, #38	; 0x26
    569a:	5cf3      	ldrb	r3, [r6, r3]
    569c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    569e:	6873      	ldr	r3, [r6, #4]
    56a0:	4699      	mov	r9, r3
	switch (transfer_mode)
    56a2:	2b00      	cmp	r3, #0
    56a4:	d018      	beq.n	56d8 <usart_init+0x238>
    56a6:	2380      	movs	r3, #128	; 0x80
    56a8:	055b      	lsls	r3, r3, #21
    56aa:	4599      	cmp	r9, r3
    56ac:	d001      	beq.n	56b2 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    56ae:	2000      	movs	r0, #0
    56b0:	e025      	b.n	56fe <usart_init+0x25e>
			if (!config->use_external_clock) {
    56b2:	2327      	movs	r3, #39	; 0x27
    56b4:	5cf3      	ldrb	r3, [r6, r3]
    56b6:	2b00      	cmp	r3, #0
    56b8:	d000      	beq.n	56bc <usart_init+0x21c>
    56ba:	e775      	b.n	55a8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    56bc:	6a33      	ldr	r3, [r6, #32]
    56be:	001f      	movs	r7, r3
    56c0:	b2c0      	uxtb	r0, r0
    56c2:	4b40      	ldr	r3, [pc, #256]	; (57c4 <usart_init+0x324>)
    56c4:	4798      	blx	r3
    56c6:	0001      	movs	r1, r0
    56c8:	220e      	movs	r2, #14
    56ca:	ab06      	add	r3, sp, #24
    56cc:	469c      	mov	ip, r3
    56ce:	4462      	add	r2, ip
    56d0:	0038      	movs	r0, r7
    56d2:	4b3d      	ldr	r3, [pc, #244]	; (57c8 <usart_init+0x328>)
    56d4:	4798      	blx	r3
    56d6:	e012      	b.n	56fe <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    56d8:	2308      	movs	r3, #8
    56da:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    56dc:	2300      	movs	r3, #0
    56de:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    56e0:	2327      	movs	r3, #39	; 0x27
    56e2:	5cf3      	ldrb	r3, [r6, r3]
    56e4:	2b00      	cmp	r3, #0
    56e6:	d00e      	beq.n	5706 <usart_init+0x266>
				status_code =
    56e8:	9b06      	ldr	r3, [sp, #24]
    56ea:	9300      	str	r3, [sp, #0]
    56ec:	9b07      	ldr	r3, [sp, #28]
    56ee:	220e      	movs	r2, #14
    56f0:	a906      	add	r1, sp, #24
    56f2:	468c      	mov	ip, r1
    56f4:	4462      	add	r2, ip
    56f6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    56f8:	6a30      	ldr	r0, [r6, #32]
    56fa:	4f34      	ldr	r7, [pc, #208]	; (57cc <usart_init+0x32c>)
    56fc:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    56fe:	2800      	cmp	r0, #0
    5700:	d000      	beq.n	5704 <usart_init+0x264>
    5702:	e6e0      	b.n	54c6 <usart_init+0x26>
    5704:	e750      	b.n	55a8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    5706:	6a33      	ldr	r3, [r6, #32]
    5708:	001f      	movs	r7, r3
    570a:	b2c0      	uxtb	r0, r0
    570c:	4b2d      	ldr	r3, [pc, #180]	; (57c4 <usart_init+0x324>)
    570e:	4798      	blx	r3
    5710:	0001      	movs	r1, r0
				status_code =
    5712:	9b06      	ldr	r3, [sp, #24]
    5714:	9300      	str	r3, [sp, #0]
    5716:	9b07      	ldr	r3, [sp, #28]
    5718:	220e      	movs	r2, #14
    571a:	a806      	add	r0, sp, #24
    571c:	4684      	mov	ip, r0
    571e:	4462      	add	r2, ip
    5720:	0038      	movs	r0, r7
    5722:	4f2a      	ldr	r7, [pc, #168]	; (57cc <usart_init+0x32c>)
    5724:	47b8      	blx	r7
    5726:	e7ea      	b.n	56fe <usart_init+0x25e>
		if(config->lin_slave_enable) {
    5728:	7ef3      	ldrb	r3, [r6, #27]
    572a:	2b00      	cmp	r3, #0
    572c:	d100      	bne.n	5730 <usart_init+0x290>
    572e:	e77d      	b.n	562c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5730:	2380      	movs	r3, #128	; 0x80
    5732:	04db      	lsls	r3, r3, #19
    5734:	431f      	orrs	r7, r3
    5736:	e779      	b.n	562c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5738:	0020      	movs	r0, r4
    573a:	4b25      	ldr	r3, [pc, #148]	; (57d0 <usart_init+0x330>)
    573c:	4798      	blx	r3
    573e:	e007      	b.n	5750 <usart_init+0x2b0>
    5740:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5742:	2f04      	cmp	r7, #4
    5744:	d00d      	beq.n	5762 <usart_init+0x2c2>
    5746:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5748:	00bb      	lsls	r3, r7, #2
    574a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    574c:	2800      	cmp	r0, #0
    574e:	d0f3      	beq.n	5738 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    5750:	1c43      	adds	r3, r0, #1
    5752:	d0f5      	beq.n	5740 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5754:	a90e      	add	r1, sp, #56	; 0x38
    5756:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5758:	0c00      	lsrs	r0, r0, #16
    575a:	b2c0      	uxtb	r0, r0
    575c:	4b1d      	ldr	r3, [pc, #116]	; (57d4 <usart_init+0x334>)
    575e:	4798      	blx	r3
    5760:	e7ee      	b.n	5740 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    5762:	2300      	movs	r3, #0
    5764:	60eb      	str	r3, [r5, #12]
    5766:	612b      	str	r3, [r5, #16]
    5768:	616b      	str	r3, [r5, #20]
    576a:	61ab      	str	r3, [r5, #24]
    576c:	61eb      	str	r3, [r5, #28]
    576e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    5770:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5772:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5774:	2200      	movs	r2, #0
    5776:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5778:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    577a:	3330      	adds	r3, #48	; 0x30
    577c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    577e:	3301      	adds	r3, #1
    5780:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    5782:	3301      	adds	r3, #1
    5784:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    5786:	3301      	adds	r3, #1
    5788:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    578a:	6828      	ldr	r0, [r5, #0]
    578c:	4b07      	ldr	r3, [pc, #28]	; (57ac <usart_init+0x30c>)
    578e:	4798      	blx	r3
    5790:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5792:	4911      	ldr	r1, [pc, #68]	; (57d8 <usart_init+0x338>)
    5794:	4b11      	ldr	r3, [pc, #68]	; (57dc <usart_init+0x33c>)
    5796:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5798:	00a4      	lsls	r4, r4, #2
    579a:	4b11      	ldr	r3, [pc, #68]	; (57e0 <usart_init+0x340>)
    579c:	50e5      	str	r5, [r4, r3]
	return status_code;
    579e:	2000      	movs	r0, #0
    57a0:	e691      	b.n	54c6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    57a2:	2310      	movs	r3, #16
    57a4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    57a6:	2300      	movs	r3, #0
    57a8:	9307      	str	r3, [sp, #28]
    57aa:	e6e8      	b.n	557e <usart_init+0xde>
    57ac:	00004d5d 	.word	0x00004d5d
    57b0:	40000400 	.word	0x40000400
    57b4:	000060d5 	.word	0x000060d5
    57b8:	00006049 	.word	0x00006049
    57bc:	00004b99 	.word	0x00004b99
    57c0:	41002000 	.word	0x41002000
    57c4:	000060f1 	.word	0x000060f1
    57c8:	00004adb 	.word	0x00004adb
    57cc:	00004b05 	.word	0x00004b05
    57d0:	00004be5 	.word	0x00004be5
    57d4:	000061cd 	.word	0x000061cd
    57d8:	000058f9 	.word	0x000058f9
    57dc:	00004d99 	.word	0x00004d99
    57e0:	200015d0 	.word	0x200015d0

000057e4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    57e4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    57e6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    57e8:	2a00      	cmp	r2, #0
    57ea:	d101      	bne.n	57f0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    57ec:	0018      	movs	r0, r3
    57ee:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    57f0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    57f2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    57f4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    57f6:	2a00      	cmp	r2, #0
    57f8:	d1f8      	bne.n	57ec <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    57fa:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    57fc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    57fe:	2a00      	cmp	r2, #0
    5800:	d1fc      	bne.n	57fc <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    5802:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5804:	2102      	movs	r1, #2
    5806:	7e1a      	ldrb	r2, [r3, #24]
    5808:	420a      	tst	r2, r1
    580a:	d0fc      	beq.n	5806 <usart_write_wait+0x22>
	return STATUS_OK;
    580c:	2300      	movs	r3, #0
    580e:	e7ed      	b.n	57ec <usart_write_wait+0x8>

00005810 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5810:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    5812:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    5814:	2a00      	cmp	r2, #0
    5816:	d101      	bne.n	581c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    5818:	0018      	movs	r0, r3
    581a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    581c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    581e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5820:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    5822:	2a00      	cmp	r2, #0
    5824:	d1f8      	bne.n	5818 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    5826:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5828:	7e10      	ldrb	r0, [r2, #24]
    582a:	0740      	lsls	r0, r0, #29
    582c:	d5f4      	bpl.n	5818 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    582e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5830:	2b00      	cmp	r3, #0
    5832:	d1fc      	bne.n	582e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5834:	8b53      	ldrh	r3, [r2, #26]
    5836:	b2db      	uxtb	r3, r3
	if (error_code) {
    5838:	0698      	lsls	r0, r3, #26
    583a:	d01d      	beq.n	5878 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    583c:	0798      	lsls	r0, r3, #30
    583e:	d503      	bpl.n	5848 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5840:	2302      	movs	r3, #2
    5842:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    5844:	3318      	adds	r3, #24
    5846:	e7e7      	b.n	5818 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5848:	0758      	lsls	r0, r3, #29
    584a:	d503      	bpl.n	5854 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    584c:	2304      	movs	r3, #4
    584e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    5850:	331a      	adds	r3, #26
    5852:	e7e1      	b.n	5818 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5854:	07d8      	lsls	r0, r3, #31
    5856:	d503      	bpl.n	5860 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5858:	2301      	movs	r3, #1
    585a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    585c:	3312      	adds	r3, #18
    585e:	e7db      	b.n	5818 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    5860:	06d8      	lsls	r0, r3, #27
    5862:	d503      	bpl.n	586c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5864:	2310      	movs	r3, #16
    5866:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    5868:	3332      	adds	r3, #50	; 0x32
    586a:	e7d5      	b.n	5818 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    586c:	069b      	lsls	r3, r3, #26
    586e:	d503      	bpl.n	5878 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5870:	2320      	movs	r3, #32
    5872:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    5874:	3321      	adds	r3, #33	; 0x21
    5876:	e7cf      	b.n	5818 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    5878:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    587a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    587c:	2300      	movs	r3, #0
    587e:	e7cb      	b.n	5818 <usart_read_wait+0x8>

00005880 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5882:	0004      	movs	r4, r0
    5884:	000d      	movs	r5, r1
    5886:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5888:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    588a:	4b0f      	ldr	r3, [pc, #60]	; (58c8 <_usart_read_buffer+0x48>)
    588c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    588e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    5890:	b29b      	uxth	r3, r3
    5892:	2b00      	cmp	r3, #0
    5894:	d003      	beq.n	589e <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    5896:	4b0d      	ldr	r3, [pc, #52]	; (58cc <_usart_read_buffer+0x4c>)
    5898:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    589a:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    589c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    589e:	85a6      	strh	r6, [r4, #44]	; 0x2c
    58a0:	4b0a      	ldr	r3, [pc, #40]	; (58cc <_usart_read_buffer+0x4c>)
    58a2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    58a4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    58a6:	2205      	movs	r2, #5
    58a8:	2332      	movs	r3, #50	; 0x32
    58aa:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    58ac:	3b2e      	subs	r3, #46	; 0x2e
    58ae:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    58b0:	7a23      	ldrb	r3, [r4, #8]
    58b2:	2b00      	cmp	r3, #0
    58b4:	d001      	beq.n	58ba <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    58b6:	2320      	movs	r3, #32
    58b8:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    58ba:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    58bc:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    58be:	2b00      	cmp	r3, #0
    58c0:	d0ec      	beq.n	589c <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    58c2:	2308      	movs	r3, #8
    58c4:	75bb      	strb	r3, [r7, #22]
    58c6:	e7e9      	b.n	589c <_usart_read_buffer+0x1c>
    58c8:	00004785 	.word	0x00004785
    58cc:	000047c5 	.word	0x000047c5

000058d0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    58d0:	1c93      	adds	r3, r2, #2
    58d2:	009b      	lsls	r3, r3, #2
    58d4:	18c3      	adds	r3, r0, r3
    58d6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    58d8:	2130      	movs	r1, #48	; 0x30
    58da:	2301      	movs	r3, #1
    58dc:	4093      	lsls	r3, r2
    58de:	001a      	movs	r2, r3
    58e0:	5c43      	ldrb	r3, [r0, r1]
    58e2:	4313      	orrs	r3, r2
    58e4:	5443      	strb	r3, [r0, r1]
}
    58e6:	4770      	bx	lr

000058e8 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    58e8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    58ea:	2201      	movs	r2, #1
    58ec:	4b01      	ldr	r3, [pc, #4]	; (58f4 <usart_read_job+0xc>)
    58ee:	4798      	blx	r3
}
    58f0:	bd10      	pop	{r4, pc}
    58f2:	46c0      	nop			; (mov r8, r8)
    58f4:	00005881 	.word	0x00005881

000058f8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    58f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    58fa:	0080      	lsls	r0, r0, #2
    58fc:	4b62      	ldr	r3, [pc, #392]	; (5a88 <_usart_interrupt_handler+0x190>)
    58fe:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5900:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5902:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    5904:	2b00      	cmp	r3, #0
    5906:	d1fc      	bne.n	5902 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5908:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    590a:	7da6      	ldrb	r6, [r4, #22]
    590c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    590e:	2330      	movs	r3, #48	; 0x30
    5910:	5ceb      	ldrb	r3, [r5, r3]
    5912:	2231      	movs	r2, #49	; 0x31
    5914:	5caf      	ldrb	r7, [r5, r2]
    5916:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5918:	07f3      	lsls	r3, r6, #31
    591a:	d522      	bpl.n	5962 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    591c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    591e:	b29b      	uxth	r3, r3
    5920:	2b00      	cmp	r3, #0
    5922:	d01c      	beq.n	595e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5924:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5926:	7813      	ldrb	r3, [r2, #0]
    5928:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    592a:	1c51      	adds	r1, r2, #1
    592c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    592e:	7969      	ldrb	r1, [r5, #5]
    5930:	2901      	cmp	r1, #1
    5932:	d00e      	beq.n	5952 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5934:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5936:	05db      	lsls	r3, r3, #23
    5938:	0ddb      	lsrs	r3, r3, #23
    593a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    593c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    593e:	3b01      	subs	r3, #1
    5940:	b29b      	uxth	r3, r3
    5942:	85eb      	strh	r3, [r5, #46]	; 0x2e
    5944:	2b00      	cmp	r3, #0
    5946:	d10c      	bne.n	5962 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5948:	3301      	adds	r3, #1
    594a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    594c:	3301      	adds	r3, #1
    594e:	75a3      	strb	r3, [r4, #22]
    5950:	e007      	b.n	5962 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5952:	7851      	ldrb	r1, [r2, #1]
    5954:	0209      	lsls	r1, r1, #8
    5956:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    5958:	3202      	adds	r2, #2
    595a:	62aa      	str	r2, [r5, #40]	; 0x28
    595c:	e7eb      	b.n	5936 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    595e:	2301      	movs	r3, #1
    5960:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5962:	07b3      	lsls	r3, r6, #30
    5964:	d506      	bpl.n	5974 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5966:	2302      	movs	r3, #2
    5968:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    596a:	2200      	movs	r2, #0
    596c:	3331      	adds	r3, #49	; 0x31
    596e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5970:	07fb      	lsls	r3, r7, #31
    5972:	d41a      	bmi.n	59aa <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5974:	0773      	lsls	r3, r6, #29
    5976:	d565      	bpl.n	5a44 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    5978:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    597a:	b29b      	uxth	r3, r3
    597c:	2b00      	cmp	r3, #0
    597e:	d05f      	beq.n	5a40 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5980:	8b63      	ldrh	r3, [r4, #26]
    5982:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5984:	071a      	lsls	r2, r3, #28
    5986:	d414      	bmi.n	59b2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5988:	223f      	movs	r2, #63	; 0x3f
    598a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    598c:	2b00      	cmp	r3, #0
    598e:	d034      	beq.n	59fa <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5990:	079a      	lsls	r2, r3, #30
    5992:	d511      	bpl.n	59b8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5994:	221a      	movs	r2, #26
    5996:	2332      	movs	r3, #50	; 0x32
    5998:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    599a:	3b30      	subs	r3, #48	; 0x30
    599c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    599e:	077b      	lsls	r3, r7, #29
    59a0:	d550      	bpl.n	5a44 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    59a2:	0028      	movs	r0, r5
    59a4:	696b      	ldr	r3, [r5, #20]
    59a6:	4798      	blx	r3
    59a8:	e04c      	b.n	5a44 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    59aa:	0028      	movs	r0, r5
    59ac:	68eb      	ldr	r3, [r5, #12]
    59ae:	4798      	blx	r3
    59b0:	e7e0      	b.n	5974 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    59b2:	2237      	movs	r2, #55	; 0x37
    59b4:	4013      	ands	r3, r2
    59b6:	e7e9      	b.n	598c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    59b8:	075a      	lsls	r2, r3, #29
    59ba:	d505      	bpl.n	59c8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    59bc:	221e      	movs	r2, #30
    59be:	2332      	movs	r3, #50	; 0x32
    59c0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    59c2:	3b2e      	subs	r3, #46	; 0x2e
    59c4:	8363      	strh	r3, [r4, #26]
    59c6:	e7ea      	b.n	599e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    59c8:	07da      	lsls	r2, r3, #31
    59ca:	d505      	bpl.n	59d8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    59cc:	2213      	movs	r2, #19
    59ce:	2332      	movs	r3, #50	; 0x32
    59d0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    59d2:	3b31      	subs	r3, #49	; 0x31
    59d4:	8363      	strh	r3, [r4, #26]
    59d6:	e7e2      	b.n	599e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    59d8:	06da      	lsls	r2, r3, #27
    59da:	d505      	bpl.n	59e8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    59dc:	2242      	movs	r2, #66	; 0x42
    59de:	2332      	movs	r3, #50	; 0x32
    59e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    59e2:	3b22      	subs	r3, #34	; 0x22
    59e4:	8363      	strh	r3, [r4, #26]
    59e6:	e7da      	b.n	599e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    59e8:	2220      	movs	r2, #32
    59ea:	421a      	tst	r2, r3
    59ec:	d0d7      	beq.n	599e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    59ee:	3221      	adds	r2, #33	; 0x21
    59f0:	2332      	movs	r3, #50	; 0x32
    59f2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    59f4:	3b12      	subs	r3, #18
    59f6:	8363      	strh	r3, [r4, #26]
    59f8:	e7d1      	b.n	599e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    59fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    59fc:	05db      	lsls	r3, r3, #23
    59fe:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5a00:	b2da      	uxtb	r2, r3
    5a02:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5a04:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5a06:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5a08:	1c51      	adds	r1, r2, #1
    5a0a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5a0c:	7969      	ldrb	r1, [r5, #5]
    5a0e:	2901      	cmp	r1, #1
    5a10:	d010      	beq.n	5a34 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5a12:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5a14:	3b01      	subs	r3, #1
    5a16:	b29b      	uxth	r3, r3
    5a18:	85ab      	strh	r3, [r5, #44]	; 0x2c
    5a1a:	2b00      	cmp	r3, #0
    5a1c:	d112      	bne.n	5a44 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5a1e:	3304      	adds	r3, #4
    5a20:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    5a22:	2200      	movs	r2, #0
    5a24:	332e      	adds	r3, #46	; 0x2e
    5a26:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    5a28:	07bb      	lsls	r3, r7, #30
    5a2a:	d50b      	bpl.n	5a44 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5a2c:	0028      	movs	r0, r5
    5a2e:	692b      	ldr	r3, [r5, #16]
    5a30:	4798      	blx	r3
    5a32:	e007      	b.n	5a44 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5a34:	0a1b      	lsrs	r3, r3, #8
    5a36:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    5a38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5a3a:	3301      	adds	r3, #1
    5a3c:	626b      	str	r3, [r5, #36]	; 0x24
    5a3e:	e7e8      	b.n	5a12 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5a40:	2304      	movs	r3, #4
    5a42:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5a44:	06f3      	lsls	r3, r6, #27
    5a46:	d504      	bpl.n	5a52 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5a48:	2310      	movs	r3, #16
    5a4a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5a4c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5a4e:	06fb      	lsls	r3, r7, #27
    5a50:	d40e      	bmi.n	5a70 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5a52:	06b3      	lsls	r3, r6, #26
    5a54:	d504      	bpl.n	5a60 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5a56:	2320      	movs	r3, #32
    5a58:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5a5a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5a5c:	073b      	lsls	r3, r7, #28
    5a5e:	d40b      	bmi.n	5a78 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5a60:	0733      	lsls	r3, r6, #28
    5a62:	d504      	bpl.n	5a6e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5a64:	2308      	movs	r3, #8
    5a66:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5a68:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5a6a:	06bb      	lsls	r3, r7, #26
    5a6c:	d408      	bmi.n	5a80 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    5a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5a70:	0028      	movs	r0, r5
    5a72:	69eb      	ldr	r3, [r5, #28]
    5a74:	4798      	blx	r3
    5a76:	e7ec      	b.n	5a52 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5a78:	0028      	movs	r0, r5
    5a7a:	69ab      	ldr	r3, [r5, #24]
    5a7c:	4798      	blx	r3
    5a7e:	e7ef      	b.n	5a60 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5a80:	6a2b      	ldr	r3, [r5, #32]
    5a82:	0028      	movs	r0, r5
    5a84:	4798      	blx	r3
}
    5a86:	e7f2      	b.n	5a6e <_usart_interrupt_handler+0x176>
    5a88:	200015d0 	.word	0x200015d0

00005a8c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5a8c:	b510      	push	{r4, lr}
	switch (clock_source) {
    5a8e:	2808      	cmp	r0, #8
    5a90:	d803      	bhi.n	5a9a <system_clock_source_get_hz+0xe>
    5a92:	0080      	lsls	r0, r0, #2
    5a94:	4b1c      	ldr	r3, [pc, #112]	; (5b08 <system_clock_source_get_hz+0x7c>)
    5a96:	581b      	ldr	r3, [r3, r0]
    5a98:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    5a9a:	2000      	movs	r0, #0
    5a9c:	e032      	b.n	5b04 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    5a9e:	4b1b      	ldr	r3, [pc, #108]	; (5b0c <system_clock_source_get_hz+0x80>)
    5aa0:	6918      	ldr	r0, [r3, #16]
    5aa2:	e02f      	b.n	5b04 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5aa4:	4b1a      	ldr	r3, [pc, #104]	; (5b10 <system_clock_source_get_hz+0x84>)
    5aa6:	6a1b      	ldr	r3, [r3, #32]
    5aa8:	059b      	lsls	r3, r3, #22
    5aaa:	0f9b      	lsrs	r3, r3, #30
    5aac:	4819      	ldr	r0, [pc, #100]	; (5b14 <system_clock_source_get_hz+0x88>)
    5aae:	40d8      	lsrs	r0, r3
    5ab0:	e028      	b.n	5b04 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    5ab2:	4b16      	ldr	r3, [pc, #88]	; (5b0c <system_clock_source_get_hz+0x80>)
    5ab4:	6958      	ldr	r0, [r3, #20]
    5ab6:	e025      	b.n	5b04 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5ab8:	4b14      	ldr	r3, [pc, #80]	; (5b0c <system_clock_source_get_hz+0x80>)
    5aba:	681b      	ldr	r3, [r3, #0]
			return 0;
    5abc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5abe:	079b      	lsls	r3, r3, #30
    5ac0:	d520      	bpl.n	5b04 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5ac2:	4913      	ldr	r1, [pc, #76]	; (5b10 <system_clock_source_get_hz+0x84>)
    5ac4:	2210      	movs	r2, #16
    5ac6:	68cb      	ldr	r3, [r1, #12]
    5ac8:	421a      	tst	r2, r3
    5aca:	d0fc      	beq.n	5ac6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    5acc:	4b0f      	ldr	r3, [pc, #60]	; (5b0c <system_clock_source_get_hz+0x80>)
    5ace:	681a      	ldr	r2, [r3, #0]
    5ad0:	2324      	movs	r3, #36	; 0x24
    5ad2:	4013      	ands	r3, r2
    5ad4:	2b04      	cmp	r3, #4
    5ad6:	d001      	beq.n	5adc <system_clock_source_get_hz+0x50>
			return 48000000UL;
    5ad8:	480f      	ldr	r0, [pc, #60]	; (5b18 <system_clock_source_get_hz+0x8c>)
    5ada:	e013      	b.n	5b04 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5adc:	2000      	movs	r0, #0
    5ade:	4b0f      	ldr	r3, [pc, #60]	; (5b1c <system_clock_source_get_hz+0x90>)
    5ae0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    5ae2:	4b0a      	ldr	r3, [pc, #40]	; (5b0c <system_clock_source_get_hz+0x80>)
    5ae4:	689b      	ldr	r3, [r3, #8]
    5ae6:	041b      	lsls	r3, r3, #16
    5ae8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5aea:	4358      	muls	r0, r3
    5aec:	e00a      	b.n	5b04 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5aee:	2350      	movs	r3, #80	; 0x50
    5af0:	4a07      	ldr	r2, [pc, #28]	; (5b10 <system_clock_source_get_hz+0x84>)
    5af2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    5af4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5af6:	075b      	lsls	r3, r3, #29
    5af8:	d504      	bpl.n	5b04 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    5afa:	4b04      	ldr	r3, [pc, #16]	; (5b0c <system_clock_source_get_hz+0x80>)
    5afc:	68d8      	ldr	r0, [r3, #12]
    5afe:	e001      	b.n	5b04 <system_clock_source_get_hz+0x78>
		return 32768UL;
    5b00:	2080      	movs	r0, #128	; 0x80
    5b02:	0200      	lsls	r0, r0, #8
	}
}
    5b04:	bd10      	pop	{r4, pc}
    5b06:	46c0      	nop			; (mov r8, r8)
    5b08:	0000982c 	.word	0x0000982c
    5b0c:	200002e0 	.word	0x200002e0
    5b10:	40000800 	.word	0x40000800
    5b14:	007a1200 	.word	0x007a1200
    5b18:	02dc6c00 	.word	0x02dc6c00
    5b1c:	000060f1 	.word	0x000060f1

00005b20 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5b20:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5b22:	490c      	ldr	r1, [pc, #48]	; (5b54 <system_clock_source_osc8m_set_config+0x34>)
    5b24:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5b26:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5b28:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    5b2a:	7840      	ldrb	r0, [r0, #1]
    5b2c:	2201      	movs	r2, #1
    5b2e:	4010      	ands	r0, r2
    5b30:	0180      	lsls	r0, r0, #6
    5b32:	2640      	movs	r6, #64	; 0x40
    5b34:	43b3      	bics	r3, r6
    5b36:	4303      	orrs	r3, r0
    5b38:	402a      	ands	r2, r5
    5b3a:	01d2      	lsls	r2, r2, #7
    5b3c:	2080      	movs	r0, #128	; 0x80
    5b3e:	4383      	bics	r3, r0
    5b40:	4313      	orrs	r3, r2
    5b42:	2203      	movs	r2, #3
    5b44:	4022      	ands	r2, r4
    5b46:	0212      	lsls	r2, r2, #8
    5b48:	4803      	ldr	r0, [pc, #12]	; (5b58 <system_clock_source_osc8m_set_config+0x38>)
    5b4a:	4003      	ands	r3, r0
    5b4c:	4313      	orrs	r3, r2
    5b4e:	620b      	str	r3, [r1, #32]
}
    5b50:	bd70      	pop	{r4, r5, r6, pc}
    5b52:	46c0      	nop			; (mov r8, r8)
    5b54:	40000800 	.word	0x40000800
    5b58:	fffffcff 	.word	0xfffffcff

00005b5c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b5e:	46de      	mov	lr, fp
    5b60:	4657      	mov	r7, sl
    5b62:	464e      	mov	r6, r9
    5b64:	4645      	mov	r5, r8
    5b66:	b5e0      	push	{r5, r6, r7, lr}
    5b68:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5b6a:	4b26      	ldr	r3, [pc, #152]	; (5c04 <system_clock_source_xosc32k_set_config+0xa8>)
    5b6c:	469b      	mov	fp, r3
    5b6e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    5b70:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5b72:	7800      	ldrb	r0, [r0, #0]
    5b74:	4242      	negs	r2, r0
    5b76:	4142      	adcs	r2, r0
    5b78:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5b7a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    5b7c:	78ca      	ldrb	r2, [r1, #3]
    5b7e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    5b80:	790a      	ldrb	r2, [r1, #4]
    5b82:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    5b84:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5b86:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    5b88:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5b8a:	688a      	ldr	r2, [r1, #8]
    5b8c:	491e      	ldr	r1, [pc, #120]	; (5c08 <system_clock_source_xosc32k_set_config+0xac>)
    5b8e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    5b90:	2101      	movs	r1, #1
    5b92:	464a      	mov	r2, r9
    5b94:	0092      	lsls	r2, r2, #2
    5b96:	4691      	mov	r9, r2
    5b98:	2204      	movs	r2, #4
    5b9a:	4393      	bics	r3, r2
    5b9c:	464a      	mov	r2, r9
    5b9e:	4313      	orrs	r3, r2
    5ba0:	4642      	mov	r2, r8
    5ba2:	400a      	ands	r2, r1
    5ba4:	00d2      	lsls	r2, r2, #3
    5ba6:	4690      	mov	r8, r2
    5ba8:	2208      	movs	r2, #8
    5baa:	4393      	bics	r3, r2
    5bac:	4642      	mov	r2, r8
    5bae:	4313      	orrs	r3, r2
    5bb0:	4662      	mov	r2, ip
    5bb2:	400a      	ands	r2, r1
    5bb4:	0112      	lsls	r2, r2, #4
    5bb6:	4694      	mov	ip, r2
    5bb8:	2210      	movs	r2, #16
    5bba:	4393      	bics	r3, r2
    5bbc:	4662      	mov	r2, ip
    5bbe:	4313      	orrs	r3, r2
    5bc0:	4008      	ands	r0, r1
    5bc2:	0140      	lsls	r0, r0, #5
    5bc4:	2220      	movs	r2, #32
    5bc6:	4393      	bics	r3, r2
    5bc8:	4303      	orrs	r3, r0
    5bca:	400f      	ands	r7, r1
    5bcc:	01bf      	lsls	r7, r7, #6
    5bce:	2040      	movs	r0, #64	; 0x40
    5bd0:	4383      	bics	r3, r0
    5bd2:	433b      	orrs	r3, r7
    5bd4:	400e      	ands	r6, r1
    5bd6:	01f6      	lsls	r6, r6, #7
    5bd8:	3040      	adds	r0, #64	; 0x40
    5bda:	4383      	bics	r3, r0
    5bdc:	4333      	orrs	r3, r6
    5bde:	3879      	subs	r0, #121	; 0x79
    5be0:	4005      	ands	r5, r0
    5be2:	022d      	lsls	r5, r5, #8
    5be4:	4809      	ldr	r0, [pc, #36]	; (5c0c <system_clock_source_xosc32k_set_config+0xb0>)
    5be6:	4003      	ands	r3, r0
    5be8:	432b      	orrs	r3, r5
    5bea:	4021      	ands	r1, r4
    5bec:	0309      	lsls	r1, r1, #12
    5bee:	4808      	ldr	r0, [pc, #32]	; (5c10 <system_clock_source_xosc32k_set_config+0xb4>)
    5bf0:	4003      	ands	r3, r0
    5bf2:	430b      	orrs	r3, r1
    5bf4:	465a      	mov	r2, fp
    5bf6:	8293      	strh	r3, [r2, #20]
}
    5bf8:	bc3c      	pop	{r2, r3, r4, r5}
    5bfa:	4690      	mov	r8, r2
    5bfc:	4699      	mov	r9, r3
    5bfe:	46a2      	mov	sl, r4
    5c00:	46ab      	mov	fp, r5
    5c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c04:	40000800 	.word	0x40000800
    5c08:	200002e0 	.word	0x200002e0
    5c0c:	fffff8ff 	.word	0xfffff8ff
    5c10:	ffffefff 	.word	0xffffefff

00005c14 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5c14:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5c16:	7a03      	ldrb	r3, [r0, #8]
    5c18:	069b      	lsls	r3, r3, #26
    5c1a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5c1c:	8942      	ldrh	r2, [r0, #10]
    5c1e:	0592      	lsls	r2, r2, #22
    5c20:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5c22:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    5c24:	4918      	ldr	r1, [pc, #96]	; (5c88 <system_clock_source_dfll_set_config+0x74>)
    5c26:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5c28:	7983      	ldrb	r3, [r0, #6]
    5c2a:	79c2      	ldrb	r2, [r0, #7]
    5c2c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5c2e:	8842      	ldrh	r2, [r0, #2]
    5c30:	8884      	ldrh	r4, [r0, #4]
    5c32:	4322      	orrs	r2, r4
    5c34:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5c36:	7842      	ldrb	r2, [r0, #1]
    5c38:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    5c3a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    5c3c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5c3e:	7803      	ldrb	r3, [r0, #0]
    5c40:	2b04      	cmp	r3, #4
    5c42:	d011      	beq.n	5c68 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5c44:	2b20      	cmp	r3, #32
    5c46:	d10e      	bne.n	5c66 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5c48:	7b03      	ldrb	r3, [r0, #12]
    5c4a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5c4c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5c4e:	4313      	orrs	r3, r2
    5c50:	89c2      	ldrh	r2, [r0, #14]
    5c52:	0412      	lsls	r2, r2, #16
    5c54:	490d      	ldr	r1, [pc, #52]	; (5c8c <system_clock_source_dfll_set_config+0x78>)
    5c56:	400a      	ands	r2, r1
    5c58:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5c5a:	4a0b      	ldr	r2, [pc, #44]	; (5c88 <system_clock_source_dfll_set_config+0x74>)
    5c5c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5c5e:	6811      	ldr	r1, [r2, #0]
    5c60:	4b0b      	ldr	r3, [pc, #44]	; (5c90 <system_clock_source_dfll_set_config+0x7c>)
    5c62:	430b      	orrs	r3, r1
    5c64:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5c66:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5c68:	7b03      	ldrb	r3, [r0, #12]
    5c6a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5c6c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5c6e:	4313      	orrs	r3, r2
    5c70:	89c2      	ldrh	r2, [r0, #14]
    5c72:	0412      	lsls	r2, r2, #16
    5c74:	4905      	ldr	r1, [pc, #20]	; (5c8c <system_clock_source_dfll_set_config+0x78>)
    5c76:	400a      	ands	r2, r1
    5c78:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5c7a:	4a03      	ldr	r2, [pc, #12]	; (5c88 <system_clock_source_dfll_set_config+0x74>)
    5c7c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    5c7e:	6813      	ldr	r3, [r2, #0]
    5c80:	2104      	movs	r1, #4
    5c82:	430b      	orrs	r3, r1
    5c84:	6013      	str	r3, [r2, #0]
    5c86:	e7ee      	b.n	5c66 <system_clock_source_dfll_set_config+0x52>
    5c88:	200002e0 	.word	0x200002e0
    5c8c:	03ff0000 	.word	0x03ff0000
    5c90:	00000424 	.word	0x00000424

00005c94 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5c94:	2808      	cmp	r0, #8
    5c96:	d803      	bhi.n	5ca0 <system_clock_source_enable+0xc>
    5c98:	0080      	lsls	r0, r0, #2
    5c9a:	4b25      	ldr	r3, [pc, #148]	; (5d30 <system_clock_source_enable+0x9c>)
    5c9c:	581b      	ldr	r3, [r3, r0]
    5c9e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5ca0:	2017      	movs	r0, #23
    5ca2:	e044      	b.n	5d2e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5ca4:	4a23      	ldr	r2, [pc, #140]	; (5d34 <system_clock_source_enable+0xa0>)
    5ca6:	6a13      	ldr	r3, [r2, #32]
    5ca8:	2102      	movs	r1, #2
    5caa:	430b      	orrs	r3, r1
    5cac:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    5cae:	2000      	movs	r0, #0
    5cb0:	e03d      	b.n	5d2e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5cb2:	4a20      	ldr	r2, [pc, #128]	; (5d34 <system_clock_source_enable+0xa0>)
    5cb4:	6993      	ldr	r3, [r2, #24]
    5cb6:	2102      	movs	r1, #2
    5cb8:	430b      	orrs	r3, r1
    5cba:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    5cbc:	2000      	movs	r0, #0
		break;
    5cbe:	e036      	b.n	5d2e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5cc0:	4a1c      	ldr	r2, [pc, #112]	; (5d34 <system_clock_source_enable+0xa0>)
    5cc2:	8a13      	ldrh	r3, [r2, #16]
    5cc4:	2102      	movs	r1, #2
    5cc6:	430b      	orrs	r3, r1
    5cc8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    5cca:	2000      	movs	r0, #0
		break;
    5ccc:	e02f      	b.n	5d2e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5cce:	4a19      	ldr	r2, [pc, #100]	; (5d34 <system_clock_source_enable+0xa0>)
    5cd0:	8a93      	ldrh	r3, [r2, #20]
    5cd2:	2102      	movs	r1, #2
    5cd4:	430b      	orrs	r3, r1
    5cd6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    5cd8:	2000      	movs	r0, #0
		break;
    5cda:	e028      	b.n	5d2e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5cdc:	4916      	ldr	r1, [pc, #88]	; (5d38 <system_clock_source_enable+0xa4>)
    5cde:	680b      	ldr	r3, [r1, #0]
    5ce0:	2202      	movs	r2, #2
    5ce2:	4313      	orrs	r3, r2
    5ce4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5ce6:	4b13      	ldr	r3, [pc, #76]	; (5d34 <system_clock_source_enable+0xa0>)
    5ce8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5cea:	0019      	movs	r1, r3
    5cec:	320e      	adds	r2, #14
    5cee:	68cb      	ldr	r3, [r1, #12]
    5cf0:	421a      	tst	r2, r3
    5cf2:	d0fc      	beq.n	5cee <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5cf4:	4a10      	ldr	r2, [pc, #64]	; (5d38 <system_clock_source_enable+0xa4>)
    5cf6:	6891      	ldr	r1, [r2, #8]
    5cf8:	4b0e      	ldr	r3, [pc, #56]	; (5d34 <system_clock_source_enable+0xa0>)
    5cfa:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5cfc:	6852      	ldr	r2, [r2, #4]
    5cfe:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    5d00:	2200      	movs	r2, #0
    5d02:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5d04:	0019      	movs	r1, r3
    5d06:	3210      	adds	r2, #16
    5d08:	68cb      	ldr	r3, [r1, #12]
    5d0a:	421a      	tst	r2, r3
    5d0c:	d0fc      	beq.n	5d08 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5d0e:	4b0a      	ldr	r3, [pc, #40]	; (5d38 <system_clock_source_enable+0xa4>)
    5d10:	681b      	ldr	r3, [r3, #0]
    5d12:	b29b      	uxth	r3, r3
    5d14:	4a07      	ldr	r2, [pc, #28]	; (5d34 <system_clock_source_enable+0xa0>)
    5d16:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    5d18:	2000      	movs	r0, #0
    5d1a:	e008      	b.n	5d2e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5d1c:	4905      	ldr	r1, [pc, #20]	; (5d34 <system_clock_source_enable+0xa0>)
    5d1e:	2244      	movs	r2, #68	; 0x44
    5d20:	5c8b      	ldrb	r3, [r1, r2]
    5d22:	2002      	movs	r0, #2
    5d24:	4303      	orrs	r3, r0
    5d26:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    5d28:	2000      	movs	r0, #0
		break;
    5d2a:	e000      	b.n	5d2e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    5d2c:	2000      	movs	r0, #0
}
    5d2e:	4770      	bx	lr
    5d30:	00009850 	.word	0x00009850
    5d34:	40000800 	.word	0x40000800
    5d38:	200002e0 	.word	0x200002e0

00005d3c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d3e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5d40:	22c2      	movs	r2, #194	; 0xc2
    5d42:	00d2      	lsls	r2, r2, #3
    5d44:	4b47      	ldr	r3, [pc, #284]	; (5e64 <system_clock_init+0x128>)
    5d46:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5d48:	4a47      	ldr	r2, [pc, #284]	; (5e68 <system_clock_init+0x12c>)
    5d4a:	6853      	ldr	r3, [r2, #4]
    5d4c:	211e      	movs	r1, #30
    5d4e:	438b      	bics	r3, r1
    5d50:	391a      	subs	r1, #26
    5d52:	430b      	orrs	r3, r1
    5d54:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5d56:	2202      	movs	r2, #2
    5d58:	ab01      	add	r3, sp, #4
    5d5a:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5d5c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5d5e:	4d43      	ldr	r5, [pc, #268]	; (5e6c <system_clock_init+0x130>)
    5d60:	b2e0      	uxtb	r0, r4
    5d62:	a901      	add	r1, sp, #4
    5d64:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5d66:	3401      	adds	r4, #1
    5d68:	2c25      	cmp	r4, #37	; 0x25
    5d6a:	d1f9      	bne.n	5d60 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5d6c:	a80a      	add	r0, sp, #40	; 0x28
    5d6e:	2300      	movs	r3, #0
    5d70:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    5d72:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    5d74:	2280      	movs	r2, #128	; 0x80
    5d76:	0212      	lsls	r2, r2, #8
    5d78:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    5d7a:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    5d7c:	2201      	movs	r2, #1
    5d7e:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    5d80:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    5d82:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5d84:	3202      	adds	r2, #2
    5d86:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    5d88:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5d8a:	4b39      	ldr	r3, [pc, #228]	; (5e70 <system_clock_init+0x134>)
    5d8c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5d8e:	2005      	movs	r0, #5
    5d90:	4b38      	ldr	r3, [pc, #224]	; (5e74 <system_clock_init+0x138>)
    5d92:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5d94:	4933      	ldr	r1, [pc, #204]	; (5e64 <system_clock_init+0x128>)
    5d96:	2202      	movs	r2, #2
    5d98:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5d9a:	421a      	tst	r2, r3
    5d9c:	d0fc      	beq.n	5d98 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    5d9e:	4a31      	ldr	r2, [pc, #196]	; (5e64 <system_clock_init+0x128>)
    5da0:	8a93      	ldrh	r3, [r2, #20]
    5da2:	2180      	movs	r1, #128	; 0x80
    5da4:	430b      	orrs	r3, r1
    5da6:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5da8:	ab05      	add	r3, sp, #20
    5daa:	2100      	movs	r1, #0
    5dac:	2200      	movs	r2, #0
    5dae:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5db0:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5db2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5db4:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5db6:	313f      	adds	r1, #63	; 0x3f
    5db8:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5dba:	393b      	subs	r1, #59	; 0x3b
    5dbc:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    5dbe:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5dc0:	4b2d      	ldr	r3, [pc, #180]	; (5e78 <system_clock_init+0x13c>)
    5dc2:	681b      	ldr	r3, [r3, #0]
    5dc4:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    5dc6:	2b3f      	cmp	r3, #63	; 0x3f
    5dc8:	d04a      	beq.n	5e60 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    5dca:	a805      	add	r0, sp, #20
    5dcc:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5dce:	4b2b      	ldr	r3, [pc, #172]	; (5e7c <system_clock_init+0x140>)
    5dd0:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5dd2:	2307      	movs	r3, #7
    5dd4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5dd6:	3338      	adds	r3, #56	; 0x38
    5dd8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5dda:	4b29      	ldr	r3, [pc, #164]	; (5e80 <system_clock_init+0x144>)
    5ddc:	4798      	blx	r3
	config->run_in_standby  = false;
    5dde:	a804      	add	r0, sp, #16
    5de0:	2500      	movs	r5, #0
    5de2:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    5de4:	2601      	movs	r6, #1
    5de6:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5de8:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5dea:	4b26      	ldr	r3, [pc, #152]	; (5e84 <system_clock_init+0x148>)
    5dec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5dee:	2006      	movs	r0, #6
    5df0:	4f20      	ldr	r7, [pc, #128]	; (5e74 <system_clock_init+0x138>)
    5df2:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5df4:	4b24      	ldr	r3, [pc, #144]	; (5e88 <system_clock_init+0x14c>)
    5df6:	4798      	blx	r3
	config->division_factor    = 1;
    5df8:	ac01      	add	r4, sp, #4
    5dfa:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    5dfc:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    5dfe:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5e00:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5e02:	2305      	movs	r3, #5
    5e04:	7023      	strb	r3, [r4, #0]
    5e06:	0021      	movs	r1, r4
    5e08:	2001      	movs	r0, #1
    5e0a:	4b20      	ldr	r3, [pc, #128]	; (5e8c <system_clock_init+0x150>)
    5e0c:	4798      	blx	r3
    5e0e:	2001      	movs	r0, #1
    5e10:	4b1f      	ldr	r3, [pc, #124]	; (5e90 <system_clock_init+0x154>)
    5e12:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5e14:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    5e16:	0021      	movs	r1, r4
    5e18:	2000      	movs	r0, #0
    5e1a:	4b14      	ldr	r3, [pc, #80]	; (5e6c <system_clock_init+0x130>)
    5e1c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    5e1e:	2000      	movs	r0, #0
    5e20:	4b1c      	ldr	r3, [pc, #112]	; (5e94 <system_clock_init+0x158>)
    5e22:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5e24:	2007      	movs	r0, #7
    5e26:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5e28:	490e      	ldr	r1, [pc, #56]	; (5e64 <system_clock_init+0x128>)
    5e2a:	22d0      	movs	r2, #208	; 0xd0
    5e2c:	68cb      	ldr	r3, [r1, #12]
    5e2e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5e30:	2bd0      	cmp	r3, #208	; 0xd0
    5e32:	d1fb      	bne.n	5e2c <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    5e34:	4a18      	ldr	r2, [pc, #96]	; (5e98 <system_clock_init+0x15c>)
    5e36:	2300      	movs	r3, #0
    5e38:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    5e3a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    5e3c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    5e3e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    5e40:	a901      	add	r1, sp, #4
    5e42:	2201      	movs	r2, #1
    5e44:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    5e46:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    5e48:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    5e4a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5e4c:	3307      	adds	r3, #7
    5e4e:	700b      	strb	r3, [r1, #0]
    5e50:	2000      	movs	r0, #0
    5e52:	4b0e      	ldr	r3, [pc, #56]	; (5e8c <system_clock_init+0x150>)
    5e54:	4798      	blx	r3
    5e56:	2000      	movs	r0, #0
    5e58:	4b0d      	ldr	r3, [pc, #52]	; (5e90 <system_clock_init+0x154>)
    5e5a:	4798      	blx	r3
#endif
}
    5e5c:	b00f      	add	sp, #60	; 0x3c
    5e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    5e60:	3b20      	subs	r3, #32
    5e62:	e7b2      	b.n	5dca <system_clock_init+0x8e>
    5e64:	40000800 	.word	0x40000800
    5e68:	41004000 	.word	0x41004000
    5e6c:	000060d5 	.word	0x000060d5
    5e70:	00005b5d 	.word	0x00005b5d
    5e74:	00005c95 	.word	0x00005c95
    5e78:	00806024 	.word	0x00806024
    5e7c:	000005b9 	.word	0x000005b9
    5e80:	00005c15 	.word	0x00005c15
    5e84:	00005b21 	.word	0x00005b21
    5e88:	00005e9d 	.word	0x00005e9d
    5e8c:	00005ec1 	.word	0x00005ec1
    5e90:	00005f79 	.word	0x00005f79
    5e94:	00006049 	.word	0x00006049
    5e98:	40000400 	.word	0x40000400

00005e9c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    5e9c:	4a06      	ldr	r2, [pc, #24]	; (5eb8 <system_gclk_init+0x1c>)
    5e9e:	6993      	ldr	r3, [r2, #24]
    5ea0:	2108      	movs	r1, #8
    5ea2:	430b      	orrs	r3, r1
    5ea4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5ea6:	2201      	movs	r2, #1
    5ea8:	4b04      	ldr	r3, [pc, #16]	; (5ebc <system_gclk_init+0x20>)
    5eaa:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5eac:	0019      	movs	r1, r3
    5eae:	780b      	ldrb	r3, [r1, #0]
    5eb0:	4213      	tst	r3, r2
    5eb2:	d1fc      	bne.n	5eae <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5eb4:	4770      	bx	lr
    5eb6:	46c0      	nop			; (mov r8, r8)
    5eb8:	40000400 	.word	0x40000400
    5ebc:	40000c00 	.word	0x40000c00

00005ec0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5ec0:	b570      	push	{r4, r5, r6, lr}
    5ec2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5ec4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5ec6:	780d      	ldrb	r5, [r1, #0]
    5ec8:	022d      	lsls	r5, r5, #8
    5eca:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5ecc:	784b      	ldrb	r3, [r1, #1]
    5ece:	2b00      	cmp	r3, #0
    5ed0:	d002      	beq.n	5ed8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5ed2:	2380      	movs	r3, #128	; 0x80
    5ed4:	02db      	lsls	r3, r3, #11
    5ed6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5ed8:	7a4b      	ldrb	r3, [r1, #9]
    5eda:	2b00      	cmp	r3, #0
    5edc:	d002      	beq.n	5ee4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5ede:	2380      	movs	r3, #128	; 0x80
    5ee0:	031b      	lsls	r3, r3, #12
    5ee2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5ee4:	6848      	ldr	r0, [r1, #4]
    5ee6:	2801      	cmp	r0, #1
    5ee8:	d910      	bls.n	5f0c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5eea:	1e43      	subs	r3, r0, #1
    5eec:	4218      	tst	r0, r3
    5eee:	d134      	bne.n	5f5a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5ef0:	2802      	cmp	r0, #2
    5ef2:	d930      	bls.n	5f56 <system_gclk_gen_set_config+0x96>
    5ef4:	2302      	movs	r3, #2
    5ef6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5ef8:	3201      	adds	r2, #1
						mask <<= 1) {
    5efa:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5efc:	4298      	cmp	r0, r3
    5efe:	d8fb      	bhi.n	5ef8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5f00:	0212      	lsls	r2, r2, #8
    5f02:	4332      	orrs	r2, r6
    5f04:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5f06:	2380      	movs	r3, #128	; 0x80
    5f08:	035b      	lsls	r3, r3, #13
    5f0a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5f0c:	7a0b      	ldrb	r3, [r1, #8]
    5f0e:	2b00      	cmp	r3, #0
    5f10:	d002      	beq.n	5f18 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5f12:	2380      	movs	r3, #128	; 0x80
    5f14:	039b      	lsls	r3, r3, #14
    5f16:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5f18:	4a13      	ldr	r2, [pc, #76]	; (5f68 <system_gclk_gen_set_config+0xa8>)
    5f1a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    5f1c:	b25b      	sxtb	r3, r3
    5f1e:	2b00      	cmp	r3, #0
    5f20:	dbfb      	blt.n	5f1a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    5f22:	4b12      	ldr	r3, [pc, #72]	; (5f6c <system_gclk_gen_set_config+0xac>)
    5f24:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5f26:	4b12      	ldr	r3, [pc, #72]	; (5f70 <system_gclk_gen_set_config+0xb0>)
    5f28:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5f2a:	4a0f      	ldr	r2, [pc, #60]	; (5f68 <system_gclk_gen_set_config+0xa8>)
    5f2c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5f2e:	b25b      	sxtb	r3, r3
    5f30:	2b00      	cmp	r3, #0
    5f32:	dbfb      	blt.n	5f2c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5f34:	4b0c      	ldr	r3, [pc, #48]	; (5f68 <system_gclk_gen_set_config+0xa8>)
    5f36:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5f38:	001a      	movs	r2, r3
    5f3a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5f3c:	b25b      	sxtb	r3, r3
    5f3e:	2b00      	cmp	r3, #0
    5f40:	dbfb      	blt.n	5f3a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5f42:	4a09      	ldr	r2, [pc, #36]	; (5f68 <system_gclk_gen_set_config+0xa8>)
    5f44:	6853      	ldr	r3, [r2, #4]
    5f46:	2180      	movs	r1, #128	; 0x80
    5f48:	0249      	lsls	r1, r1, #9
    5f4a:	400b      	ands	r3, r1
    5f4c:	431d      	orrs	r5, r3
    5f4e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    5f50:	4b08      	ldr	r3, [pc, #32]	; (5f74 <system_gclk_gen_set_config+0xb4>)
    5f52:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5f54:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5f56:	2200      	movs	r2, #0
    5f58:	e7d2      	b.n	5f00 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5f5a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5f5c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5f5e:	2380      	movs	r3, #128	; 0x80
    5f60:	029b      	lsls	r3, r3, #10
    5f62:	431d      	orrs	r5, r3
    5f64:	e7d2      	b.n	5f0c <system_gclk_gen_set_config+0x4c>
    5f66:	46c0      	nop			; (mov r8, r8)
    5f68:	40000c00 	.word	0x40000c00
    5f6c:	00004785 	.word	0x00004785
    5f70:	40000c08 	.word	0x40000c08
    5f74:	000047c5 	.word	0x000047c5

00005f78 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5f78:	b510      	push	{r4, lr}
    5f7a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5f7c:	4a0b      	ldr	r2, [pc, #44]	; (5fac <system_gclk_gen_enable+0x34>)
    5f7e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5f80:	b25b      	sxtb	r3, r3
    5f82:	2b00      	cmp	r3, #0
    5f84:	dbfb      	blt.n	5f7e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    5f86:	4b0a      	ldr	r3, [pc, #40]	; (5fb0 <system_gclk_gen_enable+0x38>)
    5f88:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5f8a:	4b0a      	ldr	r3, [pc, #40]	; (5fb4 <system_gclk_gen_enable+0x3c>)
    5f8c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5f8e:	4a07      	ldr	r2, [pc, #28]	; (5fac <system_gclk_gen_enable+0x34>)
    5f90:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5f92:	b25b      	sxtb	r3, r3
    5f94:	2b00      	cmp	r3, #0
    5f96:	dbfb      	blt.n	5f90 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5f98:	4a04      	ldr	r2, [pc, #16]	; (5fac <system_gclk_gen_enable+0x34>)
    5f9a:	6851      	ldr	r1, [r2, #4]
    5f9c:	2380      	movs	r3, #128	; 0x80
    5f9e:	025b      	lsls	r3, r3, #9
    5fa0:	430b      	orrs	r3, r1
    5fa2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    5fa4:	4b04      	ldr	r3, [pc, #16]	; (5fb8 <system_gclk_gen_enable+0x40>)
    5fa6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5fa8:	bd10      	pop	{r4, pc}
    5faa:	46c0      	nop			; (mov r8, r8)
    5fac:	40000c00 	.word	0x40000c00
    5fb0:	00004785 	.word	0x00004785
    5fb4:	40000c04 	.word	0x40000c04
    5fb8:	000047c5 	.word	0x000047c5

00005fbc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5fbc:	b570      	push	{r4, r5, r6, lr}
    5fbe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5fc0:	4a1a      	ldr	r2, [pc, #104]	; (602c <system_gclk_gen_get_hz+0x70>)
    5fc2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5fc4:	b25b      	sxtb	r3, r3
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	dbfb      	blt.n	5fc2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    5fca:	4b19      	ldr	r3, [pc, #100]	; (6030 <system_gclk_gen_get_hz+0x74>)
    5fcc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5fce:	4b19      	ldr	r3, [pc, #100]	; (6034 <system_gclk_gen_get_hz+0x78>)
    5fd0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5fd2:	4a16      	ldr	r2, [pc, #88]	; (602c <system_gclk_gen_get_hz+0x70>)
    5fd4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5fd6:	b25b      	sxtb	r3, r3
    5fd8:	2b00      	cmp	r3, #0
    5fda:	dbfb      	blt.n	5fd4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5fdc:	4e13      	ldr	r6, [pc, #76]	; (602c <system_gclk_gen_get_hz+0x70>)
    5fde:	6870      	ldr	r0, [r6, #4]
    5fe0:	04c0      	lsls	r0, r0, #19
    5fe2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5fe4:	4b14      	ldr	r3, [pc, #80]	; (6038 <system_gclk_gen_get_hz+0x7c>)
    5fe6:	4798      	blx	r3
    5fe8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5fea:	4b12      	ldr	r3, [pc, #72]	; (6034 <system_gclk_gen_get_hz+0x78>)
    5fec:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5fee:	6876      	ldr	r6, [r6, #4]
    5ff0:	02f6      	lsls	r6, r6, #11
    5ff2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5ff4:	4b11      	ldr	r3, [pc, #68]	; (603c <system_gclk_gen_get_hz+0x80>)
    5ff6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5ff8:	4a0c      	ldr	r2, [pc, #48]	; (602c <system_gclk_gen_get_hz+0x70>)
    5ffa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5ffc:	b25b      	sxtb	r3, r3
    5ffe:	2b00      	cmp	r3, #0
    6000:	dbfb      	blt.n	5ffa <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6002:	4b0a      	ldr	r3, [pc, #40]	; (602c <system_gclk_gen_get_hz+0x70>)
    6004:	689c      	ldr	r4, [r3, #8]
    6006:	0224      	lsls	r4, r4, #8
    6008:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    600a:	4b0d      	ldr	r3, [pc, #52]	; (6040 <system_gclk_gen_get_hz+0x84>)
    600c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    600e:	2e00      	cmp	r6, #0
    6010:	d107      	bne.n	6022 <system_gclk_gen_get_hz+0x66>
    6012:	2c01      	cmp	r4, #1
    6014:	d907      	bls.n	6026 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    6016:	0021      	movs	r1, r4
    6018:	0028      	movs	r0, r5
    601a:	4b0a      	ldr	r3, [pc, #40]	; (6044 <system_gclk_gen_get_hz+0x88>)
    601c:	4798      	blx	r3
    601e:	0005      	movs	r5, r0
    6020:	e001      	b.n	6026 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    6022:	3401      	adds	r4, #1
    6024:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    6026:	0028      	movs	r0, r5
    6028:	bd70      	pop	{r4, r5, r6, pc}
    602a:	46c0      	nop			; (mov r8, r8)
    602c:	40000c00 	.word	0x40000c00
    6030:	00004785 	.word	0x00004785
    6034:	40000c04 	.word	0x40000c04
    6038:	00005a8d 	.word	0x00005a8d
    603c:	40000c08 	.word	0x40000c08
    6040:	000047c5 	.word	0x000047c5
    6044:	000070b9 	.word	0x000070b9

00006048 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6048:	b510      	push	{r4, lr}
    604a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    604c:	4b06      	ldr	r3, [pc, #24]	; (6068 <system_gclk_chan_enable+0x20>)
    604e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6050:	4b06      	ldr	r3, [pc, #24]	; (606c <system_gclk_chan_enable+0x24>)
    6052:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6054:	4a06      	ldr	r2, [pc, #24]	; (6070 <system_gclk_chan_enable+0x28>)
    6056:	8853      	ldrh	r3, [r2, #2]
    6058:	2180      	movs	r1, #128	; 0x80
    605a:	01c9      	lsls	r1, r1, #7
    605c:	430b      	orrs	r3, r1
    605e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    6060:	4b04      	ldr	r3, [pc, #16]	; (6074 <system_gclk_chan_enable+0x2c>)
    6062:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6064:	bd10      	pop	{r4, pc}
    6066:	46c0      	nop			; (mov r8, r8)
    6068:	00004785 	.word	0x00004785
    606c:	40000c02 	.word	0x40000c02
    6070:	40000c00 	.word	0x40000c00
    6074:	000047c5 	.word	0x000047c5

00006078 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6078:	b510      	push	{r4, lr}
    607a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    607c:	4b0f      	ldr	r3, [pc, #60]	; (60bc <system_gclk_chan_disable+0x44>)
    607e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6080:	4b0f      	ldr	r3, [pc, #60]	; (60c0 <system_gclk_chan_disable+0x48>)
    6082:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6084:	4a0f      	ldr	r2, [pc, #60]	; (60c4 <system_gclk_chan_disable+0x4c>)
    6086:	8853      	ldrh	r3, [r2, #2]
    6088:	051b      	lsls	r3, r3, #20
    608a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    608c:	8853      	ldrh	r3, [r2, #2]
    608e:	490e      	ldr	r1, [pc, #56]	; (60c8 <system_gclk_chan_disable+0x50>)
    6090:	400b      	ands	r3, r1
    6092:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6094:	8853      	ldrh	r3, [r2, #2]
    6096:	490d      	ldr	r1, [pc, #52]	; (60cc <system_gclk_chan_disable+0x54>)
    6098:	400b      	ands	r3, r1
    609a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    609c:	0011      	movs	r1, r2
    609e:	2280      	movs	r2, #128	; 0x80
    60a0:	01d2      	lsls	r2, r2, #7
    60a2:	884b      	ldrh	r3, [r1, #2]
    60a4:	4213      	tst	r3, r2
    60a6:	d1fc      	bne.n	60a2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    60a8:	4906      	ldr	r1, [pc, #24]	; (60c4 <system_gclk_chan_disable+0x4c>)
    60aa:	884a      	ldrh	r2, [r1, #2]
    60ac:	0203      	lsls	r3, r0, #8
    60ae:	4806      	ldr	r0, [pc, #24]	; (60c8 <system_gclk_chan_disable+0x50>)
    60b0:	4002      	ands	r2, r0
    60b2:	4313      	orrs	r3, r2
    60b4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    60b6:	4b06      	ldr	r3, [pc, #24]	; (60d0 <system_gclk_chan_disable+0x58>)
    60b8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    60ba:	bd10      	pop	{r4, pc}
    60bc:	00004785 	.word	0x00004785
    60c0:	40000c02 	.word	0x40000c02
    60c4:	40000c00 	.word	0x40000c00
    60c8:	fffff0ff 	.word	0xfffff0ff
    60cc:	ffffbfff 	.word	0xffffbfff
    60d0:	000047c5 	.word	0x000047c5

000060d4 <system_gclk_chan_set_config>:
{
    60d4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    60d6:	780c      	ldrb	r4, [r1, #0]
    60d8:	0224      	lsls	r4, r4, #8
    60da:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    60dc:	4b02      	ldr	r3, [pc, #8]	; (60e8 <system_gclk_chan_set_config+0x14>)
    60de:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    60e0:	b2a4      	uxth	r4, r4
    60e2:	4b02      	ldr	r3, [pc, #8]	; (60ec <system_gclk_chan_set_config+0x18>)
    60e4:	805c      	strh	r4, [r3, #2]
}
    60e6:	bd10      	pop	{r4, pc}
    60e8:	00006079 	.word	0x00006079
    60ec:	40000c00 	.word	0x40000c00

000060f0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    60f0:	b510      	push	{r4, lr}
    60f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    60f4:	4b06      	ldr	r3, [pc, #24]	; (6110 <system_gclk_chan_get_hz+0x20>)
    60f6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    60f8:	4b06      	ldr	r3, [pc, #24]	; (6114 <system_gclk_chan_get_hz+0x24>)
    60fa:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    60fc:	4b06      	ldr	r3, [pc, #24]	; (6118 <system_gclk_chan_get_hz+0x28>)
    60fe:	885c      	ldrh	r4, [r3, #2]
    6100:	0524      	lsls	r4, r4, #20
    6102:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6104:	4b05      	ldr	r3, [pc, #20]	; (611c <system_gclk_chan_get_hz+0x2c>)
    6106:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6108:	0020      	movs	r0, r4
    610a:	4b05      	ldr	r3, [pc, #20]	; (6120 <system_gclk_chan_get_hz+0x30>)
    610c:	4798      	blx	r3
}
    610e:	bd10      	pop	{r4, pc}
    6110:	00004785 	.word	0x00004785
    6114:	40000c02 	.word	0x40000c02
    6118:	40000c00 	.word	0x40000c00
    611c:	000047c5 	.word	0x000047c5
    6120:	00005fbd 	.word	0x00005fbd

00006124 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6124:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6126:	78d3      	ldrb	r3, [r2, #3]
    6128:	2b00      	cmp	r3, #0
    612a:	d135      	bne.n	6198 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    612c:	7813      	ldrb	r3, [r2, #0]
    612e:	2b80      	cmp	r3, #128	; 0x80
    6130:	d029      	beq.n	6186 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6132:	061b      	lsls	r3, r3, #24
    6134:	2480      	movs	r4, #128	; 0x80
    6136:	0264      	lsls	r4, r4, #9
    6138:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    613a:	7854      	ldrb	r4, [r2, #1]
    613c:	2502      	movs	r5, #2
    613e:	43ac      	bics	r4, r5
    6140:	d106      	bne.n	6150 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6142:	7894      	ldrb	r4, [r2, #2]
    6144:	2c00      	cmp	r4, #0
    6146:	d120      	bne.n	618a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6148:	2480      	movs	r4, #128	; 0x80
    614a:	02a4      	lsls	r4, r4, #10
    614c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    614e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6150:	7854      	ldrb	r4, [r2, #1]
    6152:	3c01      	subs	r4, #1
    6154:	2c01      	cmp	r4, #1
    6156:	d91c      	bls.n	6192 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6158:	040d      	lsls	r5, r1, #16
    615a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    615c:	24a0      	movs	r4, #160	; 0xa0
    615e:	05e4      	lsls	r4, r4, #23
    6160:	432c      	orrs	r4, r5
    6162:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6164:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6166:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6168:	24d0      	movs	r4, #208	; 0xd0
    616a:	0624      	lsls	r4, r4, #24
    616c:	432c      	orrs	r4, r5
    616e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6170:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6172:	78d4      	ldrb	r4, [r2, #3]
    6174:	2c00      	cmp	r4, #0
    6176:	d122      	bne.n	61be <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6178:	035b      	lsls	r3, r3, #13
    617a:	d51c      	bpl.n	61b6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    617c:	7893      	ldrb	r3, [r2, #2]
    617e:	2b01      	cmp	r3, #1
    6180:	d01e      	beq.n	61c0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6182:	6141      	str	r1, [r0, #20]
    6184:	e017      	b.n	61b6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6186:	2300      	movs	r3, #0
    6188:	e7d7      	b.n	613a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    618a:	24c0      	movs	r4, #192	; 0xc0
    618c:	02e4      	lsls	r4, r4, #11
    618e:	4323      	orrs	r3, r4
    6190:	e7dd      	b.n	614e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6192:	4c0d      	ldr	r4, [pc, #52]	; (61c8 <_system_pinmux_config+0xa4>)
    6194:	4023      	ands	r3, r4
    6196:	e7df      	b.n	6158 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6198:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    619a:	040c      	lsls	r4, r1, #16
    619c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    619e:	23a0      	movs	r3, #160	; 0xa0
    61a0:	05db      	lsls	r3, r3, #23
    61a2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61a4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    61a6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    61a8:	23d0      	movs	r3, #208	; 0xd0
    61aa:	061b      	lsls	r3, r3, #24
    61ac:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61ae:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    61b0:	78d3      	ldrb	r3, [r2, #3]
    61b2:	2b00      	cmp	r3, #0
    61b4:	d103      	bne.n	61be <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    61b6:	7853      	ldrb	r3, [r2, #1]
    61b8:	3b01      	subs	r3, #1
    61ba:	2b01      	cmp	r3, #1
    61bc:	d902      	bls.n	61c4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    61be:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    61c0:	6181      	str	r1, [r0, #24]
    61c2:	e7f8      	b.n	61b6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    61c4:	6081      	str	r1, [r0, #8]
}
    61c6:	e7fa      	b.n	61be <_system_pinmux_config+0x9a>
    61c8:	fffbffff 	.word	0xfffbffff

000061cc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    61cc:	b510      	push	{r4, lr}
    61ce:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    61d0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    61d2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    61d4:	2900      	cmp	r1, #0
    61d6:	d104      	bne.n	61e2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    61d8:	0943      	lsrs	r3, r0, #5
    61da:	01db      	lsls	r3, r3, #7
    61dc:	4905      	ldr	r1, [pc, #20]	; (61f4 <system_pinmux_pin_set_config+0x28>)
    61de:	468c      	mov	ip, r1
    61e0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    61e2:	241f      	movs	r4, #31
    61e4:	4020      	ands	r0, r4
    61e6:	2101      	movs	r1, #1
    61e8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    61ea:	0018      	movs	r0, r3
    61ec:	4b02      	ldr	r3, [pc, #8]	; (61f8 <system_pinmux_pin_set_config+0x2c>)
    61ee:	4798      	blx	r3
}
    61f0:	bd10      	pop	{r4, pc}
    61f2:	46c0      	nop			; (mov r8, r8)
    61f4:	41004400 	.word	0x41004400
    61f8:	00006125 	.word	0x00006125

000061fc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    61fc:	4770      	bx	lr
	...

00006200 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6200:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6202:	4b05      	ldr	r3, [pc, #20]	; (6218 <system_init+0x18>)
    6204:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6206:	4b05      	ldr	r3, [pc, #20]	; (621c <system_init+0x1c>)
    6208:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    620a:	4b05      	ldr	r3, [pc, #20]	; (6220 <system_init+0x20>)
    620c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    620e:	4b05      	ldr	r3, [pc, #20]	; (6224 <system_init+0x24>)
    6210:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6212:	4b05      	ldr	r3, [pc, #20]	; (6228 <system_init+0x28>)
    6214:	4798      	blx	r3
}
    6216:	bd10      	pop	{r4, pc}
    6218:	00005d3d 	.word	0x00005d3d
    621c:	000047f5 	.word	0x000047f5
    6220:	000061fd 	.word	0x000061fd
    6224:	00004905 	.word	0x00004905
    6228:	000061fd 	.word	0x000061fd

0000622c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    622c:	e7fe      	b.n	622c <Dummy_Handler>
	...

00006230 <Reset_Handler>:
{
    6230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    6232:	4a2a      	ldr	r2, [pc, #168]	; (62dc <Reset_Handler+0xac>)
    6234:	4b2a      	ldr	r3, [pc, #168]	; (62e0 <Reset_Handler+0xb0>)
    6236:	429a      	cmp	r2, r3
    6238:	d011      	beq.n	625e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    623a:	001a      	movs	r2, r3
    623c:	4b29      	ldr	r3, [pc, #164]	; (62e4 <Reset_Handler+0xb4>)
    623e:	429a      	cmp	r2, r3
    6240:	d20d      	bcs.n	625e <Reset_Handler+0x2e>
    6242:	4a29      	ldr	r2, [pc, #164]	; (62e8 <Reset_Handler+0xb8>)
    6244:	3303      	adds	r3, #3
    6246:	1a9b      	subs	r3, r3, r2
    6248:	089b      	lsrs	r3, r3, #2
    624a:	3301      	adds	r3, #1
    624c:	009b      	lsls	r3, r3, #2
    624e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6250:	4823      	ldr	r0, [pc, #140]	; (62e0 <Reset_Handler+0xb0>)
    6252:	4922      	ldr	r1, [pc, #136]	; (62dc <Reset_Handler+0xac>)
    6254:	588c      	ldr	r4, [r1, r2]
    6256:	5084      	str	r4, [r0, r2]
    6258:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    625a:	429a      	cmp	r2, r3
    625c:	d1fa      	bne.n	6254 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    625e:	4a23      	ldr	r2, [pc, #140]	; (62ec <Reset_Handler+0xbc>)
    6260:	4b23      	ldr	r3, [pc, #140]	; (62f0 <Reset_Handler+0xc0>)
    6262:	429a      	cmp	r2, r3
    6264:	d20a      	bcs.n	627c <Reset_Handler+0x4c>
    6266:	43d3      	mvns	r3, r2
    6268:	4921      	ldr	r1, [pc, #132]	; (62f0 <Reset_Handler+0xc0>)
    626a:	185b      	adds	r3, r3, r1
    626c:	2103      	movs	r1, #3
    626e:	438b      	bics	r3, r1
    6270:	3304      	adds	r3, #4
    6272:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6274:	2100      	movs	r1, #0
    6276:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6278:	4293      	cmp	r3, r2
    627a:	d1fc      	bne.n	6276 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    627c:	4a1d      	ldr	r2, [pc, #116]	; (62f4 <Reset_Handler+0xc4>)
    627e:	21ff      	movs	r1, #255	; 0xff
    6280:	4b1d      	ldr	r3, [pc, #116]	; (62f8 <Reset_Handler+0xc8>)
    6282:	438b      	bics	r3, r1
    6284:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6286:	39fd      	subs	r1, #253	; 0xfd
    6288:	2390      	movs	r3, #144	; 0x90
    628a:	005b      	lsls	r3, r3, #1
    628c:	4a1b      	ldr	r2, [pc, #108]	; (62fc <Reset_Handler+0xcc>)
    628e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6290:	4a1b      	ldr	r2, [pc, #108]	; (6300 <Reset_Handler+0xd0>)
    6292:	78d3      	ldrb	r3, [r2, #3]
    6294:	2503      	movs	r5, #3
    6296:	43ab      	bics	r3, r5
    6298:	2402      	movs	r4, #2
    629a:	4323      	orrs	r3, r4
    629c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    629e:	78d3      	ldrb	r3, [r2, #3]
    62a0:	270c      	movs	r7, #12
    62a2:	43bb      	bics	r3, r7
    62a4:	2608      	movs	r6, #8
    62a6:	4333      	orrs	r3, r6
    62a8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    62aa:	4b16      	ldr	r3, [pc, #88]	; (6304 <Reset_Handler+0xd4>)
    62ac:	7b98      	ldrb	r0, [r3, #14]
    62ae:	2230      	movs	r2, #48	; 0x30
    62b0:	4390      	bics	r0, r2
    62b2:	2220      	movs	r2, #32
    62b4:	4310      	orrs	r0, r2
    62b6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    62b8:	7b99      	ldrb	r1, [r3, #14]
    62ba:	43b9      	bics	r1, r7
    62bc:	4331      	orrs	r1, r6
    62be:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    62c0:	7b9a      	ldrb	r2, [r3, #14]
    62c2:	43aa      	bics	r2, r5
    62c4:	4322      	orrs	r2, r4
    62c6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    62c8:	4a0f      	ldr	r2, [pc, #60]	; (6308 <Reset_Handler+0xd8>)
    62ca:	6853      	ldr	r3, [r2, #4]
    62cc:	2180      	movs	r1, #128	; 0x80
    62ce:	430b      	orrs	r3, r1
    62d0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    62d2:	4b0e      	ldr	r3, [pc, #56]	; (630c <Reset_Handler+0xdc>)
    62d4:	4798      	blx	r3
        main();
    62d6:	4b0e      	ldr	r3, [pc, #56]	; (6310 <Reset_Handler+0xe0>)
    62d8:	4798      	blx	r3
    62da:	e7fe      	b.n	62da <Reset_Handler+0xaa>
    62dc:	0000a000 	.word	0x0000a000
    62e0:	20000000 	.word	0x20000000
    62e4:	20000288 	.word	0x20000288
    62e8:	20000004 	.word	0x20000004
    62ec:	20000288 	.word	0x20000288
    62f0:	20001e38 	.word	0x20001e38
    62f4:	e000ed00 	.word	0xe000ed00
    62f8:	00000000 	.word	0x00000000
    62fc:	41007000 	.word	0x41007000
    6300:	41005000 	.word	0x41005000
    6304:	41004800 	.word	0x41004800
    6308:	41004000 	.word	0x41004000
    630c:	00007405 	.word	0x00007405
    6310:	00006c05 	.word	0x00006c05

00006314 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6314:	b5f0      	push	{r4, r5, r6, r7, lr}
    6316:	46c6      	mov	lr, r8
    6318:	b500      	push	{lr}
    631a:	000c      	movs	r4, r1
    631c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    631e:	2800      	cmp	r0, #0
    6320:	d10f      	bne.n	6342 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    6322:	2a00      	cmp	r2, #0
    6324:	dd11      	ble.n	634a <_read+0x36>
    6326:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    6328:	4e09      	ldr	r6, [pc, #36]	; (6350 <_read+0x3c>)
    632a:	4d0a      	ldr	r5, [pc, #40]	; (6354 <_read+0x40>)
    632c:	6830      	ldr	r0, [r6, #0]
    632e:	0021      	movs	r1, r4
    6330:	682b      	ldr	r3, [r5, #0]
    6332:	4798      	blx	r3
		ptr++;
    6334:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    6336:	42bc      	cmp	r4, r7
    6338:	d1f8      	bne.n	632c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    633a:	4640      	mov	r0, r8
    633c:	bc04      	pop	{r2}
    633e:	4690      	mov	r8, r2
    6340:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    6342:	2301      	movs	r3, #1
    6344:	425b      	negs	r3, r3
    6346:	4698      	mov	r8, r3
    6348:	e7f7      	b.n	633a <_read+0x26>
	for (; len > 0; --len) {
    634a:	4680      	mov	r8, r0
    634c:	e7f5      	b.n	633a <_read+0x26>
    634e:	46c0      	nop			; (mov r8, r8)
    6350:	200015f4 	.word	0x200015f4
    6354:	200015ec 	.word	0x200015ec

00006358 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6358:	b5f0      	push	{r4, r5, r6, r7, lr}
    635a:	46c6      	mov	lr, r8
    635c:	b500      	push	{lr}
    635e:	000e      	movs	r6, r1
    6360:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    6362:	3801      	subs	r0, #1
    6364:	2802      	cmp	r0, #2
    6366:	d810      	bhi.n	638a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    6368:	2a00      	cmp	r2, #0
    636a:	d011      	beq.n	6390 <_write+0x38>
    636c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    636e:	4b0c      	ldr	r3, [pc, #48]	; (63a0 <_write+0x48>)
    6370:	4698      	mov	r8, r3
    6372:	4f0c      	ldr	r7, [pc, #48]	; (63a4 <_write+0x4c>)
    6374:	4643      	mov	r3, r8
    6376:	6818      	ldr	r0, [r3, #0]
    6378:	5d31      	ldrb	r1, [r6, r4]
    637a:	683b      	ldr	r3, [r7, #0]
    637c:	4798      	blx	r3
    637e:	2800      	cmp	r0, #0
    6380:	db08      	blt.n	6394 <_write+0x3c>
			return -1;
		}
		++nChars;
    6382:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    6384:	42a5      	cmp	r5, r4
    6386:	d1f5      	bne.n	6374 <_write+0x1c>
    6388:	e006      	b.n	6398 <_write+0x40>
		return -1;
    638a:	2401      	movs	r4, #1
    638c:	4264      	negs	r4, r4
    638e:	e003      	b.n	6398 <_write+0x40>
	for (; len != 0; --len) {
    6390:	0014      	movs	r4, r2
    6392:	e001      	b.n	6398 <_write+0x40>
			return -1;
    6394:	2401      	movs	r4, #1
    6396:	4264      	negs	r4, r4
	}
	return nChars;
}
    6398:	0020      	movs	r0, r4
    639a:	bc04      	pop	{r2}
    639c:	4690      	mov	r8, r2
    639e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63a0:	200015f4 	.word	0x200015f4
    63a4:	200015f0 	.word	0x200015f0

000063a8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    63a8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    63aa:	4a06      	ldr	r2, [pc, #24]	; (63c4 <_sbrk+0x1c>)
    63ac:	6812      	ldr	r2, [r2, #0]
    63ae:	2a00      	cmp	r2, #0
    63b0:	d004      	beq.n	63bc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    63b2:	4a04      	ldr	r2, [pc, #16]	; (63c4 <_sbrk+0x1c>)
    63b4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    63b6:	18c3      	adds	r3, r0, r3
    63b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    63ba:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    63bc:	4902      	ldr	r1, [pc, #8]	; (63c8 <_sbrk+0x20>)
    63be:	4a01      	ldr	r2, [pc, #4]	; (63c4 <_sbrk+0x1c>)
    63c0:	6011      	str	r1, [r2, #0]
    63c2:	e7f6      	b.n	63b2 <_sbrk+0xa>
    63c4:	200002f8 	.word	0x200002f8
    63c8:	20003e38 	.word	0x20003e38

000063cc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    63cc:	2001      	movs	r0, #1
    63ce:	4240      	negs	r0, r0
    63d0:	4770      	bx	lr

000063d2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    63d2:	2380      	movs	r3, #128	; 0x80
    63d4:	019b      	lsls	r3, r3, #6
    63d6:	604b      	str	r3, [r1, #4]

	return 0;
}
    63d8:	2000      	movs	r0, #0
    63da:	4770      	bx	lr

000063dc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    63dc:	2001      	movs	r0, #1
    63de:	4770      	bx	lr

000063e0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    63e0:	2000      	movs	r0, #0
    63e2:	4770      	bx	lr

000063e4 <uart_callback>:


static void uart_callback(const struct usart_module *const module)
{
	static uint8_t ignore_cnt = 0;
	if (ignore_cnt > 0) {
    63e4:	4b0e      	ldr	r3, [pc, #56]	; (6420 <uart_callback+0x3c>)
    63e6:	781b      	ldrb	r3, [r3, #0]
    63e8:	2b00      	cmp	r3, #0
    63ea:	d110      	bne.n	640e <uart_callback+0x2a>
		ignore_cnt--;
		return;
		} else if (uart_ch_buffer == 0x1B) { /* Ignore escape and following 2 characters. */
    63ec:	4b0d      	ldr	r3, [pc, #52]	; (6424 <uart_callback+0x40>)
    63ee:	881b      	ldrh	r3, [r3, #0]
    63f0:	2b1b      	cmp	r3, #27
    63f2:	d010      	beq.n	6416 <uart_callback+0x32>
		ignore_cnt = 2;
		return;
		} else if (uart_ch_buffer == 0x8) { /* Ignore backspace. */
    63f4:	2b08      	cmp	r3, #8
    63f6:	d00d      	beq.n	6414 <uart_callback+0x30>
		return;
	}
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    63f8:	4a0b      	ldr	r2, [pc, #44]	; (6428 <uart_callback+0x44>)
    63fa:	8812      	ldrh	r2, [r2, #0]
    63fc:	490b      	ldr	r1, [pc, #44]	; (642c <uart_callback+0x48>)
    63fe:	428a      	cmp	r2, r1
    6400:	d808      	bhi.n	6414 <uart_callback+0x30>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    6402:	1c50      	adds	r0, r2, #1
    6404:	4908      	ldr	r1, [pc, #32]	; (6428 <uart_callback+0x44>)
    6406:	8008      	strh	r0, [r1, #0]
    6408:	4909      	ldr	r1, [pc, #36]	; (6430 <uart_callback+0x4c>)
    640a:	548b      	strb	r3, [r1, r2]
    640c:	e002      	b.n	6414 <uart_callback+0x30>
		ignore_cnt--;
    640e:	3b01      	subs	r3, #1
    6410:	4a03      	ldr	r2, [pc, #12]	; (6420 <uart_callback+0x3c>)
    6412:	7013      	strb	r3, [r2, #0]
	}
}
    6414:	4770      	bx	lr
		ignore_cnt = 2;
    6416:	2202      	movs	r2, #2
    6418:	4b01      	ldr	r3, [pc, #4]	; (6420 <uart_callback+0x3c>)
    641a:	701a      	strb	r2, [r3, #0]
		return;
    641c:	e7fa      	b.n	6414 <uart_callback+0x30>
    641e:	46c0      	nop			; (mov r8, r8)
    6420:	20000e98 	.word	0x20000e98
    6424:	20001452 	.word	0x20001452
    6428:	20001450 	.word	0x20001450
    642c:	000005b3 	.word	0x000005b3
    6430:	20000e9c 	.word	0x20000e9c

00006434 <set_dev_name_to_mac>:
	usart_enable(&cdc_uart_module);
}

#define HEX2ASCII(x) (((x) >= 10) ? (((x) - 10) + 'A') : ((x) + '0'))
static void set_dev_name_to_mac(uint8 *name, uint8 *mac_addr)
{
    6434:	b570      	push	{r4, r5, r6, lr}
    6436:	0004      	movs	r4, r0
    6438:	000d      	movs	r5, r1
	/* Name must be in the format WINC1500_00:00 */
	uint16 len;

	len = m2m_strlen(name);
    643a:	4b19      	ldr	r3, [pc, #100]	; (64a0 <set_dev_name_to_mac+0x6c>)
    643c:	4798      	blx	r3
	if (len >= 5) {
    643e:	2804      	cmp	r0, #4
    6440:	d92d      	bls.n	649e <set_dev_name_to_mac+0x6a>
		name[len - 1] = HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
    6442:	1e42      	subs	r2, r0, #1
    6444:	18a2      	adds	r2, r4, r2
    6446:	796b      	ldrb	r3, [r5, #5]
    6448:	210f      	movs	r1, #15
    644a:	400b      	ands	r3, r1
    644c:	0019      	movs	r1, r3
    644e:	3130      	adds	r1, #48	; 0x30
    6450:	2b09      	cmp	r3, #9
    6452:	dd01      	ble.n	6458 <set_dev_name_to_mac+0x24>
    6454:	3337      	adds	r3, #55	; 0x37
    6456:	0019      	movs	r1, r3
    6458:	7011      	strb	r1, [r2, #0]
		name[len - 2] = HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
    645a:	1e82      	subs	r2, r0, #2
    645c:	18a2      	adds	r2, r4, r2
    645e:	796b      	ldrb	r3, [r5, #5]
    6460:	091b      	lsrs	r3, r3, #4
    6462:	0019      	movs	r1, r3
    6464:	3130      	adds	r1, #48	; 0x30
    6466:	2b09      	cmp	r3, #9
    6468:	dd01      	ble.n	646e <set_dev_name_to_mac+0x3a>
    646a:	3337      	adds	r3, #55	; 0x37
    646c:	0019      	movs	r1, r3
    646e:	7011      	strb	r1, [r2, #0]
		name[len - 4] = HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
    6470:	1f02      	subs	r2, r0, #4
    6472:	18a2      	adds	r2, r4, r2
    6474:	792b      	ldrb	r3, [r5, #4]
    6476:	210f      	movs	r1, #15
    6478:	400b      	ands	r3, r1
    647a:	0019      	movs	r1, r3
    647c:	3130      	adds	r1, #48	; 0x30
    647e:	2b09      	cmp	r3, #9
    6480:	dd01      	ble.n	6486 <set_dev_name_to_mac+0x52>
    6482:	3337      	adds	r3, #55	; 0x37
    6484:	0019      	movs	r1, r3
    6486:	7011      	strb	r1, [r2, #0]
		name[len - 5] = HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
    6488:	3805      	subs	r0, #5
    648a:	1824      	adds	r4, r4, r0
    648c:	792b      	ldrb	r3, [r5, #4]
    648e:	091b      	lsrs	r3, r3, #4
    6490:	001a      	movs	r2, r3
    6492:	3230      	adds	r2, #48	; 0x30
    6494:	2b09      	cmp	r3, #9
    6496:	dd01      	ble.n	649c <set_dev_name_to_mac+0x68>
    6498:	3337      	adds	r3, #55	; 0x37
    649a:	001a      	movs	r2, r3
    649c:	7022      	strb	r2, [r4, #0]
	}
}
    649e:	bd70      	pop	{r4, r5, r6, pc}
    64a0:	000010f1 	.word	0x000010f1

000064a4 <wifi_callback>:
}



static void wifi_callback(uint8 msg_type, void *msg_data)
{
    64a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    64a6:	46c6      	mov	lr, r8
    64a8:	b500      	push	{lr}
    64aa:	b082      	sub	sp, #8
    64ac:	000c      	movs	r4, r1
	tstrM2mWifiStateChanged *msg_wifi_state;
	uint8 *msg_ip_addr;

	switch (msg_type) {
    64ae:	282c      	cmp	r0, #44	; 0x2c
    64b0:	d007      	beq.n	64c2 <wifi_callback+0x1e>
    64b2:	2832      	cmp	r0, #50	; 0x32
    64b4:	d012      	beq.n	64dc <wifi_callback+0x38>
    64b6:	2809      	cmp	r0, #9
    64b8:	d019      	beq.n	64ee <wifi_callback+0x4a>
		break;

		default:
		break;
	}
}
    64ba:	b002      	add	sp, #8
    64bc:	bc04      	pop	{r2}
    64be:	4690      	mov	r8, r2
    64c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    64c2:	780b      	ldrb	r3, [r1, #0]
    64c4:	2b01      	cmp	r3, #1
    64c6:	d005      	beq.n	64d4 <wifi_callback+0x30>
			} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    64c8:	2b00      	cmp	r3, #0
    64ca:	d1f6      	bne.n	64ba <wifi_callback+0x16>
			printf("Wi-Fi disconnected\r\n");
    64cc:	483b      	ldr	r0, [pc, #236]	; (65bc <wifi_callback+0x118>)
    64ce:	4b3c      	ldr	r3, [pc, #240]	; (65c0 <wifi_callback+0x11c>)
    64d0:	4798      	blx	r3
    64d2:	e7f2      	b.n	64ba <wifi_callback+0x16>
			printf("Wi-Fi connected\r\n");
    64d4:	483b      	ldr	r0, [pc, #236]	; (65c4 <wifi_callback+0x120>)
    64d6:	4b3a      	ldr	r3, [pc, #232]	; (65c0 <wifi_callback+0x11c>)
    64d8:	4798      	blx	r3
    64da:	e7ee      	b.n	64ba <wifi_callback+0x16>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    64dc:	788b      	ldrb	r3, [r1, #2]
    64de:	784a      	ldrb	r2, [r1, #1]
    64e0:	7809      	ldrb	r1, [r1, #0]
    64e2:	78e0      	ldrb	r0, [r4, #3]
    64e4:	9000      	str	r0, [sp, #0]
    64e6:	4838      	ldr	r0, [pc, #224]	; (65c8 <wifi_callback+0x124>)
    64e8:	4c38      	ldr	r4, [pc, #224]	; (65cc <wifi_callback+0x128>)
    64ea:	47a0      	blx	r4
		break;
    64ec:	e7e5      	b.n	64ba <wifi_callback+0x16>
			printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO.\r\n");
    64ee:	4838      	ldr	r0, [pc, #224]	; (65d0 <wifi_callback+0x12c>)
    64f0:	4b33      	ldr	r3, [pc, #204]	; (65c0 <wifi_callback+0x11c>)
    64f2:	4798      	blx	r3
			if (pstrProvInfo->u8Status == M2M_SUCCESS) {
    64f4:	2363      	movs	r3, #99	; 0x63
    64f6:	5ce3      	ldrb	r3, [r4, r3]
    64f8:	2b00      	cmp	r3, #0
    64fa:	d003      	beq.n	6504 <wifi_callback+0x60>
				printf("wifi_cb: Provision failed.\r\n");
    64fc:	4835      	ldr	r0, [pc, #212]	; (65d4 <wifi_callback+0x130>)
    64fe:	4b30      	ldr	r3, [pc, #192]	; (65c0 <wifi_callback+0x11c>)
    6500:	4798      	blx	r3
}
    6502:	e7da      	b.n	64ba <wifi_callback+0x16>
				m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    6504:	0020      	movs	r0, r4
    6506:	4b34      	ldr	r3, [pc, #208]	; (65d8 <wifi_callback+0x134>)
    6508:	4798      	blx	r3
				pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
    650a:	0025      	movs	r5, r4
    650c:	3521      	adds	r5, #33	; 0x21
				m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    650e:	2362      	movs	r3, #98	; 0x62
    6510:	5ce2      	ldrb	r2, [r4, r3]
    6512:	b2c1      	uxtb	r1, r0
    6514:	339d      	adds	r3, #157	; 0x9d
    6516:	9300      	str	r3, [sp, #0]
    6518:	002b      	movs	r3, r5
    651a:	0020      	movs	r0, r4
    651c:	4e2f      	ldr	r6, [pc, #188]	; (65dc <wifi_callback+0x138>)
    651e:	47b0      	blx	r6
				SSID = pstrProvInfo->au8SSID;
    6520:	4f2f      	ldr	r7, [pc, #188]	; (65e0 <wifi_callback+0x13c>)
    6522:	603c      	str	r4, [r7, #0]
				Password = pstrProvInfo->au8Password;
    6524:	4b2f      	ldr	r3, [pc, #188]	; (65e4 <wifi_callback+0x140>)
    6526:	4698      	mov	r8, r3
    6528:	601d      	str	r5, [r3, #0]
				printf("SSID %s\r\n", SSID);
    652a:	0021      	movs	r1, r4
    652c:	482e      	ldr	r0, [pc, #184]	; (65e8 <wifi_callback+0x144>)
    652e:	4d27      	ldr	r5, [pc, #156]	; (65cc <wifi_callback+0x128>)
    6530:	47a8      	blx	r5
				at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);
    6532:	4c2e      	ldr	r4, [pc, #184]	; (65ec <wifi_callback+0x148>)
    6534:	2200      	movs	r2, #0
    6536:	2180      	movs	r1, #128	; 0x80
    6538:	0249      	lsls	r1, r1, #9
    653a:	0020      	movs	r0, r4
    653c:	4e2c      	ldr	r6, [pc, #176]	; (65f0 <wifi_callback+0x14c>)
    653e:	47b0      	blx	r6
				at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x20000, false);
    6540:	2200      	movs	r2, #0
    6542:	2180      	movs	r1, #128	; 0x80
    6544:	0289      	lsls	r1, r1, #10
    6546:	0020      	movs	r0, r4
    6548:	47b0      	blx	r6
				at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);
    654a:	2200      	movs	r2, #0
    654c:	2180      	movs	r1, #128	; 0x80
    654e:	0249      	lsls	r1, r1, #9
    6550:	0020      	movs	r0, r4
    6552:	4e28      	ldr	r6, [pc, #160]	; (65f4 <wifi_callback+0x150>)
    6554:	47b0      	blx	r6
				at25dfx_chip_erase_block(&at25dfx_chip, 0x20000, AT25DFX_BLOCK_SIZE_4KB);
    6556:	2200      	movs	r2, #0
    6558:	2180      	movs	r1, #128	; 0x80
    655a:	0289      	lsls	r1, r1, #10
    655c:	0020      	movs	r0, r4
    655e:	47b0      	blx	r6
				at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, SSID, AT25DFX_BUFFER_SIZE);
    6560:	683a      	ldr	r2, [r7, #0]
    6562:	2364      	movs	r3, #100	; 0x64
    6564:	2180      	movs	r1, #128	; 0x80
    6566:	0249      	lsls	r1, r1, #9
    6568:	0020      	movs	r0, r4
    656a:	4f23      	ldr	r7, [pc, #140]	; (65f8 <wifi_callback+0x154>)
    656c:	47b8      	blx	r7
				at25dfx_chip_write_buffer(&at25dfx_chip, 0x20000, Password, AT25DFX_BUFFER_SIZE);
    656e:	2364      	movs	r3, #100	; 0x64
    6570:	4642      	mov	r2, r8
    6572:	6812      	ldr	r2, [r2, #0]
    6574:	2180      	movs	r1, #128	; 0x80
    6576:	0289      	lsls	r1, r1, #10
    6578:	0020      	movs	r0, r4
    657a:	47b8      	blx	r7
				at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
    657c:	2101      	movs	r1, #1
    657e:	0020      	movs	r0, r4
    6580:	4b1e      	ldr	r3, [pc, #120]	; (65fc <wifi_callback+0x158>)
    6582:	4798      	blx	r3
				at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, SSID_Read, AT25DFX_BUFFER_SIZE);
    6584:	4f1e      	ldr	r7, [pc, #120]	; (6600 <wifi_callback+0x15c>)
    6586:	2364      	movs	r3, #100	; 0x64
    6588:	003a      	movs	r2, r7
    658a:	2180      	movs	r1, #128	; 0x80
    658c:	0249      	lsls	r1, r1, #9
    658e:	0020      	movs	r0, r4
    6590:	4e1c      	ldr	r6, [pc, #112]	; (6604 <wifi_callback+0x160>)
    6592:	47b0      	blx	r6
				printf("SSID read from flash:  %s\r\n", SSID_Read);
    6594:	0039      	movs	r1, r7
    6596:	481c      	ldr	r0, [pc, #112]	; (6608 <wifi_callback+0x164>)
    6598:	47a8      	blx	r5
				at25dfx_chip_read_buffer(&at25dfx_chip, 0x20000, Password, AT25DFX_BUFFER_SIZE);
    659a:	2364      	movs	r3, #100	; 0x64
    659c:	4642      	mov	r2, r8
    659e:	6812      	ldr	r2, [r2, #0]
    65a0:	2180      	movs	r1, #128	; 0x80
    65a2:	0289      	lsls	r1, r1, #10
    65a4:	0020      	movs	r0, r4
    65a6:	47b0      	blx	r6
				printf("Password read from flash:  %s\r\n", Password);
    65a8:	4643      	mov	r3, r8
    65aa:	6819      	ldr	r1, [r3, #0]
    65ac:	4817      	ldr	r0, [pc, #92]	; (660c <wifi_callback+0x168>)
    65ae:	47a8      	blx	r5
				m2m_wifi_request_dhcp_client();
    65b0:	4b17      	ldr	r3, [pc, #92]	; (6610 <wifi_callback+0x16c>)
    65b2:	4798      	blx	r3
				wifi_connected = 1;
    65b4:	2201      	movs	r2, #1
    65b6:	4b17      	ldr	r3, [pc, #92]	; (6614 <wifi_callback+0x170>)
    65b8:	701a      	strb	r2, [r3, #0]
    65ba:	e77e      	b.n	64ba <wifi_callback+0x16>
    65bc:	00009d80 	.word	0x00009d80
    65c0:	00007715 	.word	0x00007715
    65c4:	00009d6c 	.word	0x00009d6c
    65c8:	00009d94 	.word	0x00009d94
    65cc:	000075f9 	.word	0x000075f9
    65d0:	00009db0 	.word	0x00009db0
    65d4:	00009e20 	.word	0x00009e20
    65d8:	000078b9 	.word	0x000078b9
    65dc:	000025e1 	.word	0x000025e1
    65e0:	20001ca0 	.word	0x20001ca0
    65e4:	20001af0 	.word	0x20001af0
    65e8:	00009dd8 	.word	0x00009dd8
    65ec:	20001918 	.word	0x20001918
    65f0:	00000a65 	.word	0x00000a65
    65f4:	0000075d 	.word	0x0000075d
    65f8:	00000321 	.word	0x00000321
    65fc:	00000975 	.word	0x00000975
    6600:	20001960 	.word	0x20001960
    6604:	00000229 	.word	0x00000229
    6608:	00009de4 	.word	0x00009de4
    660c:	00009e00 	.word	0x00009e00
    6610:	0000264d 	.word	0x0000264d
    6614:	20001454 	.word	0x20001454

00006618 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    6618:	b570      	push	{r4, r5, r6, lr}
    661a:	b082      	sub	sp, #8
    661c:	0005      	movs	r5, r0
    661e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    6620:	2200      	movs	r2, #0
    6622:	466b      	mov	r3, sp
    6624:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    6626:	4c06      	ldr	r4, [pc, #24]	; (6640 <usart_serial_getchar+0x28>)
    6628:	466b      	mov	r3, sp
    662a:	1d99      	adds	r1, r3, #6
    662c:	0028      	movs	r0, r5
    662e:	47a0      	blx	r4
    6630:	2800      	cmp	r0, #0
    6632:	d1f9      	bne.n	6628 <usart_serial_getchar+0x10>

	*c = temp;
    6634:	466b      	mov	r3, sp
    6636:	3306      	adds	r3, #6
    6638:	881b      	ldrh	r3, [r3, #0]
    663a:	7033      	strb	r3, [r6, #0]
}
    663c:	b002      	add	sp, #8
    663e:	bd70      	pop	{r4, r5, r6, pc}
    6640:	00005811 	.word	0x00005811

00006644 <usart_serial_putchar>:
{
    6644:	b570      	push	{r4, r5, r6, lr}
    6646:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    6648:	b28c      	uxth	r4, r1
    664a:	4e03      	ldr	r6, [pc, #12]	; (6658 <usart_serial_putchar+0x14>)
    664c:	0021      	movs	r1, r4
    664e:	0028      	movs	r0, r5
    6650:	47b0      	blx	r6
    6652:	2800      	cmp	r0, #0
    6654:	d1fa      	bne.n	664c <usart_serial_putchar+0x8>
}
    6656:	bd70      	pop	{r4, r5, r6, pc}
    6658:	000057e5 	.word	0x000057e5

0000665c <client_socket_cb>:
void client_socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg){
    665c:	b510      	push	{r4, lr}
	switch (u8Msg) {
    665e:	2906      	cmp	r1, #6
    6660:	d02c      	beq.n	66bc <client_socket_cb+0x60>
    6662:	2907      	cmp	r1, #7
    6664:	d01e      	beq.n	66a4 <client_socket_cb+0x48>
    6666:	2905      	cmp	r1, #5
    6668:	d000      	beq.n	666c <client_socket_cb+0x10>
}
    666a:	bd10      	pop	{r4, pc}
			if (pstrConnect && pstrConnect->s8Error >= 0) {
    666c:	2a00      	cmp	r2, #0
    666e:	d00e      	beq.n	668e <client_socket_cb+0x32>
    6670:	7853      	ldrb	r3, [r2, #1]
    6672:	2b7f      	cmp	r3, #127	; 0x7f
    6674:	d80b      	bhi.n	668e <client_socket_cb+0x32>
				printf("socket_cb: connect success!\r\n");
    6676:	481c      	ldr	r0, [pc, #112]	; (66e8 <client_socket_cb+0x8c>)
    6678:	4b1c      	ldr	r3, [pc, #112]	; (66ec <client_socket_cb+0x90>)
    667a:	4798      	blx	r3
				send(tcp_client_socket_external, &msg_wifi_product, sizeof(t_msg_wifi_product), 0);
    667c:	4b1c      	ldr	r3, [pc, #112]	; (66f0 <client_socket_cb+0x94>)
    667e:	2000      	movs	r0, #0
    6680:	5618      	ldrsb	r0, [r3, r0]
    6682:	2300      	movs	r3, #0
    6684:	2209      	movs	r2, #9
    6686:	491b      	ldr	r1, [pc, #108]	; (66f4 <client_socket_cb+0x98>)
    6688:	4c1b      	ldr	r4, [pc, #108]	; (66f8 <client_socket_cb+0x9c>)
    668a:	47a0      	blx	r4
    668c:	e7ed      	b.n	666a <client_socket_cb+0xe>
				printf("socket_cb: connect error!\r\n");
    668e:	481b      	ldr	r0, [pc, #108]	; (66fc <client_socket_cb+0xa0>)
    6690:	4b16      	ldr	r3, [pc, #88]	; (66ec <client_socket_cb+0x90>)
    6692:	4798      	blx	r3
				close(tcp_client_socket_external);
    6694:	4c16      	ldr	r4, [pc, #88]	; (66f0 <client_socket_cb+0x94>)
    6696:	2000      	movs	r0, #0
    6698:	5620      	ldrsb	r0, [r4, r0]
    669a:	4b19      	ldr	r3, [pc, #100]	; (6700 <client_socket_cb+0xa4>)
    669c:	4798      	blx	r3
				tcp_client_socket_external = -1;
    669e:	23ff      	movs	r3, #255	; 0xff
    66a0:	7023      	strb	r3, [r4, #0]
    66a2:	e7e2      	b.n	666a <client_socket_cb+0xe>
			printf("socket_cb: send success!\r\n");
    66a4:	4817      	ldr	r0, [pc, #92]	; (6704 <client_socket_cb+0xa8>)
    66a6:	4b11      	ldr	r3, [pc, #68]	; (66ec <client_socket_cb+0x90>)
    66a8:	4798      	blx	r3
			recv(tcp_client_socket_external, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
    66aa:	4b11      	ldr	r3, [pc, #68]	; (66f0 <client_socket_cb+0x94>)
    66ac:	2000      	movs	r0, #0
    66ae:	5618      	ldrsb	r0, [r3, r0]
    66b0:	2300      	movs	r3, #0
    66b2:	4a15      	ldr	r2, [pc, #84]	; (6708 <client_socket_cb+0xac>)
    66b4:	4915      	ldr	r1, [pc, #84]	; (670c <client_socket_cb+0xb0>)
    66b6:	4c16      	ldr	r4, [pc, #88]	; (6710 <client_socket_cb+0xb4>)
    66b8:	47a0      	blx	r4
		break;
    66ba:	e7d6      	b.n	666a <client_socket_cb+0xe>
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
    66bc:	2a00      	cmp	r2, #0
    66be:	d003      	beq.n	66c8 <client_socket_cb+0x6c>
    66c0:	2304      	movs	r3, #4
    66c2:	5ed3      	ldrsh	r3, [r2, r3]
    66c4:	2b00      	cmp	r3, #0
    66c6:	dc0a      	bgt.n	66de <client_socket_cb+0x82>
				printf("socket_cb: recv error!\r\n");
    66c8:	4812      	ldr	r0, [pc, #72]	; (6714 <client_socket_cb+0xb8>)
    66ca:	4b08      	ldr	r3, [pc, #32]	; (66ec <client_socket_cb+0x90>)
    66cc:	4798      	blx	r3
				close(tcp_client_socket_external);
    66ce:	4c08      	ldr	r4, [pc, #32]	; (66f0 <client_socket_cb+0x94>)
    66d0:	2000      	movs	r0, #0
    66d2:	5620      	ldrsb	r0, [r4, r0]
    66d4:	4b0a      	ldr	r3, [pc, #40]	; (6700 <client_socket_cb+0xa4>)
    66d6:	4798      	blx	r3
				tcp_client_socket_external = -1;
    66d8:	23ff      	movs	r3, #255	; 0xff
    66da:	7023      	strb	r3, [r4, #0]
}
    66dc:	e7c5      	b.n	666a <client_socket_cb+0xe>
				printf("socket_cb: recv success!\r\n");
    66de:	480e      	ldr	r0, [pc, #56]	; (6718 <client_socket_cb+0xbc>)
    66e0:	4b02      	ldr	r3, [pc, #8]	; (66ec <client_socket_cb+0x90>)
    66e2:	4798      	blx	r3
    66e4:	e7c1      	b.n	666a <client_socket_cb+0xe>
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	00009894 	.word	0x00009894
    66ec:	00007715 	.word	0x00007715
    66f0:	200000b6 	.word	0x200000b6
    66f4:	200000ac 	.word	0x200000ac
    66f8:	000044dd 	.word	0x000044dd
    66fc:	000098b4 	.word	0x000098b4
    6700:	00004609 	.word	0x00004609
    6704:	000098d0 	.word	0x000098d0
    6708:	000005b4 	.word	0x000005b4
    670c:	200008e4 	.word	0x200008e4
    6710:	00004575 	.word	0x00004575
    6714:	00009908 	.word	0x00009908
    6718:	000098ec 	.word	0x000098ec

0000671c <socket_cb>:
{
    671c:	b570      	push	{r4, r5, r6, lr}
    671e:	0014      	movs	r4, r2
	if (sock == tcp_server_socket || sock == tcp_client_socket){
    6720:	4b5b      	ldr	r3, [pc, #364]	; (6890 <socket_cb+0x174>)
    6722:	781b      	ldrb	r3, [r3, #0]
    6724:	b25b      	sxtb	r3, r3
    6726:	4283      	cmp	r3, r0
    6728:	d00b      	beq.n	6742 <socket_cb+0x26>
    672a:	4b5a      	ldr	r3, [pc, #360]	; (6894 <socket_cb+0x178>)
    672c:	781b      	ldrb	r3, [r3, #0]
    672e:	b25b      	sxtb	r3, r3
    6730:	4283      	cmp	r3, r0
    6732:	d006      	beq.n	6742 <socket_cb+0x26>
	else if (sock == tcp_client_socket_external){
    6734:	4b58      	ldr	r3, [pc, #352]	; (6898 <socket_cb+0x17c>)
    6736:	781b      	ldrb	r3, [r3, #0]
    6738:	b25b      	sxtb	r3, r3
    673a:	4283      	cmp	r3, r0
    673c:	d100      	bne.n	6740 <socket_cb+0x24>
    673e:	e0a4      	b.n	688a <socket_cb+0x16e>
}
    6740:	bd70      	pop	{r4, r5, r6, pc}
	switch (u8Msg) {
    6742:	2907      	cmp	r1, #7
    6744:	d8fc      	bhi.n	6740 <socket_cb+0x24>
    6746:	0089      	lsls	r1, r1, #2
    6748:	4b54      	ldr	r3, [pc, #336]	; (689c <socket_cb+0x180>)
    674a:	585b      	ldr	r3, [r3, r1]
    674c:	469f      	mov	pc, r3
			if (pstrBind && pstrBind->status == 0) {
    674e:	2c00      	cmp	r4, #0
    6750:	d003      	beq.n	675a <socket_cb+0x3e>
    6752:	2300      	movs	r3, #0
    6754:	56e3      	ldrsb	r3, [r4, r3]
    6756:	2b00      	cmp	r3, #0
    6758:	d00a      	beq.n	6770 <socket_cb+0x54>
				printf("socket_cb: bind error!\r\n");
    675a:	4851      	ldr	r0, [pc, #324]	; (68a0 <socket_cb+0x184>)
    675c:	4b51      	ldr	r3, [pc, #324]	; (68a4 <socket_cb+0x188>)
    675e:	4798      	blx	r3
				close(tcp_server_socket);
    6760:	4c4b      	ldr	r4, [pc, #300]	; (6890 <socket_cb+0x174>)
    6762:	2000      	movs	r0, #0
    6764:	5620      	ldrsb	r0, [r4, r0]
    6766:	4b50      	ldr	r3, [pc, #320]	; (68a8 <socket_cb+0x18c>)
    6768:	4798      	blx	r3
				tcp_server_socket = -1;
    676a:	23ff      	movs	r3, #255	; 0xff
    676c:	7023      	strb	r3, [r4, #0]
    676e:	e7e7      	b.n	6740 <socket_cb+0x24>
				printf("socket_cb: bind success!\r\n");
    6770:	484e      	ldr	r0, [pc, #312]	; (68ac <socket_cb+0x190>)
    6772:	4b4c      	ldr	r3, [pc, #304]	; (68a4 <socket_cb+0x188>)
    6774:	4798      	blx	r3
				listen(tcp_server_socket, 0);
    6776:	4b46      	ldr	r3, [pc, #280]	; (6890 <socket_cb+0x174>)
    6778:	2000      	movs	r0, #0
    677a:	5618      	ldrsb	r0, [r3, r0]
    677c:	2100      	movs	r1, #0
    677e:	4b4c      	ldr	r3, [pc, #304]	; (68b0 <socket_cb+0x194>)
    6780:	4798      	blx	r3
    6782:	e7dd      	b.n	6740 <socket_cb+0x24>
			if (pstrListen && pstrListen->status == 0) {
    6784:	2c00      	cmp	r4, #0
    6786:	d003      	beq.n	6790 <socket_cb+0x74>
    6788:	2300      	movs	r3, #0
    678a:	56e3      	ldrsb	r3, [r4, r3]
    678c:	2b00      	cmp	r3, #0
    678e:	d00a      	beq.n	67a6 <socket_cb+0x8a>
				printf("socket_cb: listen error!\r\n");
    6790:	4848      	ldr	r0, [pc, #288]	; (68b4 <socket_cb+0x198>)
    6792:	4b44      	ldr	r3, [pc, #272]	; (68a4 <socket_cb+0x188>)
    6794:	4798      	blx	r3
				close(tcp_server_socket);
    6796:	4c3e      	ldr	r4, [pc, #248]	; (6890 <socket_cb+0x174>)
    6798:	2000      	movs	r0, #0
    679a:	5620      	ldrsb	r0, [r4, r0]
    679c:	4b42      	ldr	r3, [pc, #264]	; (68a8 <socket_cb+0x18c>)
    679e:	4798      	blx	r3
				tcp_server_socket = -1;
    67a0:	23ff      	movs	r3, #255	; 0xff
    67a2:	7023      	strb	r3, [r4, #0]
    67a4:	e7cc      	b.n	6740 <socket_cb+0x24>
				printf("socket_cb: listen success!\r\n");
    67a6:	4844      	ldr	r0, [pc, #272]	; (68b8 <socket_cb+0x19c>)
    67a8:	4b3e      	ldr	r3, [pc, #248]	; (68a4 <socket_cb+0x188>)
    67aa:	4798      	blx	r3
				accept(tcp_server_socket, NULL, NULL);
    67ac:	4b38      	ldr	r3, [pc, #224]	; (6890 <socket_cb+0x174>)
    67ae:	2000      	movs	r0, #0
    67b0:	5618      	ldrsb	r0, [r3, r0]
    67b2:	2200      	movs	r2, #0
    67b4:	2100      	movs	r1, #0
    67b6:	4b41      	ldr	r3, [pc, #260]	; (68bc <socket_cb+0x1a0>)
    67b8:	4798      	blx	r3
    67ba:	e7c1      	b.n	6740 <socket_cb+0x24>
			if (pstrAccept) {
    67bc:	2c00      	cmp	r4, #0
    67be:	d013      	beq.n	67e8 <socket_cb+0xcc>
				printf("socket_cb: accept success!\r\n");
    67c0:	483f      	ldr	r0, [pc, #252]	; (68c0 <socket_cb+0x1a4>)
    67c2:	4b38      	ldr	r3, [pc, #224]	; (68a4 <socket_cb+0x188>)
    67c4:	4798      	blx	r3
				accept(tcp_server_socket, NULL, NULL);
    67c6:	4b32      	ldr	r3, [pc, #200]	; (6890 <socket_cb+0x174>)
    67c8:	2000      	movs	r0, #0
    67ca:	5618      	ldrsb	r0, [r3, r0]
    67cc:	2200      	movs	r2, #0
    67ce:	2100      	movs	r1, #0
    67d0:	4b3a      	ldr	r3, [pc, #232]	; (68bc <socket_cb+0x1a0>)
    67d2:	4798      	blx	r3
				tcp_client_socket = pstrAccept->sock;
    67d4:	2000      	movs	r0, #0
    67d6:	5620      	ldrsb	r0, [r4, r0]
    67d8:	4b2e      	ldr	r3, [pc, #184]	; (6894 <socket_cb+0x178>)
    67da:	7018      	strb	r0, [r3, #0]
				recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
    67dc:	2300      	movs	r3, #0
    67de:	4a39      	ldr	r2, [pc, #228]	; (68c4 <socket_cb+0x1a8>)
    67e0:	4939      	ldr	r1, [pc, #228]	; (68c8 <socket_cb+0x1ac>)
    67e2:	4c3a      	ldr	r4, [pc, #232]	; (68cc <socket_cb+0x1b0>)
    67e4:	47a0      	blx	r4
    67e6:	e7ab      	b.n	6740 <socket_cb+0x24>
				printf("socket_cb: accept error!\r\n");
    67e8:	4839      	ldr	r0, [pc, #228]	; (68d0 <socket_cb+0x1b4>)
    67ea:	4b2e      	ldr	r3, [pc, #184]	; (68a4 <socket_cb+0x188>)
    67ec:	4798      	blx	r3
				close(tcp_server_socket);
    67ee:	4c28      	ldr	r4, [pc, #160]	; (6890 <socket_cb+0x174>)
    67f0:	2000      	movs	r0, #0
    67f2:	5620      	ldrsb	r0, [r4, r0]
    67f4:	4b2c      	ldr	r3, [pc, #176]	; (68a8 <socket_cb+0x18c>)
    67f6:	4798      	blx	r3
				tcp_server_socket = -1;
    67f8:	23ff      	movs	r3, #255	; 0xff
    67fa:	7023      	strb	r3, [r4, #0]
    67fc:	e7a0      	b.n	6740 <socket_cb+0x24>
			if (pstrConnect && pstrConnect->s8Error >= 0) {
    67fe:	2c00      	cmp	r4, #0
    6800:	d00e      	beq.n	6820 <socket_cb+0x104>
    6802:	7863      	ldrb	r3, [r4, #1]
    6804:	2b7f      	cmp	r3, #127	; 0x7f
    6806:	d80b      	bhi.n	6820 <socket_cb+0x104>
				printf("socket_cb: connect success.\r\n");
    6808:	4832      	ldr	r0, [pc, #200]	; (68d4 <socket_cb+0x1b8>)
    680a:	4b26      	ldr	r3, [pc, #152]	; (68a4 <socket_cb+0x188>)
    680c:	4798      	blx	r3
				recv(tcp_client_socket, gau8SocketBuffer, sizeof(gau8SocketBuffer), 0);
    680e:	4b21      	ldr	r3, [pc, #132]	; (6894 <socket_cb+0x178>)
    6810:	2000      	movs	r0, #0
    6812:	5618      	ldrsb	r0, [r3, r0]
    6814:	2300      	movs	r3, #0
    6816:	4a2b      	ldr	r2, [pc, #172]	; (68c4 <socket_cb+0x1a8>)
    6818:	492f      	ldr	r1, [pc, #188]	; (68d8 <socket_cb+0x1bc>)
    681a:	4c2c      	ldr	r4, [pc, #176]	; (68cc <socket_cb+0x1b0>)
    681c:	47a0      	blx	r4
    681e:	e78f      	b.n	6740 <socket_cb+0x24>
				printf("socket_cb: connect error!\r\n");
    6820:	482e      	ldr	r0, [pc, #184]	; (68dc <socket_cb+0x1c0>)
    6822:	4b20      	ldr	r3, [pc, #128]	; (68a4 <socket_cb+0x188>)
    6824:	4798      	blx	r3
    6826:	e78b      	b.n	6740 <socket_cb+0x24>
			recv(tcp_client_socket, gau8SocketBuffer, sizeof(gau8SocketBuffer), 0);
    6828:	4b1a      	ldr	r3, [pc, #104]	; (6894 <socket_cb+0x178>)
    682a:	2000      	movs	r0, #0
    682c:	5618      	ldrsb	r0, [r3, r0]
    682e:	2300      	movs	r3, #0
    6830:	4a24      	ldr	r2, [pc, #144]	; (68c4 <socket_cb+0x1a8>)
    6832:	4929      	ldr	r1, [pc, #164]	; (68d8 <socket_cb+0x1bc>)
    6834:	4c25      	ldr	r4, [pc, #148]	; (68cc <socket_cb+0x1b0>)
    6836:	47a0      	blx	r4
    6838:	e782      	b.n	6740 <socket_cb+0x24>
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
    683a:	2c00      	cmp	r4, #0
    683c:	d003      	beq.n	6846 <socket_cb+0x12a>
    683e:	2204      	movs	r2, #4
    6840:	5ea3      	ldrsh	r3, [r4, r2]
    6842:	2b00      	cmp	r3, #0
    6844:	dc0a      	bgt.n	685c <socket_cb+0x140>
				printf("socket_cb: recv error!\r\n");
    6846:	4826      	ldr	r0, [pc, #152]	; (68e0 <socket_cb+0x1c4>)
    6848:	4b16      	ldr	r3, [pc, #88]	; (68a4 <socket_cb+0x188>)
    684a:	4798      	blx	r3
				close(tcp_server_socket);
    684c:	4c10      	ldr	r4, [pc, #64]	; (6890 <socket_cb+0x174>)
    684e:	2000      	movs	r0, #0
    6850:	5620      	ldrsb	r0, [r4, r0]
    6852:	4b15      	ldr	r3, [pc, #84]	; (68a8 <socket_cb+0x18c>)
    6854:	4798      	blx	r3
				tcp_server_socket = -1;
    6856:	23ff      	movs	r3, #255	; 0xff
    6858:	7023      	strb	r3, [r4, #0]
    685a:	e771      	b.n	6740 <socket_cb+0x24>
				printf("socket_cb: recv success!\r\n");
    685c:	4821      	ldr	r0, [pc, #132]	; (68e4 <socket_cb+0x1c8>)
    685e:	4b11      	ldr	r3, [pc, #68]	; (68a4 <socket_cb+0x188>)
    6860:	4798      	blx	r3
				printf("The message received is %s\r\n", pstrRecv->pu8Buffer);
    6862:	6821      	ldr	r1, [r4, #0]
    6864:	4820      	ldr	r0, [pc, #128]	; (68e8 <socket_cb+0x1cc>)
    6866:	4b21      	ldr	r3, [pc, #132]	; (68ec <socket_cb+0x1d0>)
    6868:	4798      	blx	r3
				send(tcp_client_socket, &msg_wifi_product, sizeof(t_msg_wifi_product), 0);
    686a:	4c0a      	ldr	r4, [pc, #40]	; (6894 <socket_cb+0x178>)
    686c:	2000      	movs	r0, #0
    686e:	5620      	ldrsb	r0, [r4, r0]
    6870:	2300      	movs	r3, #0
    6872:	2209      	movs	r2, #9
    6874:	491e      	ldr	r1, [pc, #120]	; (68f0 <socket_cb+0x1d4>)
    6876:	4d1f      	ldr	r5, [pc, #124]	; (68f4 <socket_cb+0x1d8>)
    6878:	47a8      	blx	r5
			recv(tcp_client_socket, gau8SocketBuffer, sizeof(gau8SocketBuffer), 0);
    687a:	2000      	movs	r0, #0
    687c:	5620      	ldrsb	r0, [r4, r0]
    687e:	2300      	movs	r3, #0
    6880:	4a10      	ldr	r2, [pc, #64]	; (68c4 <socket_cb+0x1a8>)
    6882:	4915      	ldr	r1, [pc, #84]	; (68d8 <socket_cb+0x1bc>)
    6884:	4c11      	ldr	r4, [pc, #68]	; (68cc <socket_cb+0x1b0>)
    6886:	47a0      	blx	r4
    6888:	e75a      	b.n	6740 <socket_cb+0x24>
		client_socket_cb(sock, msg_type, msg_data);
    688a:	4b1b      	ldr	r3, [pc, #108]	; (68f8 <socket_cb+0x1dc>)
    688c:	4798      	blx	r3
}
    688e:	e757      	b.n	6740 <socket_cb+0x24>
    6890:	200000b7 	.word	0x200000b7
    6894:	200000b5 	.word	0x200000b5
    6898:	200000b6 	.word	0x200000b6
    689c:	00009874 	.word	0x00009874
    68a0:	00009ca4 	.word	0x00009ca4
    68a4:	00007715 	.word	0x00007715
    68a8:	00004609 	.word	0x00004609
    68ac:	00009c88 	.word	0x00009c88
    68b0:	000043d1 	.word	0x000043d1
    68b4:	00009cd8 	.word	0x00009cd8
    68b8:	00009cbc 	.word	0x00009cbc
    68bc:	00004429 	.word	0x00004429
    68c0:	00009cf4 	.word	0x00009cf4
    68c4:	000005b4 	.word	0x000005b4
    68c8:	200008e4 	.word	0x200008e4
    68cc:	00004575 	.word	0x00004575
    68d0:	00009d10 	.word	0x00009d10
    68d4:	00009d2c 	.word	0x00009d2c
    68d8:	20000330 	.word	0x20000330
    68dc:	000098b4 	.word	0x000098b4
    68e0:	00009908 	.word	0x00009908
    68e4:	000098ec 	.word	0x000098ec
    68e8:	00009d4c 	.word	0x00009d4c
    68ec:	000075f9 	.word	0x000075f9
    68f0:	200000ac 	.word	0x200000ac
    68f4:	000044dd 	.word	0x000044dd
    68f8:	0000665d 	.word	0x0000665d

000068fc <sendTCP>:
		}

	}
}

void sendTCP(char* message){
    68fc:	b510      	push	{r4, lr}
    68fe:	0004      	movs	r4, r0
	printf("message to the server is: %s\r\n", message);
    6900:	0001      	movs	r1, r0
    6902:	4807      	ldr	r0, [pc, #28]	; (6920 <sendTCP+0x24>)
    6904:	4b07      	ldr	r3, [pc, #28]	; (6924 <sendTCP+0x28>)
    6906:	4798      	blx	r3
	send(tcp_client_socket_external, message, strlen(message), 0);
    6908:	0020      	movs	r0, r4
    690a:	4b07      	ldr	r3, [pc, #28]	; (6928 <sendTCP+0x2c>)
    690c:	4798      	blx	r3
    690e:	b282      	uxth	r2, r0
    6910:	4b06      	ldr	r3, [pc, #24]	; (692c <sendTCP+0x30>)
    6912:	2000      	movs	r0, #0
    6914:	5618      	ldrsb	r0, [r3, r0]
    6916:	2300      	movs	r3, #0
    6918:	0021      	movs	r1, r4
    691a:	4c05      	ldr	r4, [pc, #20]	; (6930 <sendTCP+0x34>)
    691c:	47a0      	blx	r4
}
    691e:	bd10      	pop	{r4, pc}
    6920:	00009c68 	.word	0x00009c68
    6924:	000075f9 	.word	0x000075f9
    6928:	000078b9 	.word	0x000078b9
    692c:	200000b6 	.word	0x200000b6
    6930:	000044dd 	.word	0x000044dd

00006934 <calculateIP>:

long long int calculateIP(char *IPstring){
    6934:	b570      	push	{r4, r5, r6, lr}
    6936:	b08a      	sub	sp, #40	; 0x28
	
	char* IPArray[4];
	int IPNum[4];
	long long int IPnumber = 0;
	int testNumber = 0;
	p = strtok(IPstring, ".");
    6938:	4914      	ldr	r1, [pc, #80]	; (698c <calculateIP+0x58>)
    693a:	4b15      	ldr	r3, [pc, #84]	; (6990 <calculateIP+0x5c>)
    693c:	4798      	blx	r3
	while (p != NULL){
    693e:	2800      	cmp	r0, #0
    6940:	d008      	beq.n	6954 <calculateIP+0x20>
    6942:	ac06      	add	r4, sp, #24
		//printf("%s\n", p);
		
		IPArray[count++] = p;
		
		p = strtok(NULL, ".");
    6944:	4e11      	ldr	r6, [pc, #68]	; (698c <calculateIP+0x58>)
    6946:	4d12      	ldr	r5, [pc, #72]	; (6990 <calculateIP+0x5c>)
		IPArray[count++] = p;
    6948:	c401      	stmia	r4!, {r0}
		p = strtok(NULL, ".");
    694a:	0031      	movs	r1, r6
    694c:	2000      	movs	r0, #0
    694e:	47a8      	blx	r5
	while (p != NULL){
    6950:	2800      	cmp	r0, #0
    6952:	d1f9      	bne.n	6948 <calculateIP+0x14>
long long int calculateIP(char *IPstring){
    6954:	2400      	movs	r4, #0
		
	}
	
	for(i = 0; i < 4; i++){
		//printf("%d\r\n", i);
		IPNum[i] = atoi(IPArray[i]);
    6956:	ae06      	add	r6, sp, #24
    6958:	4d0e      	ldr	r5, [pc, #56]	; (6994 <calculateIP+0x60>)
    695a:	59a0      	ldr	r0, [r4, r6]
    695c:	47a8      	blx	r5
    695e:	ab02      	add	r3, sp, #8
    6960:	50e0      	str	r0, [r4, r3]
    6962:	3404      	adds	r4, #4
	for(i = 0; i < 4; i++){
    6964:	2c10      	cmp	r4, #16
    6966:	d1f8      	bne.n	695a <calculateIP+0x26>
	}
	
	IPnumber = (IPNum[3]*1) + (IPNum[2]*256) + (IPNum[1]*65536) + 3221225472;
    6968:	9b04      	ldr	r3, [sp, #16]
    696a:	021b      	lsls	r3, r3, #8
    696c:	9a05      	ldr	r2, [sp, #20]
    696e:	9201      	str	r2, [sp, #4]
    6970:	4694      	mov	ip, r2
    6972:	4463      	add	r3, ip
    6974:	9a03      	ldr	r2, [sp, #12]
    6976:	0412      	lsls	r2, r2, #16
    6978:	189b      	adds	r3, r3, r2
    697a:	0018      	movs	r0, r3
    697c:	17d9      	asrs	r1, r3, #31
    697e:	22c0      	movs	r2, #192	; 0xc0
    6980:	0612      	lsls	r2, r2, #24
    6982:	2300      	movs	r3, #0
    6984:	1880      	adds	r0, r0, r2
    6986:	4159      	adcs	r1, r3
	return IPnumber;
	
	
}
    6988:	b00a      	add	sp, #40	; 0x28
    698a:	bd70      	pop	{r4, r5, r6, pc}
    698c:	00009588 	.word	0x00009588
    6990:	000078e9 	.word	0x000078e9
    6994:	000073f9 	.word	0x000073f9

00006998 <commandTCP>:
int commandTCP(char* IPAddress, int port){
    6998:	b530      	push	{r4, r5, lr}
    699a:	b085      	sub	sp, #20
    699c:	000c      	movs	r4, r1
	IPnumber = calculateIP(IPAddress);
    699e:	4b26      	ldr	r3, [pc, #152]	; (6a38 <commandTCP+0xa0>)
    69a0:	4798      	blx	r3
    69a2:	4d26      	ldr	r5, [pc, #152]	; (6a3c <commandTCP+0xa4>)
    69a4:	6028      	str	r0, [r5, #0]
    69a6:	6069      	str	r1, [r5, #4]
	printf("Port number is %d\r\n", port);
    69a8:	0021      	movs	r1, r4
    69aa:	4825      	ldr	r0, [pc, #148]	; (6a40 <commandTCP+0xa8>)
    69ac:	4b25      	ldr	r3, [pc, #148]	; (6a44 <commandTCP+0xac>)
    69ae:	4798      	blx	r3
	addr2.sin_family = AF_INET;
    69b0:	2302      	movs	r3, #2
    69b2:	466a      	mov	r2, sp
    69b4:	8013      	strh	r3, [r2, #0]
	addr2.sin_port = _htons(port);
    69b6:	0223      	lsls	r3, r4, #8
    69b8:	4a23      	ldr	r2, [pc, #140]	; (6a48 <commandTCP+0xb0>)
    69ba:	4013      	ands	r3, r2
    69bc:	b2a4      	uxth	r4, r4
    69be:	0a24      	lsrs	r4, r4, #8
    69c0:	431c      	orrs	r4, r3
    69c2:	466b      	mov	r3, sp
    69c4:	805c      	strh	r4, [r3, #2]
	addr2.sin_addr.s_addr = _htonl(IPnumber);
    69c6:	682b      	ldr	r3, [r5, #0]
    69c8:	061a      	lsls	r2, r3, #24
    69ca:	0e19      	lsrs	r1, r3, #24
    69cc:	430a      	orrs	r2, r1
    69ce:	0219      	lsls	r1, r3, #8
    69d0:	20ff      	movs	r0, #255	; 0xff
    69d2:	0400      	lsls	r0, r0, #16
    69d4:	4001      	ands	r1, r0
    69d6:	430a      	orrs	r2, r1
    69d8:	0a1b      	lsrs	r3, r3, #8
    69da:	21ff      	movs	r1, #255	; 0xff
    69dc:	0209      	lsls	r1, r1, #8
    69de:	400b      	ands	r3, r1
    69e0:	4313      	orrs	r3, r2
    69e2:	9301      	str	r3, [sp, #4]
	if ((tcp_client_socket_external < 0) && (wifi_connected ==1)){
    69e4:	4b19      	ldr	r3, [pc, #100]	; (6a4c <commandTCP+0xb4>)
    69e6:	781b      	ldrb	r3, [r3, #0]
    69e8:	2b7f      	cmp	r3, #127	; 0x7f
    69ea:	d801      	bhi.n	69f0 <commandTCP+0x58>
}
    69ec:	b005      	add	sp, #20
    69ee:	bd30      	pop	{r4, r5, pc}
	if ((tcp_client_socket_external < 0) && (wifi_connected ==1)){
    69f0:	4b17      	ldr	r3, [pc, #92]	; (6a50 <commandTCP+0xb8>)
    69f2:	781b      	ldrb	r3, [r3, #0]
    69f4:	2b01      	cmp	r3, #1
    69f6:	d1f9      	bne.n	69ec <commandTCP+0x54>
		if ((tcp_client_socket_external = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    69f8:	2200      	movs	r2, #0
    69fa:	2101      	movs	r1, #1
    69fc:	2002      	movs	r0, #2
    69fe:	4b15      	ldr	r3, [pc, #84]	; (6a54 <commandTCP+0xbc>)
    6a00:	4798      	blx	r3
    6a02:	4b12      	ldr	r3, [pc, #72]	; (6a4c <commandTCP+0xb4>)
    6a04:	7018      	strb	r0, [r3, #0]
    6a06:	2800      	cmp	r0, #0
    6a08:	db11      	blt.n	6a2e <commandTCP+0x96>
		ret = connect(tcp_client_socket_external, (struct sockaddr *)&addr2, sizeof(struct sockaddr_in));
    6a0a:	2210      	movs	r2, #16
    6a0c:	4669      	mov	r1, sp
    6a0e:	4b12      	ldr	r3, [pc, #72]	; (6a58 <commandTCP+0xc0>)
    6a10:	4798      	blx	r3
    6a12:	0004      	movs	r4, r0
		printf("connected to the external TCP server \r\n");
    6a14:	4811      	ldr	r0, [pc, #68]	; (6a5c <commandTCP+0xc4>)
    6a16:	4b12      	ldr	r3, [pc, #72]	; (6a60 <commandTCP+0xc8>)
    6a18:	4798      	blx	r3
		if (ret < 0) {
    6a1a:	2c00      	cmp	r4, #0
    6a1c:	dae6      	bge.n	69ec <commandTCP+0x54>
			close(tcp_client_socket_external);
    6a1e:	4c0b      	ldr	r4, [pc, #44]	; (6a4c <commandTCP+0xb4>)
    6a20:	2000      	movs	r0, #0
    6a22:	5620      	ldrsb	r0, [r4, r0]
    6a24:	4b0f      	ldr	r3, [pc, #60]	; (6a64 <commandTCP+0xcc>)
    6a26:	4798      	blx	r3
			tcp_client_socket_external = -1;
    6a28:	23ff      	movs	r3, #255	; 0xff
    6a2a:	7023      	strb	r3, [r4, #0]
    6a2c:	e7de      	b.n	69ec <commandTCP+0x54>
			printf("main: failed to create TCP client socket4 error!\r\n");
    6a2e:	480e      	ldr	r0, [pc, #56]	; (6a68 <commandTCP+0xd0>)
    6a30:	4b0b      	ldr	r3, [pc, #44]	; (6a60 <commandTCP+0xc8>)
    6a32:	4798      	blx	r3
    6a34:	e7da      	b.n	69ec <commandTCP+0x54>
    6a36:	46c0      	nop			; (mov r8, r8)
    6a38:	00006935 	.word	0x00006935
    6a3c:	20001b08 	.word	0x20001b08
    6a40:	00009920 	.word	0x00009920
    6a44:	000075f9 	.word	0x000075f9
    6a48:	00ffff00 	.word	0x00ffff00
    6a4c:	200000b6 	.word	0x200000b6
    6a50:	20001454 	.word	0x20001454
    6a54:	000041c5 	.word	0x000041c5
    6a58:	0000444d 	.word	0x0000444d
    6a5c:	00009968 	.word	0x00009968
    6a60:	00007715 	.word	0x00007715
    6a64:	00004609 	.word	0x00004609
    6a68:	00009934 	.word	0x00009934

00006a6c <handle_input_message>:
{
    6a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a6e:	46ce      	mov	lr, r9
    6a70:	b500      	push	{lr}
	if (uart_buffer_written == 0) {
    6a72:	4b41      	ldr	r3, [pc, #260]	; (6b78 <handle_input_message+0x10c>)
    6a74:	881a      	ldrh	r2, [r3, #0]
    6a76:	2a00      	cmp	r2, #0
    6a78:	d04f      	beq.n	6b1a <handle_input_message+0xae>
		} else if (uart_buffer_written >= MAIN_CHAT_BUFFER_SIZE) {
    6a7a:	4b40      	ldr	r3, [pc, #256]	; (6b7c <handle_input_message+0x110>)
    6a7c:	429a      	cmp	r2, r3
    6a7e:	d84f      	bhi.n	6b20 <handle_input_message+0xb4>
		for (i = 0; i < uart_buffer_written; i++) {
    6a80:	2a00      	cmp	r2, #0
    6a82:	dd4a      	ble.n	6b1a <handle_input_message+0xae>
			if (uart_buffer[i] == '\n') {
    6a84:	4b3e      	ldr	r3, [pc, #248]	; (6b80 <handle_input_message+0x114>)
    6a86:	781b      	ldrb	r3, [r3, #0]
    6a88:	2b0a      	cmp	r3, #10
    6a8a:	d055      	beq.n	6b38 <handle_input_message+0xcc>
    6a8c:	2400      	movs	r4, #0
    6a8e:	493c      	ldr	r1, [pc, #240]	; (6b80 <handle_input_message+0x114>)
		for (i = 0; i < uart_buffer_written; i++) {
    6a90:	3401      	adds	r4, #1
    6a92:	4294      	cmp	r4, r2
    6a94:	d041      	beq.n	6b1a <handle_input_message+0xae>
			if (uart_buffer[i] == '\n') {
    6a96:	5c63      	ldrb	r3, [r4, r1]
    6a98:	2b0a      	cmp	r3, #10
    6a9a:	d1f9      	bne.n	6a90 <handle_input_message+0x24>
				if (uart_buffer[i - 1] == '\r') {
    6a9c:	1e63      	subs	r3, r4, #1
    6a9e:	4a38      	ldr	r2, [pc, #224]	; (6b80 <handle_input_message+0x114>)
    6aa0:	5cd2      	ldrb	r2, [r2, r3]
    6aa2:	2a0d      	cmp	r2, #13
    6aa4:	d000      	beq.n	6aa8 <handle_input_message+0x3c>
    6aa6:	0023      	movs	r3, r4
				uart_buffer[msg_len] = 0;
    6aa8:	4d35      	ldr	r5, [pc, #212]	; (6b80 <handle_input_message+0x114>)
    6aaa:	2200      	movs	r2, #0
    6aac:	54ea      	strb	r2, [r5, r3]
				printf("The input message is %s\r\n",uart_buffer);
    6aae:	0029      	movs	r1, r5
    6ab0:	4834      	ldr	r0, [pc, #208]	; (6b84 <handle_input_message+0x118>)
    6ab2:	4b35      	ldr	r3, [pc, #212]	; (6b88 <handle_input_message+0x11c>)
    6ab4:	4798      	blx	r3
				pch = strtok(uart_buffer, " ");
    6ab6:	4935      	ldr	r1, [pc, #212]	; (6b8c <handle_input_message+0x120>)
    6ab8:	0028      	movs	r0, r5
    6aba:	4b35      	ldr	r3, [pc, #212]	; (6b90 <handle_input_message+0x124>)
    6abc:	4798      	blx	r3
    6abe:	1e05      	subs	r5, r0, #0
				while (pch != NULL){
    6ac0:	d00b      	beq.n	6ada <handle_input_message+0x6e>
    6ac2:	4e34      	ldr	r6, [pc, #208]	; (6b94 <handle_input_message+0x128>)
					printf("%s\n", pch);
    6ac4:	4b34      	ldr	r3, [pc, #208]	; (6b98 <handle_input_message+0x12c>)
    6ac6:	4699      	mov	r9, r3
					pch = strtok(NULL, " ");
    6ac8:	4f31      	ldr	r7, [pc, #196]	; (6b90 <handle_input_message+0x124>)
					printf("%s\n", pch);
    6aca:	0028      	movs	r0, r5
    6acc:	47c8      	blx	r9
					CommandArray[count++] = pch;
    6ace:	c620      	stmia	r6!, {r5}
					pch = strtok(NULL, " ");
    6ad0:	492e      	ldr	r1, [pc, #184]	; (6b8c <handle_input_message+0x120>)
    6ad2:	2000      	movs	r0, #0
    6ad4:	47b8      	blx	r7
    6ad6:	1e05      	subs	r5, r0, #0
				while (pch != NULL){
    6ad8:	d1f7      	bne.n	6aca <handle_input_message+0x5e>
				if(!strncmp("TCP",CommandArray[0],commandSize)){
    6ada:	4b2e      	ldr	r3, [pc, #184]	; (6b94 <handle_input_message+0x128>)
    6adc:	6819      	ldr	r1, [r3, #0]
    6ade:	2203      	movs	r2, #3
    6ae0:	482e      	ldr	r0, [pc, #184]	; (6b9c <handle_input_message+0x130>)
    6ae2:	4b2f      	ldr	r3, [pc, #188]	; (6ba0 <handle_input_message+0x134>)
    6ae4:	4798      	blx	r3
    6ae6:	2800      	cmp	r0, #0
    6ae8:	d10f      	bne.n	6b0a <handle_input_message+0x9e>
					if(!strncmp("CONNECT", CommandArray[1],connectSize)){
    6aea:	4b2a      	ldr	r3, [pc, #168]	; (6b94 <handle_input_message+0x128>)
    6aec:	6859      	ldr	r1, [r3, #4]
    6aee:	2207      	movs	r2, #7
    6af0:	482c      	ldr	r0, [pc, #176]	; (6ba4 <handle_input_message+0x138>)
    6af2:	4b2b      	ldr	r3, [pc, #172]	; (6ba0 <handle_input_message+0x134>)
    6af4:	4798      	blx	r3
    6af6:	2800      	cmp	r0, #0
    6af8:	d020      	beq.n	6b3c <handle_input_message+0xd0>
					if (!strncmp("SEND", CommandArray[1], sendSize))
    6afa:	4b26      	ldr	r3, [pc, #152]	; (6b94 <handle_input_message+0x128>)
    6afc:	6859      	ldr	r1, [r3, #4]
    6afe:	2204      	movs	r2, #4
    6b00:	4829      	ldr	r0, [pc, #164]	; (6ba8 <handle_input_message+0x13c>)
    6b02:	4b27      	ldr	r3, [pc, #156]	; (6ba0 <handle_input_message+0x134>)
    6b04:	4798      	blx	r3
    6b06:	2800      	cmp	r0, #0
    6b08:	d022      	beq.n	6b50 <handle_input_message+0xe4>
				if (uart_buffer_written > i + 1) {
    6b0a:	4b1b      	ldr	r3, [pc, #108]	; (6b78 <handle_input_message+0x10c>)
    6b0c:	881d      	ldrh	r5, [r3, #0]
    6b0e:	1c63      	adds	r3, r4, #1
    6b10:	429d      	cmp	r5, r3
    6b12:	dc26      	bgt.n	6b62 <handle_input_message+0xf6>
					uart_buffer_written = 0;
    6b14:	2200      	movs	r2, #0
    6b16:	4b18      	ldr	r3, [pc, #96]	; (6b78 <handle_input_message+0x10c>)
    6b18:	801a      	strh	r2, [r3, #0]
}
    6b1a:	bc04      	pop	{r2}
    6b1c:	4691      	mov	r9, r2
    6b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send(tcp_client_socket, uart_buffer, MAIN_CHAT_BUFFER_SIZE, 0);
    6b20:	4b22      	ldr	r3, [pc, #136]	; (6bac <handle_input_message+0x140>)
    6b22:	2000      	movs	r0, #0
    6b24:	5618      	ldrsb	r0, [r3, r0]
    6b26:	2300      	movs	r3, #0
    6b28:	4a21      	ldr	r2, [pc, #132]	; (6bb0 <handle_input_message+0x144>)
    6b2a:	4915      	ldr	r1, [pc, #84]	; (6b80 <handle_input_message+0x114>)
    6b2c:	4c21      	ldr	r4, [pc, #132]	; (6bb4 <handle_input_message+0x148>)
    6b2e:	47a0      	blx	r4
		uart_buffer_written = 0;
    6b30:	2200      	movs	r2, #0
    6b32:	4b11      	ldr	r3, [pc, #68]	; (6b78 <handle_input_message+0x10c>)
    6b34:	801a      	strh	r2, [r3, #0]
    6b36:	e7f0      	b.n	6b1a <handle_input_message+0xae>
			if (uart_buffer[i] == '\n') {
    6b38:	2400      	movs	r4, #0
    6b3a:	e7af      	b.n	6a9c <handle_input_message+0x30>
						commandTCP(CommandArray[2], atoi(CommandArray[3]));
    6b3c:	4b15      	ldr	r3, [pc, #84]	; (6b94 <handle_input_message+0x128>)
    6b3e:	689d      	ldr	r5, [r3, #8]
    6b40:	68d8      	ldr	r0, [r3, #12]
    6b42:	4b1d      	ldr	r3, [pc, #116]	; (6bb8 <handle_input_message+0x14c>)
    6b44:	4798      	blx	r3
    6b46:	0001      	movs	r1, r0
    6b48:	0028      	movs	r0, r5
    6b4a:	4b1c      	ldr	r3, [pc, #112]	; (6bbc <handle_input_message+0x150>)
    6b4c:	4798      	blx	r3
    6b4e:	e7d4      	b.n	6afa <handle_input_message+0x8e>
						sendTCP(CommandArray[2]);
    6b50:	4d10      	ldr	r5, [pc, #64]	; (6b94 <handle_input_message+0x128>)
    6b52:	68a8      	ldr	r0, [r5, #8]
    6b54:	4b1a      	ldr	r3, [pc, #104]	; (6bc0 <handle_input_message+0x154>)
    6b56:	4798      	blx	r3
						printf("Sent %s to the server\r\n", CommandArray[2]);
    6b58:	68a9      	ldr	r1, [r5, #8]
    6b5a:	481a      	ldr	r0, [pc, #104]	; (6bc4 <handle_input_message+0x158>)
    6b5c:	4b0a      	ldr	r3, [pc, #40]	; (6b88 <handle_input_message+0x11c>)
    6b5e:	4798      	blx	r3
    6b60:	e7d3      	b.n	6b0a <handle_input_message+0x9e>
					memmove(uart_buffer, uart_buffer + i + 1, uart_buffer_written - i - 1);
    6b62:	1b2a      	subs	r2, r5, r4
    6b64:	3a01      	subs	r2, #1
    6b66:	4806      	ldr	r0, [pc, #24]	; (6b80 <handle_input_message+0x114>)
    6b68:	18c1      	adds	r1, r0, r3
    6b6a:	4b17      	ldr	r3, [pc, #92]	; (6bc8 <handle_input_message+0x15c>)
    6b6c:	4798      	blx	r3
					uart_buffer_written = uart_buffer_written - i - 1;
    6b6e:	3d01      	subs	r5, #1
    6b70:	1b2c      	subs	r4, r5, r4
    6b72:	4b01      	ldr	r3, [pc, #4]	; (6b78 <handle_input_message+0x10c>)
    6b74:	801c      	strh	r4, [r3, #0]
    6b76:	e7d0      	b.n	6b1a <handle_input_message+0xae>
    6b78:	20001450 	.word	0x20001450
    6b7c:	000005b3 	.word	0x000005b3
    6b80:	20000e9c 	.word	0x20000e9c
    6b84:	000099a0 	.word	0x000099a0
    6b88:	000075f9 	.word	0x000075f9
    6b8c:	000099bc 	.word	0x000099bc
    6b90:	000078e9 	.word	0x000078e9
    6b94:	20001af4 	.word	0x20001af4
    6b98:	00007715 	.word	0x00007715
    6b9c:	000099c0 	.word	0x000099c0
    6ba0:	000078c7 	.word	0x000078c7
    6ba4:	000099c4 	.word	0x000099c4
    6ba8:	000099cc 	.word	0x000099cc
    6bac:	200000b5 	.word	0x200000b5
    6bb0:	000005b4 	.word	0x000005b4
    6bb4:	000044dd 	.word	0x000044dd
    6bb8:	000073f9 	.word	0x000073f9
    6bbc:	00006999 	.word	0x00006999
    6bc0:	000068fd 	.word	0x000068fd
    6bc4:	000099d4 	.word	0x000099d4
    6bc8:	00007475 	.word	0x00007475

00006bcc <eraseSerialBuffer>:
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);

}


void eraseSerialBuffer(void){
    6bcc:	b570      	push	{r4, r5, r6, lr}
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
    6bce:	4c0a      	ldr	r4, [pc, #40]	; (6bf8 <eraseSerialBuffer+0x2c>)
    6bd0:	2100      	movs	r1, #0
    6bd2:	0020      	movs	r0, r4
    6bd4:	4d09      	ldr	r5, [pc, #36]	; (6bfc <eraseSerialBuffer+0x30>)
    6bd6:	47a8      	blx	r5
	at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);
    6bd8:	2200      	movs	r2, #0
    6bda:	2180      	movs	r1, #128	; 0x80
    6bdc:	0249      	lsls	r1, r1, #9
    6bde:	0020      	movs	r0, r4
    6be0:	4e07      	ldr	r6, [pc, #28]	; (6c00 <eraseSerialBuffer+0x34>)
    6be2:	47b0      	blx	r6
	at25dfx_chip_erase_block(&at25dfx_chip, 0x20000, AT25DFX_BLOCK_SIZE_4KB);
    6be4:	2200      	movs	r2, #0
    6be6:	2180      	movs	r1, #128	; 0x80
    6be8:	0289      	lsls	r1, r1, #10
    6bea:	0020      	movs	r0, r4
    6bec:	47b0      	blx	r6
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
    6bee:	2101      	movs	r1, #1
    6bf0:	0020      	movs	r0, r4
    6bf2:	47a8      	blx	r5
}
    6bf4:	bd70      	pop	{r4, r5, r6, pc}
    6bf6:	46c0      	nop			; (mov r8, r8)
    6bf8:	20001918 	.word	0x20001918
    6bfc:	00000975 	.word	0x00000975
    6c00:	0000075d 	.word	0x0000075d

00006c04 <main>:

int main(void)
{
    6c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c06:	46c6      	mov	lr, r8
    6c08:	b500      	push	{lr}
    6c0a:	b0a0      	sub	sp, #128	; 0x80

	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;

	/* Initialize the board. */
	system_init();
    6c0c:	4bd7      	ldr	r3, [pc, #860]	; (6f6c <main+0x368>)
    6c0e:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    6c10:	ac03      	add	r4, sp, #12
    6c12:	2501      	movs	r5, #1
    6c14:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    6c16:	2300      	movs	r3, #0
    6c18:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    6c1a:	9305      	str	r3, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    6c1c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    6c1e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    6c20:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    6c22:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    6c24:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    6c26:	2224      	movs	r2, #36	; 0x24
    6c28:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    6c2a:	3a18      	subs	r2, #24
    6c2c:	2100      	movs	r1, #0
    6c2e:	a809      	add	r0, sp, #36	; 0x24
    6c30:	4bcf      	ldr	r3, [pc, #828]	; (6f70 <main+0x36c>)
    6c32:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    6c34:	4bcf      	ldr	r3, [pc, #828]	; (6f74 <main+0x370>)
    6c36:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    6c38:	2380      	movs	r3, #128	; 0x80
    6c3a:	025b      	lsls	r3, r3, #9
    6c3c:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    6c3e:	4bce      	ldr	r3, [pc, #824]	; (6f78 <main+0x374>)
    6c40:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    6c42:	2301      	movs	r3, #1
    6c44:	425b      	negs	r3, r3
    6c46:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    6c48:	4bcc      	ldr	r3, [pc, #816]	; (6f7c <main+0x378>)
    6c4a:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    6c4c:	4bcc      	ldr	r3, [pc, #816]	; (6f80 <main+0x37c>)
    6c4e:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    6c50:	4ecc      	ldr	r6, [pc, #816]	; (6f84 <main+0x380>)
    6c52:	0022      	movs	r2, r4
    6c54:	49cc      	ldr	r1, [pc, #816]	; (6f88 <main+0x384>)
    6c56:	0030      	movs	r0, r6
    6c58:	4bcc      	ldr	r3, [pc, #816]	; (6f8c <main+0x388>)
    6c5a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    6c5c:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6c5e:	0020      	movs	r0, r4
    6c60:	4bcb      	ldr	r3, [pc, #812]	; (6f90 <main+0x38c>)
    6c62:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6c64:	231f      	movs	r3, #31
    6c66:	4018      	ands	r0, r3
    6c68:	4085      	lsls	r5, r0
    6c6a:	4bca      	ldr	r3, [pc, #808]	; (6f94 <main+0x390>)
    6c6c:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6c6e:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    6c70:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    6c72:	2b00      	cmp	r3, #0
    6c74:	d1fc      	bne.n	6c70 <main+0x6c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6c76:	6823      	ldr	r3, [r4, #0]
    6c78:	2202      	movs	r2, #2
    6c7a:	4313      	orrs	r3, r2
    6c7c:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    6c7e:	4cc6      	ldr	r4, [pc, #792]	; (6f98 <main+0x394>)
    6c80:	2304      	movs	r3, #4
    6c82:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
    6c84:	3309      	adds	r3, #9
    6c86:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
    6c88:	4bbe      	ldr	r3, [pc, #760]	; (6f84 <main+0x380>)
    6c8a:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    6c8c:	a902      	add	r1, sp, #8
    6c8e:	2301      	movs	r3, #1
    6c90:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    6c92:	2200      	movs	r2, #0
    6c94:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    6c96:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    6c98:	200d      	movs	r0, #13
    6c9a:	4bc0      	ldr	r3, [pc, #768]	; (6f9c <main+0x398>)
    6c9c:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    6c9e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    6ca0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6ca2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6ca4:	2900      	cmp	r1, #0
    6ca6:	d104      	bne.n	6cb2 <main+0xae>
		return &(ports[port_index]->Group[group_index]);
    6ca8:	0953      	lsrs	r3, r2, #5
    6caa:	01db      	lsls	r3, r3, #7
    6cac:	49bc      	ldr	r1, [pc, #752]	; (6fa0 <main+0x39c>)
    6cae:	468c      	mov	ip, r1
    6cb0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6cb2:	261f      	movs	r6, #31
    6cb4:	4032      	ands	r2, r6
    6cb6:	2501      	movs	r5, #1
    6cb8:	0029      	movs	r1, r5
    6cba:	4091      	lsls	r1, r2
		port_base->OUTSET.reg = pin_mask;
    6cbc:	6199      	str	r1, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6cbe:	aa03      	add	r2, sp, #12
    6cc0:	2380      	movs	r3, #128	; 0x80
    6cc2:	05db      	lsls	r3, r3, #23
    6cc4:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6cc6:	2300      	movs	r3, #0
    6cc8:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    6cca:	21ff      	movs	r1, #255	; 0xff
    6ccc:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    6cce:	2100      	movs	r1, #0
    6cd0:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6cd2:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    6cd4:	2024      	movs	r0, #36	; 0x24
    6cd6:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    6cd8:	3001      	adds	r0, #1
    6cda:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    6cdc:	3001      	adds	r0, #1
    6cde:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    6ce0:	3001      	adds	r0, #1
    6ce2:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    6ce4:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6ce6:	3005      	adds	r0, #5
    6ce8:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    6cea:	3001      	adds	r0, #1
    6cec:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6cee:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    6cf0:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6cf2:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6cf4:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6cf6:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6cf8:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    6cfa:	2313      	movs	r3, #19
    6cfc:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    6cfe:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    6d00:	2380      	movs	r3, #128	; 0x80
    6d02:	035b      	lsls	r3, r3, #13
    6d04:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    6d06:	4ba7      	ldr	r3, [pc, #668]	; (6fa4 <main+0x3a0>)
    6d08:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    6d0a:	4ba7      	ldr	r3, [pc, #668]	; (6fa8 <main+0x3a4>)
    6d0c:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    6d0e:	2301      	movs	r3, #1
    6d10:	425b      	negs	r3, r3
    6d12:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    6d14:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    6d16:	23e1      	movs	r3, #225	; 0xe1
    6d18:	025b      	lsls	r3, r3, #9
    6d1a:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    6d1c:	4ca3      	ldr	r4, [pc, #652]	; (6fac <main+0x3a8>)
    6d1e:	4ba4      	ldr	r3, [pc, #656]	; (6fb0 <main+0x3ac>)
    6d20:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    6d22:	49a4      	ldr	r1, [pc, #656]	; (6fb4 <main+0x3b0>)
    6d24:	4ba4      	ldr	r3, [pc, #656]	; (6fb8 <main+0x3b4>)
    6d26:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6d28:	49a4      	ldr	r1, [pc, #656]	; (6fbc <main+0x3b8>)
    6d2a:	4ba5      	ldr	r3, [pc, #660]	; (6fc0 <main+0x3bc>)
    6d2c:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    6d2e:	49a5      	ldr	r1, [pc, #660]	; (6fc4 <main+0x3c0>)
    6d30:	0020      	movs	r0, r4
    6d32:	4ba5      	ldr	r3, [pc, #660]	; (6fc8 <main+0x3c4>)
    6d34:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    6d36:	4ba5      	ldr	r3, [pc, #660]	; (6fcc <main+0x3c8>)
    6d38:	4698      	mov	r8, r3
    6d3a:	681b      	ldr	r3, [r3, #0]
    6d3c:	6898      	ldr	r0, [r3, #8]
    6d3e:	2100      	movs	r1, #0
    6d40:	4fa3      	ldr	r7, [pc, #652]	; (6fd0 <main+0x3cc>)
    6d42:	47b8      	blx	r7
	setbuf(stdin, NULL);
    6d44:	4643      	mov	r3, r8
    6d46:	681b      	ldr	r3, [r3, #0]
    6d48:	6858      	ldr	r0, [r3, #4]
    6d4a:	2100      	movs	r1, #0
    6d4c:	47b8      	blx	r7
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    6d4e:	2201      	movs	r2, #1
    6d50:	49a0      	ldr	r1, [pc, #640]	; (6fd4 <main+0x3d0>)
    6d52:	0020      	movs	r0, r4
    6d54:	4ba0      	ldr	r3, [pc, #640]	; (6fd8 <main+0x3d4>)
    6d56:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    6d58:	2231      	movs	r2, #49	; 0x31
    6d5a:	5ca3      	ldrb	r3, [r4, r2]
    6d5c:	2102      	movs	r1, #2
    6d5e:	430b      	orrs	r3, r1
    6d60:	54a3      	strb	r3, [r4, r2]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6d62:	6827      	ldr	r7, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6d64:	0038      	movs	r0, r7
    6d66:	4b8a      	ldr	r3, [pc, #552]	; (6f90 <main+0x38c>)
    6d68:	4798      	blx	r3
    6d6a:	4006      	ands	r6, r0
    6d6c:	40b5      	lsls	r5, r6
    6d6e:	4b89      	ldr	r3, [pc, #548]	; (6f94 <main+0x390>)
    6d70:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6d72:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    6d74:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6d76:	2b00      	cmp	r3, #0
    6d78:	d1fc      	bne.n	6d74 <main+0x170>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6d7a:	683b      	ldr	r3, [r7, #0]
    6d7c:	2202      	movs	r2, #2
    6d7e:	4313      	orrs	r3, r2
    6d80:	603b      	str	r3, [r7, #0]

	/* Initialize the UART console. */
	at25dfx_init();
	configure_console();
	printf(STRING_HEADER);
    6d82:	4896      	ldr	r0, [pc, #600]	; (6fdc <main+0x3d8>)
    6d84:	4b96      	ldr	r3, [pc, #600]	; (6fe0 <main+0x3dc>)
    6d86:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    6d88:	4b96      	ldr	r3, [pc, #600]	; (6fe4 <main+0x3e0>)
    6d8a:	4798      	blx	r3
	
	at25dfx_chip_wake(&at25dfx_chip);
    6d8c:	4c82      	ldr	r4, [pc, #520]	; (6f98 <main+0x394>)
    6d8e:	0020      	movs	r0, r4
    6d90:	4b95      	ldr	r3, [pc, #596]	; (6fe8 <main+0x3e4>)
    6d92:	4798      	blx	r3
	
	//Checks if the chip is responsive
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    6d94:	0020      	movs	r0, r4
    6d96:	4b95      	ldr	r3, [pc, #596]	; (6fec <main+0x3e8>)
    6d98:	4798      	blx	r3
    6d9a:	2800      	cmp	r0, #0
    6d9c:	d002      	beq.n	6da4 <main+0x1a0>
		// Handle missing or non-responsive device
		printf("Chip is unresponsive\r\n");
    6d9e:	4894      	ldr	r0, [pc, #592]	; (6ff0 <main+0x3ec>)
    6da0:	4b8f      	ldr	r3, [pc, #572]	; (6fe0 <main+0x3dc>)
    6da2:	4798      	blx	r3
	}
	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    6da4:	2218      	movs	r2, #24
    6da6:	2100      	movs	r1, #0
    6da8:	a81a      	add	r0, sp, #104	; 0x68
    6daa:	4b71      	ldr	r3, [pc, #452]	; (6f70 <main+0x36c>)
    6dac:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback;
    6dae:	4b91      	ldr	r3, [pc, #580]	; (6ff4 <main+0x3f0>)
    6db0:	931a      	str	r3, [sp, #104]	; 0x68
	
	
	ret = m2m_wifi_init(&param);
    6db2:	a81a      	add	r0, sp, #104	; 0x68
    6db4:	4b90      	ldr	r3, [pc, #576]	; (6ff8 <main+0x3f4>)
    6db6:	4798      	blx	r3
    6db8:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    6dba:	d003      	beq.n	6dc4 <main+0x1c0>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    6dbc:	488f      	ldr	r0, [pc, #572]	; (6ffc <main+0x3f8>)
    6dbe:	4b90      	ldr	r3, [pc, #576]	; (7000 <main+0x3fc>)
    6dc0:	4798      	blx	r3
    6dc2:	e7fe      	b.n	6dc2 <main+0x1be>
		while (1) {
		}
	}

	m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
    6dc4:	245f      	movs	r4, #95	; 0x5f
    6dc6:	446c      	add	r4, sp
    6dc8:	0021      	movs	r1, r4
    6dca:	a818      	add	r0, sp, #96	; 0x60
    6dcc:	4b8d      	ldr	r3, [pc, #564]	; (7004 <main+0x400>)
    6dce:	4798      	blx	r3
	if (!u8IsMacAddrValid) {
    6dd0:	7823      	ldrb	r3, [r4, #0]
    6dd2:	2b00      	cmp	r3, #0
    6dd4:	d070      	beq.n	6eb8 <main+0x2b4>
		m2m_wifi_set_mac_address(gau8MacAddr);
	}

	m2m_wifi_get_mac_address(gau8MacAddr);
    6dd6:	4e8c      	ldr	r6, [pc, #560]	; (7008 <main+0x404>)
    6dd8:	0030      	movs	r0, r6
    6dda:	4b8c      	ldr	r3, [pc, #560]	; (700c <main+0x408>)
    6ddc:	4798      	blx	r3

	set_dev_name_to_mac((uint8_t *)gacDeviceName, gau8MacAddr);
    6dde:	4d8c      	ldr	r5, [pc, #560]	; (7010 <main+0x40c>)
    6de0:	0031      	movs	r1, r6
    6de2:	0028      	movs	r0, r5
    6de4:	4f8b      	ldr	r7, [pc, #556]	; (7014 <main+0x410>)
    6de6:	47b8      	blx	r7
	set_dev_name_to_mac((uint8_t *)gstrM2MAPConfig.au8SSID, gau8MacAddr);
    6de8:	4c8b      	ldr	r4, [pc, #556]	; (7018 <main+0x414>)
    6dea:	0031      	movs	r1, r6
    6dec:	0020      	movs	r0, r4
    6dee:	47b8      	blx	r7
	m2m_wifi_set_device_name((uint8_t *)gacDeviceName, (uint8_t)m2m_strlen((uint8_t *)gacDeviceName));
    6df0:	0028      	movs	r0, r5
    6df2:	4b8a      	ldr	r3, [pc, #552]	; (701c <main+0x418>)
    6df4:	4798      	blx	r3
    6df6:	b2c1      	uxtb	r1, r0
    6df8:	0028      	movs	r0, r5
    6dfa:	4b89      	ldr	r3, [pc, #548]	; (7020 <main+0x41c>)
    6dfc:	4798      	blx	r3
	gstrM2MAPConfig.au8DHCPServerIP[0] = 0xC0; /* 192 */
    6dfe:	22c0      	movs	r2, #192	; 0xc0
    6e00:	2341      	movs	r3, #65	; 0x41
    6e02:	54e2      	strb	r2, [r4, r3]
	gstrM2MAPConfig.au8DHCPServerIP[1] = 0xA8; /* 168 */
    6e04:	3a18      	subs	r2, #24
    6e06:	3301      	adds	r3, #1
    6e08:	54e2      	strb	r2, [r4, r3]
	gstrM2MAPConfig.au8DHCPServerIP[2] = 0x01; /* 1 */
    6e0a:	3b41      	subs	r3, #65	; 0x41
    6e0c:	3a65      	subs	r2, #101	; 0x65
    6e0e:	54a3      	strb	r3, [r4, r2]
	gstrM2MAPConfig.au8DHCPServerIP[3] = 0x01; /* 1 */
    6e10:	3201      	adds	r2, #1
    6e12:	54a3      	strb	r3, [r4, r2]

	at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, SSID_read, AT25DFX_BUFFER_SIZE);
    6e14:	4c83      	ldr	r4, [pc, #524]	; (7024 <main+0x420>)
    6e16:	3363      	adds	r3, #99	; 0x63
    6e18:	0022      	movs	r2, r4
    6e1a:	2180      	movs	r1, #128	; 0x80
    6e1c:	0249      	lsls	r1, r1, #9
    6e1e:	485e      	ldr	r0, [pc, #376]	; (6f98 <main+0x394>)
    6e20:	4d81      	ldr	r5, [pc, #516]	; (7028 <main+0x424>)
    6e22:	47a8      	blx	r5
	
	char c;
	c = SSID_read[0];
    6e24:	6823      	ldr	r3, [r4, #0]
	//Basic error detection, which only checks if the first letter of the SSID is a valid char in the alphabet
	if(( c>='a' && c<='z') || (c>='A' && c<='Z')){
    6e26:	2220      	movs	r2, #32
    6e28:	4393      	bics	r3, r2
    6e2a:	3b41      	subs	r3, #65	; 0x41
    6e2c:	b2db      	uxtb	r3, r3
    6e2e:	2b19      	cmp	r3, #25
    6e30:	d846      	bhi.n	6ec0 <main+0x2bc>
		printf("SSID is valid, will continue to connect to wifi\r\n");
    6e32:	487e      	ldr	r0, [pc, #504]	; (702c <main+0x428>)
    6e34:	4b6a      	ldr	r3, [pc, #424]	; (6fe0 <main+0x3dc>)
    6e36:	4798      	blx	r3
		at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, SSID_read, AT25DFX_BUFFER_SIZE);
    6e38:	4c7a      	ldr	r4, [pc, #488]	; (7024 <main+0x420>)
    6e3a:	4f57      	ldr	r7, [pc, #348]	; (6f98 <main+0x394>)
    6e3c:	2364      	movs	r3, #100	; 0x64
    6e3e:	0022      	movs	r2, r4
    6e40:	2180      	movs	r1, #128	; 0x80
    6e42:	0249      	lsls	r1, r1, #9
    6e44:	0038      	movs	r0, r7
    6e46:	4e78      	ldr	r6, [pc, #480]	; (7028 <main+0x424>)
    6e48:	47b0      	blx	r6
		at25dfx_chip_read_buffer(&at25dfx_chip, 0x20000, Password_read, AT25DFX_BUFFER_SIZE);
    6e4a:	4d79      	ldr	r5, [pc, #484]	; (7030 <main+0x42c>)
    6e4c:	2364      	movs	r3, #100	; 0x64
    6e4e:	002a      	movs	r2, r5
    6e50:	2180      	movs	r1, #128	; 0x80
    6e52:	0289      	lsls	r1, r1, #10
    6e54:	0038      	movs	r0, r7
    6e56:	47b0      	blx	r6
		
		printf("SSID  read is %s\r\n", SSID_read);
    6e58:	0021      	movs	r1, r4
    6e5a:	4876      	ldr	r0, [pc, #472]	; (7034 <main+0x430>)
    6e5c:	4e68      	ldr	r6, [pc, #416]	; (7000 <main+0x3fc>)
    6e5e:	47b0      	blx	r6
		printf("Password read is: %s\r\n", Password_read);
    6e60:	0029      	movs	r1, r5
    6e62:	4875      	ldr	r0, [pc, #468]	; (7038 <main+0x434>)
    6e64:	47b0      	blx	r6

		m2m_wifi_connect((char *)SSID_read, strlen(SSID_read), M2M_WIFI_SEC_WPA_PSK, (char *)Password_read, M2M_WIFI_CH_ALL);
    6e66:	0020      	movs	r0, r4
    6e68:	4b74      	ldr	r3, [pc, #464]	; (703c <main+0x438>)
    6e6a:	4798      	blx	r3
    6e6c:	b2c1      	uxtb	r1, r0
    6e6e:	23ff      	movs	r3, #255	; 0xff
    6e70:	9300      	str	r3, [sp, #0]
    6e72:	002b      	movs	r3, r5
    6e74:	2202      	movs	r2, #2
    6e76:	0020      	movs	r0, r4
    6e78:	4c71      	ldr	r4, [pc, #452]	; (7040 <main+0x43c>)
    6e7a:	47a0      	blx	r4
		wifi_connected = 1;
    6e7c:	2201      	movs	r2, #1
    6e7e:	4b71      	ldr	r3, [pc, #452]	; (7044 <main+0x440>)
    6e80:	701a      	strb	r2, [r3, #0]
	}


	struct sockaddr_in addr;
	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
    6e82:	ab13      	add	r3, sp, #76	; 0x4c
    6e84:	2202      	movs	r2, #2
    6e86:	801a      	strh	r2, [r3, #0]
	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
    6e88:	4a6f      	ldr	r2, [pc, #444]	; (7048 <main+0x444>)
    6e8a:	805a      	strh	r2, [r3, #2]
	addr.sin_addr.s_addr = 0;
    6e8c:	2200      	movs	r2, #0
    6e8e:	9214      	str	r2, [sp, #80]	; 0x50
	
	socketInit();
    6e90:	4b6e      	ldr	r3, [pc, #440]	; (704c <main+0x448>)
    6e92:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);
    6e94:	2100      	movs	r1, #0
    6e96:	486e      	ldr	r0, [pc, #440]	; (7050 <main+0x44c>)
    6e98:	4b6e      	ldr	r3, [pc, #440]	; (7054 <main+0x450>)
    6e9a:	4798      	blx	r3
	
	printf("\r\n");
    6e9c:	4d6e      	ldr	r5, [pc, #440]	; (7058 <main+0x454>)
    6e9e:	0028      	movs	r0, r5
    6ea0:	4c4f      	ldr	r4, [pc, #316]	; (6fe0 <main+0x3dc>)
    6ea2:	47a0      	blx	r4
	printf("To connect to a TCP server enter command 'TCP CONNECT {IP ADDRESS} PORT'\r\n");
    6ea4:	486d      	ldr	r0, [pc, #436]	; (705c <main+0x458>)
    6ea6:	47a0      	blx	r4
	printf("To send a command to the TCP server use command 'TCP SEND {COMMAND}'\r\n");
    6ea8:	486d      	ldr	r0, [pc, #436]	; (7060 <main+0x45c>)
    6eaa:	47a0      	blx	r4
	printf("\r\n");
    6eac:	0028      	movs	r0, r5
    6eae:	47a0      	blx	r4

	while (1) {
		m2m_wifi_handle_events(NULL);
    6eb0:	4e6c      	ldr	r6, [pc, #432]	; (7064 <main+0x460>)
		usart_read_job(&cdc_uart_module, &uart_ch_buffer);
    6eb2:	4d6d      	ldr	r5, [pc, #436]	; (7068 <main+0x464>)
    6eb4:	4c3d      	ldr	r4, [pc, #244]	; (6fac <main+0x3a8>)
    6eb6:	e01d      	b.n	6ef4 <main+0x2f0>
		m2m_wifi_set_mac_address(gau8MacAddr);
    6eb8:	4853      	ldr	r0, [pc, #332]	; (7008 <main+0x404>)
    6eba:	4b6c      	ldr	r3, [pc, #432]	; (706c <main+0x468>)
    6ebc:	4798      	blx	r3
    6ebe:	e78a      	b.n	6dd6 <main+0x1d2>
		printf("SSID is not valid, Wifi provisioning will start");
    6ec0:	486b      	ldr	r0, [pc, #428]	; (7070 <main+0x46c>)
    6ec2:	4c4f      	ldr	r4, [pc, #316]	; (7000 <main+0x3fc>)
    6ec4:	47a0      	blx	r4
		m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&gstrM2MAPConfig, (char *)gacHttpProvDomainName, 1);
    6ec6:	4d54      	ldr	r5, [pc, #336]	; (7018 <main+0x414>)
    6ec8:	2201      	movs	r2, #1
    6eca:	496a      	ldr	r1, [pc, #424]	; (7074 <main+0x470>)
    6ecc:	0028      	movs	r0, r5
    6ece:	4b6a      	ldr	r3, [pc, #424]	; (7078 <main+0x474>)
    6ed0:	4798      	blx	r3
		printf("Provision Mode started.\r\nConnect to [%s] via AP[%s] and fill up the page.\r\n", MAIN_HTTP_PROV_SERVER_DOMAIN_NAME, gstrM2MAPConfig.au8SSID);
    6ed2:	002a      	movs	r2, r5
    6ed4:	4969      	ldr	r1, [pc, #420]	; (707c <main+0x478>)
    6ed6:	486a      	ldr	r0, [pc, #424]	; (7080 <main+0x47c>)
    6ed8:	47a0      	blx	r4
    6eda:	e7d2      	b.n	6e82 <main+0x27e>
				if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
					printf("main: failed to create TCP server socket error!\r\n");
					continue;
				}
				/* Bind service*/
				bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
    6edc:	2210      	movs	r2, #16
    6ede:	a913      	add	r1, sp, #76	; 0x4c
    6ee0:	4b68      	ldr	r3, [pc, #416]	; (7084 <main+0x480>)
    6ee2:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    6ee4:	4b2e      	ldr	r3, [pc, #184]	; (6fa0 <main+0x39c>)
    6ee6:	6a1b      	ldr	r3, [r3, #32]
			}
		}
		
		//When button is pressed, reset the system and erase the Serial flash.
		if (port_pin_get_input_level(BUTTON_0_PIN) != BUTTON_0_INACTIVE){
    6ee8:	041b      	lsls	r3, r3, #16
    6eea:	d520      	bpl.n	6f2e <main+0x32a>
		port_base->OUTSET.reg = pin_mask;
    6eec:	2280      	movs	r2, #128	; 0x80
    6eee:	05d2      	lsls	r2, r2, #23
    6ef0:	4b65      	ldr	r3, [pc, #404]	; (7088 <main+0x484>)
    6ef2:	619a      	str	r2, [r3, #24]
		m2m_wifi_handle_events(NULL);
    6ef4:	2000      	movs	r0, #0
    6ef6:	47b0      	blx	r6
		usart_read_job(&cdc_uart_module, &uart_ch_buffer);
    6ef8:	0029      	movs	r1, r5
    6efa:	0020      	movs	r0, r4
    6efc:	4b63      	ldr	r3, [pc, #396]	; (708c <main+0x488>)
    6efe:	4798      	blx	r3
		handle_input_message();
    6f00:	4b63      	ldr	r3, [pc, #396]	; (7090 <main+0x48c>)
    6f02:	4798      	blx	r3
		if (wifi_connected == M2M_WIFI_CONNECTED) {
    6f04:	4b4f      	ldr	r3, [pc, #316]	; (7044 <main+0x440>)
    6f06:	781b      	ldrb	r3, [r3, #0]
    6f08:	2b01      	cmp	r3, #1
    6f0a:	d1eb      	bne.n	6ee4 <main+0x2e0>
			if (tcp_server_socket < 0) {
    6f0c:	4b61      	ldr	r3, [pc, #388]	; (7094 <main+0x490>)
    6f0e:	781b      	ldrb	r3, [r3, #0]
    6f10:	2b7f      	cmp	r3, #127	; 0x7f
    6f12:	d9e7      	bls.n	6ee4 <main+0x2e0>
				if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    6f14:	2200      	movs	r2, #0
    6f16:	2101      	movs	r1, #1
    6f18:	2002      	movs	r0, #2
    6f1a:	4b5f      	ldr	r3, [pc, #380]	; (7098 <main+0x494>)
    6f1c:	4798      	blx	r3
    6f1e:	4b5d      	ldr	r3, [pc, #372]	; (7094 <main+0x490>)
    6f20:	7018      	strb	r0, [r3, #0]
    6f22:	2800      	cmp	r0, #0
    6f24:	dada      	bge.n	6edc <main+0x2d8>
					printf("main: failed to create TCP server socket error!\r\n");
    6f26:	485d      	ldr	r0, [pc, #372]	; (709c <main+0x498>)
    6f28:	4b2d      	ldr	r3, [pc, #180]	; (6fe0 <main+0x3dc>)
    6f2a:	4798      	blx	r3
					continue;
    6f2c:	e7e2      	b.n	6ef4 <main+0x2f0>
		port_base->OUTCLR.reg = pin_mask;
    6f2e:	2280      	movs	r2, #128	; 0x80
    6f30:	05d2      	lsls	r2, r2, #23
    6f32:	4b55      	ldr	r3, [pc, #340]	; (7088 <main+0x484>)
    6f34:	615a      	str	r2, [r3, #20]
			port_pin_set_output_level(LED0_PIN, LED_0_ACTIVE);
			delay_s(1);
    6f36:	20fa      	movs	r0, #250	; 0xfa
    6f38:	0080      	lsls	r0, r0, #2
    6f3a:	4b59      	ldr	r3, [pc, #356]	; (70a0 <main+0x49c>)
    6f3c:	4798      	blx	r3
			
			m2m_wifi_disconnect();
    6f3e:	4b59      	ldr	r3, [pc, #356]	; (70a4 <main+0x4a0>)
    6f40:	4798      	blx	r3
			close(tcp_server_socket);
    6f42:	4c54      	ldr	r4, [pc, #336]	; (7094 <main+0x490>)
    6f44:	2000      	movs	r0, #0
    6f46:	5620      	ldrsb	r0, [r4, r0]
    6f48:	4b57      	ldr	r3, [pc, #348]	; (70a8 <main+0x4a4>)
    6f4a:	4798      	blx	r3
			tcp_server_socket = -1;
    6f4c:	23ff      	movs	r3, #255	; 0xff
    6f4e:	7023      	strb	r3, [r4, #0]
			wifi_connected = 0;
    6f50:	2200      	movs	r2, #0
    6f52:	4b3c      	ldr	r3, [pc, #240]	; (7044 <main+0x440>)
    6f54:	701a      	strb	r2, [r3, #0]
			
			eraseSerialBuffer();
    6f56:	4b55      	ldr	r3, [pc, #340]	; (70ac <main+0x4a8>)
    6f58:	4798      	blx	r3
  __ASM volatile ("dsb");
    6f5a:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    6f5e:	4a54      	ldr	r2, [pc, #336]	; (70b0 <main+0x4ac>)
    6f60:	4b54      	ldr	r3, [pc, #336]	; (70b4 <main+0x4b0>)
    6f62:	60da      	str	r2, [r3, #12]
    6f64:	f3bf 8f4f 	dsb	sy
    6f68:	e7fe      	b.n	6f68 <main+0x364>
    6f6a:	46c0      	nop			; (mov r8, r8)
    6f6c:	00006201 	.word	0x00006201
    6f70:	00007499 	.word	0x00007499
    6f74:	0001d4c0 	.word	0x0001d4c0
    6f78:	00300002 	.word	0x00300002
    6f7c:	00360003 	.word	0x00360003
    6f80:	00370003 	.word	0x00370003
    6f84:	20001924 	.word	0x20001924
    6f88:	42001c00 	.word	0x42001c00
    6f8c:	00004e65 	.word	0x00004e65
    6f90:	00004dd5 	.word	0x00004dd5
    6f94:	e000e100 	.word	0xe000e100
    6f98:	20001918 	.word	0x20001918
    6f9c:	000049fd 	.word	0x000049fd
    6fa0:	41004400 	.word	0x41004400
    6fa4:	00160002 	.word	0x00160002
    6fa8:	00170002 	.word	0x00170002
    6fac:	200002fc 	.word	0x200002fc
    6fb0:	200015f4 	.word	0x200015f4
    6fb4:	00006645 	.word	0x00006645
    6fb8:	200015f0 	.word	0x200015f0
    6fbc:	00006619 	.word	0x00006619
    6fc0:	200015ec 	.word	0x200015ec
    6fc4:	42001400 	.word	0x42001400
    6fc8:	000054a1 	.word	0x000054a1
    6fcc:	200000b8 	.word	0x200000b8
    6fd0:	0000774d 	.word	0x0000774d
    6fd4:	000063e5 	.word	0x000063e5
    6fd8:	000058d1 	.word	0x000058d1
    6fdc:	000099ec 	.word	0x000099ec
    6fe0:	00007715 	.word	0x00007715
    6fe4:	00000ca5 	.word	0x00000ca5
    6fe8:	00000b99 	.word	0x00000b99
    6fec:	00000115 	.word	0x00000115
    6ff0:	00009a74 	.word	0x00009a74
    6ff4:	000064a5 	.word	0x000064a5
    6ff8:	000021c1 	.word	0x000021c1
    6ffc:	00009a8c 	.word	0x00009a8c
    7000:	000075f9 	.word	0x000075f9
    7004:	00002651 	.word	0x00002651
    7008:	2000001c 	.word	0x2000001c
    700c:	00002681 	.word	0x00002681
    7010:	2000000c 	.word	0x2000000c
    7014:	00006435 	.word	0x00006435
    7018:	20000024 	.word	0x20000024
    701c:	000010f1 	.word	0x000010f1
    7020:	000026ad 	.word	0x000026ad
    7024:	20001788 	.word	0x20001788
    7028:	00000229 	.word	0x00000229
    702c:	00009ab4 	.word	0x00009ab4
    7030:	20001b10 	.word	0x20001b10
    7034:	00009ae8 	.word	0x00009ae8
    7038:	00009afc 	.word	0x00009afc
    703c:	000078b9 	.word	0x000078b9
    7040:	000025e1 	.word	0x000025e1
    7044:	20001454 	.word	0x20001454
    7048:	00001309 	.word	0x00001309
    704c:	0000416d 	.word	0x0000416d
    7050:	0000671d 	.word	0x0000671d
    7054:	000041b1 	.word	0x000041b1
    7058:	00009964 	.word	0x00009964
    705c:	00009ba0 	.word	0x00009ba0
    7060:	00009bec 	.word	0x00009bec
    7064:	000021e1 	.word	0x000021e1
    7068:	20001452 	.word	0x20001452
    706c:	0000261d 	.word	0x0000261d
    7070:	00009b14 	.word	0x00009b14
    7074:	00009990 	.word	0x00009990
    7078:	000027a5 	.word	0x000027a5
    707c:	00009b44 	.word	0x00009b44
    7080:	00009b54 	.word	0x00009b54
    7084:	00004349 	.word	0x00004349
    7088:	41004480 	.word	0x41004480
    708c:	000058e9 	.word	0x000058e9
    7090:	00006a6d 	.word	0x00006a6d
    7094:	200000b7 	.word	0x200000b7
    7098:	000041c5 	.word	0x000041c5
    709c:	00009c34 	.word	0x00009c34
    70a0:	00000c65 	.word	0x00000c65
    70a4:	000025fd 	.word	0x000025fd
    70a8:	00004609 	.word	0x00004609
    70ac:	00006bcd 	.word	0x00006bcd
    70b0:	05fa0004 	.word	0x05fa0004
    70b4:	e000ed00 	.word	0xe000ed00

000070b8 <__udivsi3>:
    70b8:	2200      	movs	r2, #0
    70ba:	0843      	lsrs	r3, r0, #1
    70bc:	428b      	cmp	r3, r1
    70be:	d374      	bcc.n	71aa <__udivsi3+0xf2>
    70c0:	0903      	lsrs	r3, r0, #4
    70c2:	428b      	cmp	r3, r1
    70c4:	d35f      	bcc.n	7186 <__udivsi3+0xce>
    70c6:	0a03      	lsrs	r3, r0, #8
    70c8:	428b      	cmp	r3, r1
    70ca:	d344      	bcc.n	7156 <__udivsi3+0x9e>
    70cc:	0b03      	lsrs	r3, r0, #12
    70ce:	428b      	cmp	r3, r1
    70d0:	d328      	bcc.n	7124 <__udivsi3+0x6c>
    70d2:	0c03      	lsrs	r3, r0, #16
    70d4:	428b      	cmp	r3, r1
    70d6:	d30d      	bcc.n	70f4 <__udivsi3+0x3c>
    70d8:	22ff      	movs	r2, #255	; 0xff
    70da:	0209      	lsls	r1, r1, #8
    70dc:	ba12      	rev	r2, r2
    70de:	0c03      	lsrs	r3, r0, #16
    70e0:	428b      	cmp	r3, r1
    70e2:	d302      	bcc.n	70ea <__udivsi3+0x32>
    70e4:	1212      	asrs	r2, r2, #8
    70e6:	0209      	lsls	r1, r1, #8
    70e8:	d065      	beq.n	71b6 <__udivsi3+0xfe>
    70ea:	0b03      	lsrs	r3, r0, #12
    70ec:	428b      	cmp	r3, r1
    70ee:	d319      	bcc.n	7124 <__udivsi3+0x6c>
    70f0:	e000      	b.n	70f4 <__udivsi3+0x3c>
    70f2:	0a09      	lsrs	r1, r1, #8
    70f4:	0bc3      	lsrs	r3, r0, #15
    70f6:	428b      	cmp	r3, r1
    70f8:	d301      	bcc.n	70fe <__udivsi3+0x46>
    70fa:	03cb      	lsls	r3, r1, #15
    70fc:	1ac0      	subs	r0, r0, r3
    70fe:	4152      	adcs	r2, r2
    7100:	0b83      	lsrs	r3, r0, #14
    7102:	428b      	cmp	r3, r1
    7104:	d301      	bcc.n	710a <__udivsi3+0x52>
    7106:	038b      	lsls	r3, r1, #14
    7108:	1ac0      	subs	r0, r0, r3
    710a:	4152      	adcs	r2, r2
    710c:	0b43      	lsrs	r3, r0, #13
    710e:	428b      	cmp	r3, r1
    7110:	d301      	bcc.n	7116 <__udivsi3+0x5e>
    7112:	034b      	lsls	r3, r1, #13
    7114:	1ac0      	subs	r0, r0, r3
    7116:	4152      	adcs	r2, r2
    7118:	0b03      	lsrs	r3, r0, #12
    711a:	428b      	cmp	r3, r1
    711c:	d301      	bcc.n	7122 <__udivsi3+0x6a>
    711e:	030b      	lsls	r3, r1, #12
    7120:	1ac0      	subs	r0, r0, r3
    7122:	4152      	adcs	r2, r2
    7124:	0ac3      	lsrs	r3, r0, #11
    7126:	428b      	cmp	r3, r1
    7128:	d301      	bcc.n	712e <__udivsi3+0x76>
    712a:	02cb      	lsls	r3, r1, #11
    712c:	1ac0      	subs	r0, r0, r3
    712e:	4152      	adcs	r2, r2
    7130:	0a83      	lsrs	r3, r0, #10
    7132:	428b      	cmp	r3, r1
    7134:	d301      	bcc.n	713a <__udivsi3+0x82>
    7136:	028b      	lsls	r3, r1, #10
    7138:	1ac0      	subs	r0, r0, r3
    713a:	4152      	adcs	r2, r2
    713c:	0a43      	lsrs	r3, r0, #9
    713e:	428b      	cmp	r3, r1
    7140:	d301      	bcc.n	7146 <__udivsi3+0x8e>
    7142:	024b      	lsls	r3, r1, #9
    7144:	1ac0      	subs	r0, r0, r3
    7146:	4152      	adcs	r2, r2
    7148:	0a03      	lsrs	r3, r0, #8
    714a:	428b      	cmp	r3, r1
    714c:	d301      	bcc.n	7152 <__udivsi3+0x9a>
    714e:	020b      	lsls	r3, r1, #8
    7150:	1ac0      	subs	r0, r0, r3
    7152:	4152      	adcs	r2, r2
    7154:	d2cd      	bcs.n	70f2 <__udivsi3+0x3a>
    7156:	09c3      	lsrs	r3, r0, #7
    7158:	428b      	cmp	r3, r1
    715a:	d301      	bcc.n	7160 <__udivsi3+0xa8>
    715c:	01cb      	lsls	r3, r1, #7
    715e:	1ac0      	subs	r0, r0, r3
    7160:	4152      	adcs	r2, r2
    7162:	0983      	lsrs	r3, r0, #6
    7164:	428b      	cmp	r3, r1
    7166:	d301      	bcc.n	716c <__udivsi3+0xb4>
    7168:	018b      	lsls	r3, r1, #6
    716a:	1ac0      	subs	r0, r0, r3
    716c:	4152      	adcs	r2, r2
    716e:	0943      	lsrs	r3, r0, #5
    7170:	428b      	cmp	r3, r1
    7172:	d301      	bcc.n	7178 <__udivsi3+0xc0>
    7174:	014b      	lsls	r3, r1, #5
    7176:	1ac0      	subs	r0, r0, r3
    7178:	4152      	adcs	r2, r2
    717a:	0903      	lsrs	r3, r0, #4
    717c:	428b      	cmp	r3, r1
    717e:	d301      	bcc.n	7184 <__udivsi3+0xcc>
    7180:	010b      	lsls	r3, r1, #4
    7182:	1ac0      	subs	r0, r0, r3
    7184:	4152      	adcs	r2, r2
    7186:	08c3      	lsrs	r3, r0, #3
    7188:	428b      	cmp	r3, r1
    718a:	d301      	bcc.n	7190 <__udivsi3+0xd8>
    718c:	00cb      	lsls	r3, r1, #3
    718e:	1ac0      	subs	r0, r0, r3
    7190:	4152      	adcs	r2, r2
    7192:	0883      	lsrs	r3, r0, #2
    7194:	428b      	cmp	r3, r1
    7196:	d301      	bcc.n	719c <__udivsi3+0xe4>
    7198:	008b      	lsls	r3, r1, #2
    719a:	1ac0      	subs	r0, r0, r3
    719c:	4152      	adcs	r2, r2
    719e:	0843      	lsrs	r3, r0, #1
    71a0:	428b      	cmp	r3, r1
    71a2:	d301      	bcc.n	71a8 <__udivsi3+0xf0>
    71a4:	004b      	lsls	r3, r1, #1
    71a6:	1ac0      	subs	r0, r0, r3
    71a8:	4152      	adcs	r2, r2
    71aa:	1a41      	subs	r1, r0, r1
    71ac:	d200      	bcs.n	71b0 <__udivsi3+0xf8>
    71ae:	4601      	mov	r1, r0
    71b0:	4152      	adcs	r2, r2
    71b2:	4610      	mov	r0, r2
    71b4:	4770      	bx	lr
    71b6:	e7ff      	b.n	71b8 <__udivsi3+0x100>
    71b8:	b501      	push	{r0, lr}
    71ba:	2000      	movs	r0, #0
    71bc:	f000 f8f0 	bl	73a0 <__aeabi_idiv0>
    71c0:	bd02      	pop	{r1, pc}
    71c2:	46c0      	nop			; (mov r8, r8)

000071c4 <__aeabi_uidivmod>:
    71c4:	2900      	cmp	r1, #0
    71c6:	d0f7      	beq.n	71b8 <__udivsi3+0x100>
    71c8:	e776      	b.n	70b8 <__udivsi3>
    71ca:	4770      	bx	lr

000071cc <__divsi3>:
    71cc:	4603      	mov	r3, r0
    71ce:	430b      	orrs	r3, r1
    71d0:	d47f      	bmi.n	72d2 <__divsi3+0x106>
    71d2:	2200      	movs	r2, #0
    71d4:	0843      	lsrs	r3, r0, #1
    71d6:	428b      	cmp	r3, r1
    71d8:	d374      	bcc.n	72c4 <__divsi3+0xf8>
    71da:	0903      	lsrs	r3, r0, #4
    71dc:	428b      	cmp	r3, r1
    71de:	d35f      	bcc.n	72a0 <__divsi3+0xd4>
    71e0:	0a03      	lsrs	r3, r0, #8
    71e2:	428b      	cmp	r3, r1
    71e4:	d344      	bcc.n	7270 <__divsi3+0xa4>
    71e6:	0b03      	lsrs	r3, r0, #12
    71e8:	428b      	cmp	r3, r1
    71ea:	d328      	bcc.n	723e <__divsi3+0x72>
    71ec:	0c03      	lsrs	r3, r0, #16
    71ee:	428b      	cmp	r3, r1
    71f0:	d30d      	bcc.n	720e <__divsi3+0x42>
    71f2:	22ff      	movs	r2, #255	; 0xff
    71f4:	0209      	lsls	r1, r1, #8
    71f6:	ba12      	rev	r2, r2
    71f8:	0c03      	lsrs	r3, r0, #16
    71fa:	428b      	cmp	r3, r1
    71fc:	d302      	bcc.n	7204 <__divsi3+0x38>
    71fe:	1212      	asrs	r2, r2, #8
    7200:	0209      	lsls	r1, r1, #8
    7202:	d065      	beq.n	72d0 <__divsi3+0x104>
    7204:	0b03      	lsrs	r3, r0, #12
    7206:	428b      	cmp	r3, r1
    7208:	d319      	bcc.n	723e <__divsi3+0x72>
    720a:	e000      	b.n	720e <__divsi3+0x42>
    720c:	0a09      	lsrs	r1, r1, #8
    720e:	0bc3      	lsrs	r3, r0, #15
    7210:	428b      	cmp	r3, r1
    7212:	d301      	bcc.n	7218 <__divsi3+0x4c>
    7214:	03cb      	lsls	r3, r1, #15
    7216:	1ac0      	subs	r0, r0, r3
    7218:	4152      	adcs	r2, r2
    721a:	0b83      	lsrs	r3, r0, #14
    721c:	428b      	cmp	r3, r1
    721e:	d301      	bcc.n	7224 <__divsi3+0x58>
    7220:	038b      	lsls	r3, r1, #14
    7222:	1ac0      	subs	r0, r0, r3
    7224:	4152      	adcs	r2, r2
    7226:	0b43      	lsrs	r3, r0, #13
    7228:	428b      	cmp	r3, r1
    722a:	d301      	bcc.n	7230 <__divsi3+0x64>
    722c:	034b      	lsls	r3, r1, #13
    722e:	1ac0      	subs	r0, r0, r3
    7230:	4152      	adcs	r2, r2
    7232:	0b03      	lsrs	r3, r0, #12
    7234:	428b      	cmp	r3, r1
    7236:	d301      	bcc.n	723c <__divsi3+0x70>
    7238:	030b      	lsls	r3, r1, #12
    723a:	1ac0      	subs	r0, r0, r3
    723c:	4152      	adcs	r2, r2
    723e:	0ac3      	lsrs	r3, r0, #11
    7240:	428b      	cmp	r3, r1
    7242:	d301      	bcc.n	7248 <__divsi3+0x7c>
    7244:	02cb      	lsls	r3, r1, #11
    7246:	1ac0      	subs	r0, r0, r3
    7248:	4152      	adcs	r2, r2
    724a:	0a83      	lsrs	r3, r0, #10
    724c:	428b      	cmp	r3, r1
    724e:	d301      	bcc.n	7254 <__divsi3+0x88>
    7250:	028b      	lsls	r3, r1, #10
    7252:	1ac0      	subs	r0, r0, r3
    7254:	4152      	adcs	r2, r2
    7256:	0a43      	lsrs	r3, r0, #9
    7258:	428b      	cmp	r3, r1
    725a:	d301      	bcc.n	7260 <__divsi3+0x94>
    725c:	024b      	lsls	r3, r1, #9
    725e:	1ac0      	subs	r0, r0, r3
    7260:	4152      	adcs	r2, r2
    7262:	0a03      	lsrs	r3, r0, #8
    7264:	428b      	cmp	r3, r1
    7266:	d301      	bcc.n	726c <__divsi3+0xa0>
    7268:	020b      	lsls	r3, r1, #8
    726a:	1ac0      	subs	r0, r0, r3
    726c:	4152      	adcs	r2, r2
    726e:	d2cd      	bcs.n	720c <__divsi3+0x40>
    7270:	09c3      	lsrs	r3, r0, #7
    7272:	428b      	cmp	r3, r1
    7274:	d301      	bcc.n	727a <__divsi3+0xae>
    7276:	01cb      	lsls	r3, r1, #7
    7278:	1ac0      	subs	r0, r0, r3
    727a:	4152      	adcs	r2, r2
    727c:	0983      	lsrs	r3, r0, #6
    727e:	428b      	cmp	r3, r1
    7280:	d301      	bcc.n	7286 <__divsi3+0xba>
    7282:	018b      	lsls	r3, r1, #6
    7284:	1ac0      	subs	r0, r0, r3
    7286:	4152      	adcs	r2, r2
    7288:	0943      	lsrs	r3, r0, #5
    728a:	428b      	cmp	r3, r1
    728c:	d301      	bcc.n	7292 <__divsi3+0xc6>
    728e:	014b      	lsls	r3, r1, #5
    7290:	1ac0      	subs	r0, r0, r3
    7292:	4152      	adcs	r2, r2
    7294:	0903      	lsrs	r3, r0, #4
    7296:	428b      	cmp	r3, r1
    7298:	d301      	bcc.n	729e <__divsi3+0xd2>
    729a:	010b      	lsls	r3, r1, #4
    729c:	1ac0      	subs	r0, r0, r3
    729e:	4152      	adcs	r2, r2
    72a0:	08c3      	lsrs	r3, r0, #3
    72a2:	428b      	cmp	r3, r1
    72a4:	d301      	bcc.n	72aa <__divsi3+0xde>
    72a6:	00cb      	lsls	r3, r1, #3
    72a8:	1ac0      	subs	r0, r0, r3
    72aa:	4152      	adcs	r2, r2
    72ac:	0883      	lsrs	r3, r0, #2
    72ae:	428b      	cmp	r3, r1
    72b0:	d301      	bcc.n	72b6 <__divsi3+0xea>
    72b2:	008b      	lsls	r3, r1, #2
    72b4:	1ac0      	subs	r0, r0, r3
    72b6:	4152      	adcs	r2, r2
    72b8:	0843      	lsrs	r3, r0, #1
    72ba:	428b      	cmp	r3, r1
    72bc:	d301      	bcc.n	72c2 <__divsi3+0xf6>
    72be:	004b      	lsls	r3, r1, #1
    72c0:	1ac0      	subs	r0, r0, r3
    72c2:	4152      	adcs	r2, r2
    72c4:	1a41      	subs	r1, r0, r1
    72c6:	d200      	bcs.n	72ca <__divsi3+0xfe>
    72c8:	4601      	mov	r1, r0
    72ca:	4152      	adcs	r2, r2
    72cc:	4610      	mov	r0, r2
    72ce:	4770      	bx	lr
    72d0:	e05d      	b.n	738e <__divsi3+0x1c2>
    72d2:	0fca      	lsrs	r2, r1, #31
    72d4:	d000      	beq.n	72d8 <__divsi3+0x10c>
    72d6:	4249      	negs	r1, r1
    72d8:	1003      	asrs	r3, r0, #32
    72da:	d300      	bcc.n	72de <__divsi3+0x112>
    72dc:	4240      	negs	r0, r0
    72de:	4053      	eors	r3, r2
    72e0:	2200      	movs	r2, #0
    72e2:	469c      	mov	ip, r3
    72e4:	0903      	lsrs	r3, r0, #4
    72e6:	428b      	cmp	r3, r1
    72e8:	d32d      	bcc.n	7346 <__divsi3+0x17a>
    72ea:	0a03      	lsrs	r3, r0, #8
    72ec:	428b      	cmp	r3, r1
    72ee:	d312      	bcc.n	7316 <__divsi3+0x14a>
    72f0:	22fc      	movs	r2, #252	; 0xfc
    72f2:	0189      	lsls	r1, r1, #6
    72f4:	ba12      	rev	r2, r2
    72f6:	0a03      	lsrs	r3, r0, #8
    72f8:	428b      	cmp	r3, r1
    72fa:	d30c      	bcc.n	7316 <__divsi3+0x14a>
    72fc:	0189      	lsls	r1, r1, #6
    72fe:	1192      	asrs	r2, r2, #6
    7300:	428b      	cmp	r3, r1
    7302:	d308      	bcc.n	7316 <__divsi3+0x14a>
    7304:	0189      	lsls	r1, r1, #6
    7306:	1192      	asrs	r2, r2, #6
    7308:	428b      	cmp	r3, r1
    730a:	d304      	bcc.n	7316 <__divsi3+0x14a>
    730c:	0189      	lsls	r1, r1, #6
    730e:	d03a      	beq.n	7386 <__divsi3+0x1ba>
    7310:	1192      	asrs	r2, r2, #6
    7312:	e000      	b.n	7316 <__divsi3+0x14a>
    7314:	0989      	lsrs	r1, r1, #6
    7316:	09c3      	lsrs	r3, r0, #7
    7318:	428b      	cmp	r3, r1
    731a:	d301      	bcc.n	7320 <__divsi3+0x154>
    731c:	01cb      	lsls	r3, r1, #7
    731e:	1ac0      	subs	r0, r0, r3
    7320:	4152      	adcs	r2, r2
    7322:	0983      	lsrs	r3, r0, #6
    7324:	428b      	cmp	r3, r1
    7326:	d301      	bcc.n	732c <__divsi3+0x160>
    7328:	018b      	lsls	r3, r1, #6
    732a:	1ac0      	subs	r0, r0, r3
    732c:	4152      	adcs	r2, r2
    732e:	0943      	lsrs	r3, r0, #5
    7330:	428b      	cmp	r3, r1
    7332:	d301      	bcc.n	7338 <__divsi3+0x16c>
    7334:	014b      	lsls	r3, r1, #5
    7336:	1ac0      	subs	r0, r0, r3
    7338:	4152      	adcs	r2, r2
    733a:	0903      	lsrs	r3, r0, #4
    733c:	428b      	cmp	r3, r1
    733e:	d301      	bcc.n	7344 <__divsi3+0x178>
    7340:	010b      	lsls	r3, r1, #4
    7342:	1ac0      	subs	r0, r0, r3
    7344:	4152      	adcs	r2, r2
    7346:	08c3      	lsrs	r3, r0, #3
    7348:	428b      	cmp	r3, r1
    734a:	d301      	bcc.n	7350 <__divsi3+0x184>
    734c:	00cb      	lsls	r3, r1, #3
    734e:	1ac0      	subs	r0, r0, r3
    7350:	4152      	adcs	r2, r2
    7352:	0883      	lsrs	r3, r0, #2
    7354:	428b      	cmp	r3, r1
    7356:	d301      	bcc.n	735c <__divsi3+0x190>
    7358:	008b      	lsls	r3, r1, #2
    735a:	1ac0      	subs	r0, r0, r3
    735c:	4152      	adcs	r2, r2
    735e:	d2d9      	bcs.n	7314 <__divsi3+0x148>
    7360:	0843      	lsrs	r3, r0, #1
    7362:	428b      	cmp	r3, r1
    7364:	d301      	bcc.n	736a <__divsi3+0x19e>
    7366:	004b      	lsls	r3, r1, #1
    7368:	1ac0      	subs	r0, r0, r3
    736a:	4152      	adcs	r2, r2
    736c:	1a41      	subs	r1, r0, r1
    736e:	d200      	bcs.n	7372 <__divsi3+0x1a6>
    7370:	4601      	mov	r1, r0
    7372:	4663      	mov	r3, ip
    7374:	4152      	adcs	r2, r2
    7376:	105b      	asrs	r3, r3, #1
    7378:	4610      	mov	r0, r2
    737a:	d301      	bcc.n	7380 <__divsi3+0x1b4>
    737c:	4240      	negs	r0, r0
    737e:	2b00      	cmp	r3, #0
    7380:	d500      	bpl.n	7384 <__divsi3+0x1b8>
    7382:	4249      	negs	r1, r1
    7384:	4770      	bx	lr
    7386:	4663      	mov	r3, ip
    7388:	105b      	asrs	r3, r3, #1
    738a:	d300      	bcc.n	738e <__divsi3+0x1c2>
    738c:	4240      	negs	r0, r0
    738e:	b501      	push	{r0, lr}
    7390:	2000      	movs	r0, #0
    7392:	f000 f805 	bl	73a0 <__aeabi_idiv0>
    7396:	bd02      	pop	{r1, pc}

00007398 <__aeabi_idivmod>:
    7398:	2900      	cmp	r1, #0
    739a:	d0f8      	beq.n	738e <__divsi3+0x1c2>
    739c:	e716      	b.n	71cc <__divsi3>
    739e:	4770      	bx	lr

000073a0 <__aeabi_idiv0>:
    73a0:	4770      	bx	lr
    73a2:	46c0      	nop			; (mov r8, r8)

000073a4 <__aeabi_lmul>:
    73a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    73a6:	46ce      	mov	lr, r9
    73a8:	4647      	mov	r7, r8
    73aa:	0415      	lsls	r5, r2, #16
    73ac:	0c2d      	lsrs	r5, r5, #16
    73ae:	002e      	movs	r6, r5
    73b0:	b580      	push	{r7, lr}
    73b2:	0407      	lsls	r7, r0, #16
    73b4:	0c14      	lsrs	r4, r2, #16
    73b6:	0c3f      	lsrs	r7, r7, #16
    73b8:	4699      	mov	r9, r3
    73ba:	0c03      	lsrs	r3, r0, #16
    73bc:	437e      	muls	r6, r7
    73be:	435d      	muls	r5, r3
    73c0:	4367      	muls	r7, r4
    73c2:	4363      	muls	r3, r4
    73c4:	197f      	adds	r7, r7, r5
    73c6:	0c34      	lsrs	r4, r6, #16
    73c8:	19e4      	adds	r4, r4, r7
    73ca:	469c      	mov	ip, r3
    73cc:	42a5      	cmp	r5, r4
    73ce:	d903      	bls.n	73d8 <__aeabi_lmul+0x34>
    73d0:	2380      	movs	r3, #128	; 0x80
    73d2:	025b      	lsls	r3, r3, #9
    73d4:	4698      	mov	r8, r3
    73d6:	44c4      	add	ip, r8
    73d8:	464b      	mov	r3, r9
    73da:	4351      	muls	r1, r2
    73dc:	4343      	muls	r3, r0
    73de:	0436      	lsls	r6, r6, #16
    73e0:	0c36      	lsrs	r6, r6, #16
    73e2:	0c25      	lsrs	r5, r4, #16
    73e4:	0424      	lsls	r4, r4, #16
    73e6:	4465      	add	r5, ip
    73e8:	19a4      	adds	r4, r4, r6
    73ea:	1859      	adds	r1, r3, r1
    73ec:	1949      	adds	r1, r1, r5
    73ee:	0020      	movs	r0, r4
    73f0:	bc0c      	pop	{r2, r3}
    73f2:	4690      	mov	r8, r2
    73f4:	4699      	mov	r9, r3
    73f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000073f8 <atoi>:
    73f8:	b510      	push	{r4, lr}
    73fa:	220a      	movs	r2, #10
    73fc:	2100      	movs	r1, #0
    73fe:	f000 fb4f 	bl	7aa0 <strtol>
    7402:	bd10      	pop	{r4, pc}

00007404 <__libc_init_array>:
    7404:	b570      	push	{r4, r5, r6, lr}
    7406:	2600      	movs	r6, #0
    7408:	4d0c      	ldr	r5, [pc, #48]	; (743c <__libc_init_array+0x38>)
    740a:	4c0d      	ldr	r4, [pc, #52]	; (7440 <__libc_init_array+0x3c>)
    740c:	1b64      	subs	r4, r4, r5
    740e:	10a4      	asrs	r4, r4, #2
    7410:	42a6      	cmp	r6, r4
    7412:	d109      	bne.n	7428 <__libc_init_array+0x24>
    7414:	2600      	movs	r6, #0
    7416:	f002 fde3 	bl	9fe0 <_init>
    741a:	4d0a      	ldr	r5, [pc, #40]	; (7444 <__libc_init_array+0x40>)
    741c:	4c0a      	ldr	r4, [pc, #40]	; (7448 <__libc_init_array+0x44>)
    741e:	1b64      	subs	r4, r4, r5
    7420:	10a4      	asrs	r4, r4, #2
    7422:	42a6      	cmp	r6, r4
    7424:	d105      	bne.n	7432 <__libc_init_array+0x2e>
    7426:	bd70      	pop	{r4, r5, r6, pc}
    7428:	00b3      	lsls	r3, r6, #2
    742a:	58eb      	ldr	r3, [r5, r3]
    742c:	4798      	blx	r3
    742e:	3601      	adds	r6, #1
    7430:	e7ee      	b.n	7410 <__libc_init_array+0xc>
    7432:	00b3      	lsls	r3, r6, #2
    7434:	58eb      	ldr	r3, [r5, r3]
    7436:	4798      	blx	r3
    7438:	3601      	adds	r6, #1
    743a:	e7f2      	b.n	7422 <__libc_init_array+0x1e>
    743c:	00009fec 	.word	0x00009fec
    7440:	00009fec 	.word	0x00009fec
    7444:	00009fec 	.word	0x00009fec
    7448:	00009ff0 	.word	0x00009ff0

0000744c <malloc>:
    744c:	b510      	push	{r4, lr}
    744e:	4b03      	ldr	r3, [pc, #12]	; (745c <malloc+0x10>)
    7450:	0001      	movs	r1, r0
    7452:	6818      	ldr	r0, [r3, #0]
    7454:	f000 f872 	bl	753c <_malloc_r>
    7458:	bd10      	pop	{r4, pc}
    745a:	46c0      	nop			; (mov r8, r8)
    745c:	200000b8 	.word	0x200000b8

00007460 <free>:
    7460:	b510      	push	{r4, lr}
    7462:	4b03      	ldr	r3, [pc, #12]	; (7470 <free+0x10>)
    7464:	0001      	movs	r1, r0
    7466:	6818      	ldr	r0, [r3, #0]
    7468:	f000 f81e 	bl	74a8 <_free_r>
    746c:	bd10      	pop	{r4, pc}
    746e:	46c0      	nop			; (mov r8, r8)
    7470:	200000b8 	.word	0x200000b8

00007474 <memmove>:
    7474:	b510      	push	{r4, lr}
    7476:	4288      	cmp	r0, r1
    7478:	d902      	bls.n	7480 <memmove+0xc>
    747a:	188b      	adds	r3, r1, r2
    747c:	4298      	cmp	r0, r3
    747e:	d308      	bcc.n	7492 <memmove+0x1e>
    7480:	2300      	movs	r3, #0
    7482:	429a      	cmp	r2, r3
    7484:	d007      	beq.n	7496 <memmove+0x22>
    7486:	5ccc      	ldrb	r4, [r1, r3]
    7488:	54c4      	strb	r4, [r0, r3]
    748a:	3301      	adds	r3, #1
    748c:	e7f9      	b.n	7482 <memmove+0xe>
    748e:	5c8b      	ldrb	r3, [r1, r2]
    7490:	5483      	strb	r3, [r0, r2]
    7492:	3a01      	subs	r2, #1
    7494:	d2fb      	bcs.n	748e <memmove+0x1a>
    7496:	bd10      	pop	{r4, pc}

00007498 <memset>:
    7498:	0003      	movs	r3, r0
    749a:	1882      	adds	r2, r0, r2
    749c:	4293      	cmp	r3, r2
    749e:	d100      	bne.n	74a2 <memset+0xa>
    74a0:	4770      	bx	lr
    74a2:	7019      	strb	r1, [r3, #0]
    74a4:	3301      	adds	r3, #1
    74a6:	e7f9      	b.n	749c <memset+0x4>

000074a8 <_free_r>:
    74a8:	b570      	push	{r4, r5, r6, lr}
    74aa:	0005      	movs	r5, r0
    74ac:	2900      	cmp	r1, #0
    74ae:	d010      	beq.n	74d2 <_free_r+0x2a>
    74b0:	1f0c      	subs	r4, r1, #4
    74b2:	6823      	ldr	r3, [r4, #0]
    74b4:	2b00      	cmp	r3, #0
    74b6:	da00      	bge.n	74ba <_free_r+0x12>
    74b8:	18e4      	adds	r4, r4, r3
    74ba:	0028      	movs	r0, r5
    74bc:	f000 fdde 	bl	807c <__malloc_lock>
    74c0:	4a1d      	ldr	r2, [pc, #116]	; (7538 <_free_r+0x90>)
    74c2:	6813      	ldr	r3, [r2, #0]
    74c4:	2b00      	cmp	r3, #0
    74c6:	d105      	bne.n	74d4 <_free_r+0x2c>
    74c8:	6063      	str	r3, [r4, #4]
    74ca:	6014      	str	r4, [r2, #0]
    74cc:	0028      	movs	r0, r5
    74ce:	f000 fdd6 	bl	807e <__malloc_unlock>
    74d2:	bd70      	pop	{r4, r5, r6, pc}
    74d4:	42a3      	cmp	r3, r4
    74d6:	d909      	bls.n	74ec <_free_r+0x44>
    74d8:	6821      	ldr	r1, [r4, #0]
    74da:	1860      	adds	r0, r4, r1
    74dc:	4283      	cmp	r3, r0
    74de:	d1f3      	bne.n	74c8 <_free_r+0x20>
    74e0:	6818      	ldr	r0, [r3, #0]
    74e2:	685b      	ldr	r3, [r3, #4]
    74e4:	1841      	adds	r1, r0, r1
    74e6:	6021      	str	r1, [r4, #0]
    74e8:	e7ee      	b.n	74c8 <_free_r+0x20>
    74ea:	0013      	movs	r3, r2
    74ec:	685a      	ldr	r2, [r3, #4]
    74ee:	2a00      	cmp	r2, #0
    74f0:	d001      	beq.n	74f6 <_free_r+0x4e>
    74f2:	42a2      	cmp	r2, r4
    74f4:	d9f9      	bls.n	74ea <_free_r+0x42>
    74f6:	6819      	ldr	r1, [r3, #0]
    74f8:	1858      	adds	r0, r3, r1
    74fa:	42a0      	cmp	r0, r4
    74fc:	d10b      	bne.n	7516 <_free_r+0x6e>
    74fe:	6820      	ldr	r0, [r4, #0]
    7500:	1809      	adds	r1, r1, r0
    7502:	1858      	adds	r0, r3, r1
    7504:	6019      	str	r1, [r3, #0]
    7506:	4282      	cmp	r2, r0
    7508:	d1e0      	bne.n	74cc <_free_r+0x24>
    750a:	6810      	ldr	r0, [r2, #0]
    750c:	6852      	ldr	r2, [r2, #4]
    750e:	1841      	adds	r1, r0, r1
    7510:	6019      	str	r1, [r3, #0]
    7512:	605a      	str	r2, [r3, #4]
    7514:	e7da      	b.n	74cc <_free_r+0x24>
    7516:	42a0      	cmp	r0, r4
    7518:	d902      	bls.n	7520 <_free_r+0x78>
    751a:	230c      	movs	r3, #12
    751c:	602b      	str	r3, [r5, #0]
    751e:	e7d5      	b.n	74cc <_free_r+0x24>
    7520:	6821      	ldr	r1, [r4, #0]
    7522:	1860      	adds	r0, r4, r1
    7524:	4282      	cmp	r2, r0
    7526:	d103      	bne.n	7530 <_free_r+0x88>
    7528:	6810      	ldr	r0, [r2, #0]
    752a:	6852      	ldr	r2, [r2, #4]
    752c:	1841      	adds	r1, r0, r1
    752e:	6021      	str	r1, [r4, #0]
    7530:	6062      	str	r2, [r4, #4]
    7532:	605c      	str	r4, [r3, #4]
    7534:	e7ca      	b.n	74cc <_free_r+0x24>
    7536:	46c0      	nop			; (mov r8, r8)
    7538:	20001458 	.word	0x20001458

0000753c <_malloc_r>:
    753c:	2303      	movs	r3, #3
    753e:	b570      	push	{r4, r5, r6, lr}
    7540:	1ccd      	adds	r5, r1, #3
    7542:	439d      	bics	r5, r3
    7544:	3508      	adds	r5, #8
    7546:	0006      	movs	r6, r0
    7548:	2d0c      	cmp	r5, #12
    754a:	d21e      	bcs.n	758a <_malloc_r+0x4e>
    754c:	250c      	movs	r5, #12
    754e:	42a9      	cmp	r1, r5
    7550:	d81d      	bhi.n	758e <_malloc_r+0x52>
    7552:	0030      	movs	r0, r6
    7554:	f000 fd92 	bl	807c <__malloc_lock>
    7558:	4a25      	ldr	r2, [pc, #148]	; (75f0 <_malloc_r+0xb4>)
    755a:	6814      	ldr	r4, [r2, #0]
    755c:	0021      	movs	r1, r4
    755e:	2900      	cmp	r1, #0
    7560:	d119      	bne.n	7596 <_malloc_r+0x5a>
    7562:	4c24      	ldr	r4, [pc, #144]	; (75f4 <_malloc_r+0xb8>)
    7564:	6823      	ldr	r3, [r4, #0]
    7566:	2b00      	cmp	r3, #0
    7568:	d103      	bne.n	7572 <_malloc_r+0x36>
    756a:	0030      	movs	r0, r6
    756c:	f000 f8dc 	bl	7728 <_sbrk_r>
    7570:	6020      	str	r0, [r4, #0]
    7572:	0029      	movs	r1, r5
    7574:	0030      	movs	r0, r6
    7576:	f000 f8d7 	bl	7728 <_sbrk_r>
    757a:	1c43      	adds	r3, r0, #1
    757c:	d12c      	bne.n	75d8 <_malloc_r+0x9c>
    757e:	230c      	movs	r3, #12
    7580:	0030      	movs	r0, r6
    7582:	6033      	str	r3, [r6, #0]
    7584:	f000 fd7b 	bl	807e <__malloc_unlock>
    7588:	e003      	b.n	7592 <_malloc_r+0x56>
    758a:	2d00      	cmp	r5, #0
    758c:	dadf      	bge.n	754e <_malloc_r+0x12>
    758e:	230c      	movs	r3, #12
    7590:	6033      	str	r3, [r6, #0]
    7592:	2000      	movs	r0, #0
    7594:	bd70      	pop	{r4, r5, r6, pc}
    7596:	680b      	ldr	r3, [r1, #0]
    7598:	1b5b      	subs	r3, r3, r5
    759a:	d41a      	bmi.n	75d2 <_malloc_r+0x96>
    759c:	2b0b      	cmp	r3, #11
    759e:	d903      	bls.n	75a8 <_malloc_r+0x6c>
    75a0:	600b      	str	r3, [r1, #0]
    75a2:	18cc      	adds	r4, r1, r3
    75a4:	6025      	str	r5, [r4, #0]
    75a6:	e003      	b.n	75b0 <_malloc_r+0x74>
    75a8:	428c      	cmp	r4, r1
    75aa:	d10e      	bne.n	75ca <_malloc_r+0x8e>
    75ac:	6863      	ldr	r3, [r4, #4]
    75ae:	6013      	str	r3, [r2, #0]
    75b0:	0030      	movs	r0, r6
    75b2:	f000 fd64 	bl	807e <__malloc_unlock>
    75b6:	0020      	movs	r0, r4
    75b8:	2207      	movs	r2, #7
    75ba:	300b      	adds	r0, #11
    75bc:	1d23      	adds	r3, r4, #4
    75be:	4390      	bics	r0, r2
    75c0:	1ac3      	subs	r3, r0, r3
    75c2:	d0e7      	beq.n	7594 <_malloc_r+0x58>
    75c4:	425a      	negs	r2, r3
    75c6:	50e2      	str	r2, [r4, r3]
    75c8:	e7e4      	b.n	7594 <_malloc_r+0x58>
    75ca:	684b      	ldr	r3, [r1, #4]
    75cc:	6063      	str	r3, [r4, #4]
    75ce:	000c      	movs	r4, r1
    75d0:	e7ee      	b.n	75b0 <_malloc_r+0x74>
    75d2:	000c      	movs	r4, r1
    75d4:	6849      	ldr	r1, [r1, #4]
    75d6:	e7c2      	b.n	755e <_malloc_r+0x22>
    75d8:	2303      	movs	r3, #3
    75da:	1cc4      	adds	r4, r0, #3
    75dc:	439c      	bics	r4, r3
    75de:	42a0      	cmp	r0, r4
    75e0:	d0e0      	beq.n	75a4 <_malloc_r+0x68>
    75e2:	1a21      	subs	r1, r4, r0
    75e4:	0030      	movs	r0, r6
    75e6:	f000 f89f 	bl	7728 <_sbrk_r>
    75ea:	1c43      	adds	r3, r0, #1
    75ec:	d1da      	bne.n	75a4 <_malloc_r+0x68>
    75ee:	e7c6      	b.n	757e <_malloc_r+0x42>
    75f0:	20001458 	.word	0x20001458
    75f4:	2000145c 	.word	0x2000145c

000075f8 <iprintf>:
    75f8:	b40f      	push	{r0, r1, r2, r3}
    75fa:	4b0b      	ldr	r3, [pc, #44]	; (7628 <iprintf+0x30>)
    75fc:	b513      	push	{r0, r1, r4, lr}
    75fe:	681c      	ldr	r4, [r3, #0]
    7600:	2c00      	cmp	r4, #0
    7602:	d005      	beq.n	7610 <iprintf+0x18>
    7604:	69a3      	ldr	r3, [r4, #24]
    7606:	2b00      	cmp	r3, #0
    7608:	d102      	bne.n	7610 <iprintf+0x18>
    760a:	0020      	movs	r0, r4
    760c:	f000 fc20 	bl	7e50 <__sinit>
    7610:	ab05      	add	r3, sp, #20
    7612:	9a04      	ldr	r2, [sp, #16]
    7614:	68a1      	ldr	r1, [r4, #8]
    7616:	0020      	movs	r0, r4
    7618:	9301      	str	r3, [sp, #4]
    761a:	f000 fd59 	bl	80d0 <_vfiprintf_r>
    761e:	bc16      	pop	{r1, r2, r4}
    7620:	bc08      	pop	{r3}
    7622:	b004      	add	sp, #16
    7624:	4718      	bx	r3
    7626:	46c0      	nop			; (mov r8, r8)
    7628:	200000b8 	.word	0x200000b8

0000762c <putchar>:
    762c:	4b08      	ldr	r3, [pc, #32]	; (7650 <putchar+0x24>)
    762e:	b570      	push	{r4, r5, r6, lr}
    7630:	681c      	ldr	r4, [r3, #0]
    7632:	0005      	movs	r5, r0
    7634:	2c00      	cmp	r4, #0
    7636:	d005      	beq.n	7644 <putchar+0x18>
    7638:	69a3      	ldr	r3, [r4, #24]
    763a:	2b00      	cmp	r3, #0
    763c:	d102      	bne.n	7644 <putchar+0x18>
    763e:	0020      	movs	r0, r4
    7640:	f000 fc06 	bl	7e50 <__sinit>
    7644:	0029      	movs	r1, r5
    7646:	68a2      	ldr	r2, [r4, #8]
    7648:	0020      	movs	r0, r4
    764a:	f000 ffe5 	bl	8618 <_putc_r>
    764e:	bd70      	pop	{r4, r5, r6, pc}
    7650:	200000b8 	.word	0x200000b8

00007654 <_puts_r>:
    7654:	b570      	push	{r4, r5, r6, lr}
    7656:	0005      	movs	r5, r0
    7658:	000e      	movs	r6, r1
    765a:	2800      	cmp	r0, #0
    765c:	d004      	beq.n	7668 <_puts_r+0x14>
    765e:	6983      	ldr	r3, [r0, #24]
    7660:	2b00      	cmp	r3, #0
    7662:	d101      	bne.n	7668 <_puts_r+0x14>
    7664:	f000 fbf4 	bl	7e50 <__sinit>
    7668:	69ab      	ldr	r3, [r5, #24]
    766a:	68ac      	ldr	r4, [r5, #8]
    766c:	2b00      	cmp	r3, #0
    766e:	d102      	bne.n	7676 <_puts_r+0x22>
    7670:	0028      	movs	r0, r5
    7672:	f000 fbed 	bl	7e50 <__sinit>
    7676:	4b24      	ldr	r3, [pc, #144]	; (7708 <_puts_r+0xb4>)
    7678:	429c      	cmp	r4, r3
    767a:	d10f      	bne.n	769c <_puts_r+0x48>
    767c:	686c      	ldr	r4, [r5, #4]
    767e:	89a3      	ldrh	r3, [r4, #12]
    7680:	071b      	lsls	r3, r3, #28
    7682:	d502      	bpl.n	768a <_puts_r+0x36>
    7684:	6923      	ldr	r3, [r4, #16]
    7686:	2b00      	cmp	r3, #0
    7688:	d120      	bne.n	76cc <_puts_r+0x78>
    768a:	0021      	movs	r1, r4
    768c:	0028      	movs	r0, r5
    768e:	f000 fa71 	bl	7b74 <__swsetup_r>
    7692:	2800      	cmp	r0, #0
    7694:	d01a      	beq.n	76cc <_puts_r+0x78>
    7696:	2001      	movs	r0, #1
    7698:	4240      	negs	r0, r0
    769a:	bd70      	pop	{r4, r5, r6, pc}
    769c:	4b1b      	ldr	r3, [pc, #108]	; (770c <_puts_r+0xb8>)
    769e:	429c      	cmp	r4, r3
    76a0:	d101      	bne.n	76a6 <_puts_r+0x52>
    76a2:	68ac      	ldr	r4, [r5, #8]
    76a4:	e7eb      	b.n	767e <_puts_r+0x2a>
    76a6:	4b1a      	ldr	r3, [pc, #104]	; (7710 <_puts_r+0xbc>)
    76a8:	429c      	cmp	r4, r3
    76aa:	d1e8      	bne.n	767e <_puts_r+0x2a>
    76ac:	68ec      	ldr	r4, [r5, #12]
    76ae:	e7e6      	b.n	767e <_puts_r+0x2a>
    76b0:	3b01      	subs	r3, #1
    76b2:	3601      	adds	r6, #1
    76b4:	60a3      	str	r3, [r4, #8]
    76b6:	2b00      	cmp	r3, #0
    76b8:	da04      	bge.n	76c4 <_puts_r+0x70>
    76ba:	69a2      	ldr	r2, [r4, #24]
    76bc:	4293      	cmp	r3, r2
    76be:	db16      	blt.n	76ee <_puts_r+0x9a>
    76c0:	290a      	cmp	r1, #10
    76c2:	d014      	beq.n	76ee <_puts_r+0x9a>
    76c4:	6823      	ldr	r3, [r4, #0]
    76c6:	1c5a      	adds	r2, r3, #1
    76c8:	6022      	str	r2, [r4, #0]
    76ca:	7019      	strb	r1, [r3, #0]
    76cc:	7831      	ldrb	r1, [r6, #0]
    76ce:	68a3      	ldr	r3, [r4, #8]
    76d0:	2900      	cmp	r1, #0
    76d2:	d1ed      	bne.n	76b0 <_puts_r+0x5c>
    76d4:	3b01      	subs	r3, #1
    76d6:	60a3      	str	r3, [r4, #8]
    76d8:	2b00      	cmp	r3, #0
    76da:	da0f      	bge.n	76fc <_puts_r+0xa8>
    76dc:	0022      	movs	r2, r4
    76de:	310a      	adds	r1, #10
    76e0:	0028      	movs	r0, r5
    76e2:	f000 f9f1 	bl	7ac8 <__swbuf_r>
    76e6:	1c43      	adds	r3, r0, #1
    76e8:	d0d5      	beq.n	7696 <_puts_r+0x42>
    76ea:	200a      	movs	r0, #10
    76ec:	e7d5      	b.n	769a <_puts_r+0x46>
    76ee:	0022      	movs	r2, r4
    76f0:	0028      	movs	r0, r5
    76f2:	f000 f9e9 	bl	7ac8 <__swbuf_r>
    76f6:	1c43      	adds	r3, r0, #1
    76f8:	d1e8      	bne.n	76cc <_puts_r+0x78>
    76fa:	e7cc      	b.n	7696 <_puts_r+0x42>
    76fc:	200a      	movs	r0, #10
    76fe:	6823      	ldr	r3, [r4, #0]
    7700:	1c5a      	adds	r2, r3, #1
    7702:	6022      	str	r2, [r4, #0]
    7704:	7018      	strb	r0, [r3, #0]
    7706:	e7c8      	b.n	769a <_puts_r+0x46>
    7708:	00009e60 	.word	0x00009e60
    770c:	00009e80 	.word	0x00009e80
    7710:	00009e40 	.word	0x00009e40

00007714 <puts>:
    7714:	b510      	push	{r4, lr}
    7716:	4b03      	ldr	r3, [pc, #12]	; (7724 <puts+0x10>)
    7718:	0001      	movs	r1, r0
    771a:	6818      	ldr	r0, [r3, #0]
    771c:	f7ff ff9a 	bl	7654 <_puts_r>
    7720:	bd10      	pop	{r4, pc}
    7722:	46c0      	nop			; (mov r8, r8)
    7724:	200000b8 	.word	0x200000b8

00007728 <_sbrk_r>:
    7728:	2300      	movs	r3, #0
    772a:	b570      	push	{r4, r5, r6, lr}
    772c:	4c06      	ldr	r4, [pc, #24]	; (7748 <_sbrk_r+0x20>)
    772e:	0005      	movs	r5, r0
    7730:	0008      	movs	r0, r1
    7732:	6023      	str	r3, [r4, #0]
    7734:	f7fe fe38 	bl	63a8 <_sbrk>
    7738:	1c43      	adds	r3, r0, #1
    773a:	d103      	bne.n	7744 <_sbrk_r+0x1c>
    773c:	6823      	ldr	r3, [r4, #0]
    773e:	2b00      	cmp	r3, #0
    7740:	d000      	beq.n	7744 <_sbrk_r+0x1c>
    7742:	602b      	str	r3, [r5, #0]
    7744:	bd70      	pop	{r4, r5, r6, pc}
    7746:	46c0      	nop			; (mov r8, r8)
    7748:	20001e34 	.word	0x20001e34

0000774c <setbuf>:
    774c:	424a      	negs	r2, r1
    774e:	414a      	adcs	r2, r1
    7750:	2380      	movs	r3, #128	; 0x80
    7752:	b510      	push	{r4, lr}
    7754:	0052      	lsls	r2, r2, #1
    7756:	00db      	lsls	r3, r3, #3
    7758:	f000 f802 	bl	7760 <setvbuf>
    775c:	bd10      	pop	{r4, pc}
	...

00007760 <setvbuf>:
    7760:	b5f0      	push	{r4, r5, r6, r7, lr}
    7762:	001d      	movs	r5, r3
    7764:	4b4f      	ldr	r3, [pc, #316]	; (78a4 <setvbuf+0x144>)
    7766:	b085      	sub	sp, #20
    7768:	681e      	ldr	r6, [r3, #0]
    776a:	0004      	movs	r4, r0
    776c:	000f      	movs	r7, r1
    776e:	9200      	str	r2, [sp, #0]
    7770:	2e00      	cmp	r6, #0
    7772:	d005      	beq.n	7780 <setvbuf+0x20>
    7774:	69b3      	ldr	r3, [r6, #24]
    7776:	2b00      	cmp	r3, #0
    7778:	d102      	bne.n	7780 <setvbuf+0x20>
    777a:	0030      	movs	r0, r6
    777c:	f000 fb68 	bl	7e50 <__sinit>
    7780:	4b49      	ldr	r3, [pc, #292]	; (78a8 <setvbuf+0x148>)
    7782:	429c      	cmp	r4, r3
    7784:	d150      	bne.n	7828 <setvbuf+0xc8>
    7786:	6874      	ldr	r4, [r6, #4]
    7788:	9b00      	ldr	r3, [sp, #0]
    778a:	2b02      	cmp	r3, #2
    778c:	d005      	beq.n	779a <setvbuf+0x3a>
    778e:	2b01      	cmp	r3, #1
    7790:	d900      	bls.n	7794 <setvbuf+0x34>
    7792:	e084      	b.n	789e <setvbuf+0x13e>
    7794:	2d00      	cmp	r5, #0
    7796:	da00      	bge.n	779a <setvbuf+0x3a>
    7798:	e081      	b.n	789e <setvbuf+0x13e>
    779a:	0021      	movs	r1, r4
    779c:	0030      	movs	r0, r6
    779e:	f000 fae9 	bl	7d74 <_fflush_r>
    77a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    77a4:	2900      	cmp	r1, #0
    77a6:	d008      	beq.n	77ba <setvbuf+0x5a>
    77a8:	0023      	movs	r3, r4
    77aa:	3344      	adds	r3, #68	; 0x44
    77ac:	4299      	cmp	r1, r3
    77ae:	d002      	beq.n	77b6 <setvbuf+0x56>
    77b0:	0030      	movs	r0, r6
    77b2:	f7ff fe79 	bl	74a8 <_free_r>
    77b6:	2300      	movs	r3, #0
    77b8:	6363      	str	r3, [r4, #52]	; 0x34
    77ba:	2300      	movs	r3, #0
    77bc:	61a3      	str	r3, [r4, #24]
    77be:	6063      	str	r3, [r4, #4]
    77c0:	89a3      	ldrh	r3, [r4, #12]
    77c2:	061b      	lsls	r3, r3, #24
    77c4:	d503      	bpl.n	77ce <setvbuf+0x6e>
    77c6:	6921      	ldr	r1, [r4, #16]
    77c8:	0030      	movs	r0, r6
    77ca:	f7ff fe6d 	bl	74a8 <_free_r>
    77ce:	89a3      	ldrh	r3, [r4, #12]
    77d0:	4a36      	ldr	r2, [pc, #216]	; (78ac <setvbuf+0x14c>)
    77d2:	4013      	ands	r3, r2
    77d4:	81a3      	strh	r3, [r4, #12]
    77d6:	9b00      	ldr	r3, [sp, #0]
    77d8:	2b02      	cmp	r3, #2
    77da:	d05a      	beq.n	7892 <setvbuf+0x132>
    77dc:	ab03      	add	r3, sp, #12
    77de:	aa02      	add	r2, sp, #8
    77e0:	0021      	movs	r1, r4
    77e2:	0030      	movs	r0, r6
    77e4:	f000 fbcc 	bl	7f80 <__swhatbuf_r>
    77e8:	89a3      	ldrh	r3, [r4, #12]
    77ea:	4318      	orrs	r0, r3
    77ec:	81a0      	strh	r0, [r4, #12]
    77ee:	2d00      	cmp	r5, #0
    77f0:	d124      	bne.n	783c <setvbuf+0xdc>
    77f2:	9d02      	ldr	r5, [sp, #8]
    77f4:	0028      	movs	r0, r5
    77f6:	f7ff fe29 	bl	744c <malloc>
    77fa:	9501      	str	r5, [sp, #4]
    77fc:	1e07      	subs	r7, r0, #0
    77fe:	d142      	bne.n	7886 <setvbuf+0x126>
    7800:	9b02      	ldr	r3, [sp, #8]
    7802:	9301      	str	r3, [sp, #4]
    7804:	42ab      	cmp	r3, r5
    7806:	d139      	bne.n	787c <setvbuf+0x11c>
    7808:	2001      	movs	r0, #1
    780a:	4240      	negs	r0, r0
    780c:	2302      	movs	r3, #2
    780e:	89a2      	ldrh	r2, [r4, #12]
    7810:	4313      	orrs	r3, r2
    7812:	81a3      	strh	r3, [r4, #12]
    7814:	2300      	movs	r3, #0
    7816:	60a3      	str	r3, [r4, #8]
    7818:	0023      	movs	r3, r4
    781a:	3347      	adds	r3, #71	; 0x47
    781c:	6023      	str	r3, [r4, #0]
    781e:	6123      	str	r3, [r4, #16]
    7820:	2301      	movs	r3, #1
    7822:	6163      	str	r3, [r4, #20]
    7824:	b005      	add	sp, #20
    7826:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7828:	4b21      	ldr	r3, [pc, #132]	; (78b0 <setvbuf+0x150>)
    782a:	429c      	cmp	r4, r3
    782c:	d101      	bne.n	7832 <setvbuf+0xd2>
    782e:	68b4      	ldr	r4, [r6, #8]
    7830:	e7aa      	b.n	7788 <setvbuf+0x28>
    7832:	4b20      	ldr	r3, [pc, #128]	; (78b4 <setvbuf+0x154>)
    7834:	429c      	cmp	r4, r3
    7836:	d1a7      	bne.n	7788 <setvbuf+0x28>
    7838:	68f4      	ldr	r4, [r6, #12]
    783a:	e7a5      	b.n	7788 <setvbuf+0x28>
    783c:	2f00      	cmp	r7, #0
    783e:	d0d9      	beq.n	77f4 <setvbuf+0x94>
    7840:	69b3      	ldr	r3, [r6, #24]
    7842:	2b00      	cmp	r3, #0
    7844:	d102      	bne.n	784c <setvbuf+0xec>
    7846:	0030      	movs	r0, r6
    7848:	f000 fb02 	bl	7e50 <__sinit>
    784c:	9b00      	ldr	r3, [sp, #0]
    784e:	2b01      	cmp	r3, #1
    7850:	d103      	bne.n	785a <setvbuf+0xfa>
    7852:	89a3      	ldrh	r3, [r4, #12]
    7854:	9a00      	ldr	r2, [sp, #0]
    7856:	431a      	orrs	r2, r3
    7858:	81a2      	strh	r2, [r4, #12]
    785a:	2008      	movs	r0, #8
    785c:	89a3      	ldrh	r3, [r4, #12]
    785e:	6027      	str	r7, [r4, #0]
    7860:	6127      	str	r7, [r4, #16]
    7862:	6165      	str	r5, [r4, #20]
    7864:	4018      	ands	r0, r3
    7866:	d018      	beq.n	789a <setvbuf+0x13a>
    7868:	2001      	movs	r0, #1
    786a:	4018      	ands	r0, r3
    786c:	2300      	movs	r3, #0
    786e:	4298      	cmp	r0, r3
    7870:	d011      	beq.n	7896 <setvbuf+0x136>
    7872:	426d      	negs	r5, r5
    7874:	60a3      	str	r3, [r4, #8]
    7876:	61a5      	str	r5, [r4, #24]
    7878:	0018      	movs	r0, r3
    787a:	e7d3      	b.n	7824 <setvbuf+0xc4>
    787c:	9801      	ldr	r0, [sp, #4]
    787e:	f7ff fde5 	bl	744c <malloc>
    7882:	1e07      	subs	r7, r0, #0
    7884:	d0c0      	beq.n	7808 <setvbuf+0xa8>
    7886:	2380      	movs	r3, #128	; 0x80
    7888:	89a2      	ldrh	r2, [r4, #12]
    788a:	9d01      	ldr	r5, [sp, #4]
    788c:	4313      	orrs	r3, r2
    788e:	81a3      	strh	r3, [r4, #12]
    7890:	e7d6      	b.n	7840 <setvbuf+0xe0>
    7892:	2000      	movs	r0, #0
    7894:	e7ba      	b.n	780c <setvbuf+0xac>
    7896:	60a5      	str	r5, [r4, #8]
    7898:	e7c4      	b.n	7824 <setvbuf+0xc4>
    789a:	60a0      	str	r0, [r4, #8]
    789c:	e7c2      	b.n	7824 <setvbuf+0xc4>
    789e:	2001      	movs	r0, #1
    78a0:	4240      	negs	r0, r0
    78a2:	e7bf      	b.n	7824 <setvbuf+0xc4>
    78a4:	200000b8 	.word	0x200000b8
    78a8:	00009e60 	.word	0x00009e60
    78ac:	fffff35c 	.word	0xfffff35c
    78b0:	00009e80 	.word	0x00009e80
    78b4:	00009e40 	.word	0x00009e40

000078b8 <strlen>:
    78b8:	2300      	movs	r3, #0
    78ba:	5cc2      	ldrb	r2, [r0, r3]
    78bc:	3301      	adds	r3, #1
    78be:	2a00      	cmp	r2, #0
    78c0:	d1fb      	bne.n	78ba <strlen+0x2>
    78c2:	1e58      	subs	r0, r3, #1
    78c4:	4770      	bx	lr

000078c6 <strncmp>:
    78c6:	2300      	movs	r3, #0
    78c8:	b530      	push	{r4, r5, lr}
    78ca:	429a      	cmp	r2, r3
    78cc:	d00a      	beq.n	78e4 <strncmp+0x1e>
    78ce:	3a01      	subs	r2, #1
    78d0:	5cc4      	ldrb	r4, [r0, r3]
    78d2:	5ccd      	ldrb	r5, [r1, r3]
    78d4:	42ac      	cmp	r4, r5
    78d6:	d104      	bne.n	78e2 <strncmp+0x1c>
    78d8:	429a      	cmp	r2, r3
    78da:	d002      	beq.n	78e2 <strncmp+0x1c>
    78dc:	3301      	adds	r3, #1
    78de:	2c00      	cmp	r4, #0
    78e0:	d1f6      	bne.n	78d0 <strncmp+0xa>
    78e2:	1b63      	subs	r3, r4, r5
    78e4:	0018      	movs	r0, r3
    78e6:	bd30      	pop	{r4, r5, pc}

000078e8 <strtok>:
    78e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78ea:	4b12      	ldr	r3, [pc, #72]	; (7934 <strtok+0x4c>)
    78ec:	0006      	movs	r6, r0
    78ee:	681d      	ldr	r5, [r3, #0]
    78f0:	000f      	movs	r7, r1
    78f2:	6dac      	ldr	r4, [r5, #88]	; 0x58
    78f4:	2c00      	cmp	r4, #0
    78f6:	d116      	bne.n	7926 <strtok+0x3e>
    78f8:	2050      	movs	r0, #80	; 0x50
    78fa:	f7ff fda7 	bl	744c <malloc>
    78fe:	65a8      	str	r0, [r5, #88]	; 0x58
    7900:	6004      	str	r4, [r0, #0]
    7902:	6044      	str	r4, [r0, #4]
    7904:	6084      	str	r4, [r0, #8]
    7906:	60c4      	str	r4, [r0, #12]
    7908:	6104      	str	r4, [r0, #16]
    790a:	6144      	str	r4, [r0, #20]
    790c:	6184      	str	r4, [r0, #24]
    790e:	6284      	str	r4, [r0, #40]	; 0x28
    7910:	62c4      	str	r4, [r0, #44]	; 0x2c
    7912:	6304      	str	r4, [r0, #48]	; 0x30
    7914:	6344      	str	r4, [r0, #52]	; 0x34
    7916:	6384      	str	r4, [r0, #56]	; 0x38
    7918:	63c4      	str	r4, [r0, #60]	; 0x3c
    791a:	6404      	str	r4, [r0, #64]	; 0x40
    791c:	6444      	str	r4, [r0, #68]	; 0x44
    791e:	6484      	str	r4, [r0, #72]	; 0x48
    7920:	64c4      	str	r4, [r0, #76]	; 0x4c
    7922:	7704      	strb	r4, [r0, #28]
    7924:	6244      	str	r4, [r0, #36]	; 0x24
    7926:	6daa      	ldr	r2, [r5, #88]	; 0x58
    7928:	0039      	movs	r1, r7
    792a:	0030      	movs	r0, r6
    792c:	2301      	movs	r3, #1
    792e:	f000 f803 	bl	7938 <__strtok_r>
    7932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7934:	200000b8 	.word	0x200000b8

00007938 <__strtok_r>:
    7938:	b5f0      	push	{r4, r5, r6, r7, lr}
    793a:	2800      	cmp	r0, #0
    793c:	d104      	bne.n	7948 <__strtok_r+0x10>
    793e:	6810      	ldr	r0, [r2, #0]
    7940:	2800      	cmp	r0, #0
    7942:	d101      	bne.n	7948 <__strtok_r+0x10>
    7944:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7946:	0020      	movs	r0, r4
    7948:	000e      	movs	r6, r1
    794a:	7805      	ldrb	r5, [r0, #0]
    794c:	1c44      	adds	r4, r0, #1
    794e:	7837      	ldrb	r7, [r6, #0]
    7950:	2f00      	cmp	r7, #0
    7952:	d104      	bne.n	795e <__strtok_r+0x26>
    7954:	2d00      	cmp	r5, #0
    7956:	d110      	bne.n	797a <__strtok_r+0x42>
    7958:	6015      	str	r5, [r2, #0]
    795a:	0028      	movs	r0, r5
    795c:	e7f2      	b.n	7944 <__strtok_r+0xc>
    795e:	3601      	adds	r6, #1
    7960:	42bd      	cmp	r5, r7
    7962:	d1f4      	bne.n	794e <__strtok_r+0x16>
    7964:	2b00      	cmp	r3, #0
    7966:	d1ee      	bne.n	7946 <__strtok_r+0xe>
    7968:	6014      	str	r4, [r2, #0]
    796a:	7003      	strb	r3, [r0, #0]
    796c:	e7ea      	b.n	7944 <__strtok_r+0xc>
    796e:	0033      	movs	r3, r6
    7970:	e00e      	b.n	7990 <__strtok_r+0x58>
    7972:	3501      	adds	r5, #1
    7974:	001c      	movs	r4, r3
    7976:	2f00      	cmp	r7, #0
    7978:	d102      	bne.n	7980 <__strtok_r+0x48>
    797a:	000d      	movs	r5, r1
    797c:	7826      	ldrb	r6, [r4, #0]
    797e:	1c63      	adds	r3, r4, #1
    7980:	782f      	ldrb	r7, [r5, #0]
    7982:	42be      	cmp	r6, r7
    7984:	d1f5      	bne.n	7972 <__strtok_r+0x3a>
    7986:	2e00      	cmp	r6, #0
    7988:	d0f1      	beq.n	796e <__strtok_r+0x36>
    798a:	2400      	movs	r4, #0
    798c:	1e59      	subs	r1, r3, #1
    798e:	700c      	strb	r4, [r1, #0]
    7990:	6013      	str	r3, [r2, #0]
    7992:	e7d7      	b.n	7944 <__strtok_r+0xc>

00007994 <_strtol_l.isra.0>:
    7994:	b5f0      	push	{r4, r5, r6, r7, lr}
    7996:	001f      	movs	r7, r3
    7998:	000e      	movs	r6, r1
    799a:	b087      	sub	sp, #28
    799c:	9005      	str	r0, [sp, #20]
    799e:	9103      	str	r1, [sp, #12]
    79a0:	9202      	str	r2, [sp, #8]
    79a2:	980c      	ldr	r0, [sp, #48]	; 0x30
    79a4:	7834      	ldrb	r4, [r6, #0]
    79a6:	f000 fae8 	bl	7f7a <__locale_ctype_ptr_l>
    79aa:	2208      	movs	r2, #8
    79ac:	1900      	adds	r0, r0, r4
    79ae:	7843      	ldrb	r3, [r0, #1]
    79b0:	1c75      	adds	r5, r6, #1
    79b2:	4013      	ands	r3, r2
    79b4:	d10c      	bne.n	79d0 <_strtol_l.isra.0+0x3c>
    79b6:	2c2d      	cmp	r4, #45	; 0x2d
    79b8:	d10c      	bne.n	79d4 <_strtol_l.isra.0+0x40>
    79ba:	3301      	adds	r3, #1
    79bc:	782c      	ldrb	r4, [r5, #0]
    79be:	9301      	str	r3, [sp, #4]
    79c0:	1cb5      	adds	r5, r6, #2
    79c2:	2f00      	cmp	r7, #0
    79c4:	d00c      	beq.n	79e0 <_strtol_l.isra.0+0x4c>
    79c6:	2f10      	cmp	r7, #16
    79c8:	d114      	bne.n	79f4 <_strtol_l.isra.0+0x60>
    79ca:	2c30      	cmp	r4, #48	; 0x30
    79cc:	d00a      	beq.n	79e4 <_strtol_l.isra.0+0x50>
    79ce:	e011      	b.n	79f4 <_strtol_l.isra.0+0x60>
    79d0:	002e      	movs	r6, r5
    79d2:	e7e6      	b.n	79a2 <_strtol_l.isra.0+0xe>
    79d4:	9301      	str	r3, [sp, #4]
    79d6:	2c2b      	cmp	r4, #43	; 0x2b
    79d8:	d1f3      	bne.n	79c2 <_strtol_l.isra.0+0x2e>
    79da:	782c      	ldrb	r4, [r5, #0]
    79dc:	1cb5      	adds	r5, r6, #2
    79de:	e7f0      	b.n	79c2 <_strtol_l.isra.0+0x2e>
    79e0:	2c30      	cmp	r4, #48	; 0x30
    79e2:	d12f      	bne.n	7a44 <_strtol_l.isra.0+0xb0>
    79e4:	2220      	movs	r2, #32
    79e6:	782b      	ldrb	r3, [r5, #0]
    79e8:	4393      	bics	r3, r2
    79ea:	2b58      	cmp	r3, #88	; 0x58
    79ec:	d151      	bne.n	7a92 <_strtol_l.isra.0+0xfe>
    79ee:	2710      	movs	r7, #16
    79f0:	786c      	ldrb	r4, [r5, #1]
    79f2:	3502      	adds	r5, #2
    79f4:	9b01      	ldr	r3, [sp, #4]
    79f6:	4a29      	ldr	r2, [pc, #164]	; (7a9c <_strtol_l.isra.0+0x108>)
    79f8:	0039      	movs	r1, r7
    79fa:	189e      	adds	r6, r3, r2
    79fc:	0030      	movs	r0, r6
    79fe:	f7ff fbe1 	bl	71c4 <__aeabi_uidivmod>
    7a02:	0030      	movs	r0, r6
    7a04:	9104      	str	r1, [sp, #16]
    7a06:	0039      	movs	r1, r7
    7a08:	f7ff fb56 	bl	70b8 <__udivsi3>
    7a0c:	2101      	movs	r1, #1
    7a0e:	2300      	movs	r3, #0
    7a10:	4249      	negs	r1, r1
    7a12:	0002      	movs	r2, r0
    7a14:	468c      	mov	ip, r1
    7a16:	0018      	movs	r0, r3
    7a18:	0021      	movs	r1, r4
    7a1a:	3930      	subs	r1, #48	; 0x30
    7a1c:	2909      	cmp	r1, #9
    7a1e:	d813      	bhi.n	7a48 <_strtol_l.isra.0+0xb4>
    7a20:	000c      	movs	r4, r1
    7a22:	42a7      	cmp	r7, r4
    7a24:	dd1c      	ble.n	7a60 <_strtol_l.isra.0+0xcc>
    7a26:	1c59      	adds	r1, r3, #1
    7a28:	d009      	beq.n	7a3e <_strtol_l.isra.0+0xaa>
    7a2a:	4663      	mov	r3, ip
    7a2c:	4282      	cmp	r2, r0
    7a2e:	d306      	bcc.n	7a3e <_strtol_l.isra.0+0xaa>
    7a30:	d102      	bne.n	7a38 <_strtol_l.isra.0+0xa4>
    7a32:	9904      	ldr	r1, [sp, #16]
    7a34:	42a1      	cmp	r1, r4
    7a36:	db02      	blt.n	7a3e <_strtol_l.isra.0+0xaa>
    7a38:	2301      	movs	r3, #1
    7a3a:	4378      	muls	r0, r7
    7a3c:	1820      	adds	r0, r4, r0
    7a3e:	782c      	ldrb	r4, [r5, #0]
    7a40:	3501      	adds	r5, #1
    7a42:	e7e9      	b.n	7a18 <_strtol_l.isra.0+0x84>
    7a44:	270a      	movs	r7, #10
    7a46:	e7d5      	b.n	79f4 <_strtol_l.isra.0+0x60>
    7a48:	0021      	movs	r1, r4
    7a4a:	3941      	subs	r1, #65	; 0x41
    7a4c:	2919      	cmp	r1, #25
    7a4e:	d801      	bhi.n	7a54 <_strtol_l.isra.0+0xc0>
    7a50:	3c37      	subs	r4, #55	; 0x37
    7a52:	e7e6      	b.n	7a22 <_strtol_l.isra.0+0x8e>
    7a54:	0021      	movs	r1, r4
    7a56:	3961      	subs	r1, #97	; 0x61
    7a58:	2919      	cmp	r1, #25
    7a5a:	d801      	bhi.n	7a60 <_strtol_l.isra.0+0xcc>
    7a5c:	3c57      	subs	r4, #87	; 0x57
    7a5e:	e7e0      	b.n	7a22 <_strtol_l.isra.0+0x8e>
    7a60:	1c5a      	adds	r2, r3, #1
    7a62:	d108      	bne.n	7a76 <_strtol_l.isra.0+0xe2>
    7a64:	9a05      	ldr	r2, [sp, #20]
    7a66:	3323      	adds	r3, #35	; 0x23
    7a68:	6013      	str	r3, [r2, #0]
    7a6a:	9b02      	ldr	r3, [sp, #8]
    7a6c:	0030      	movs	r0, r6
    7a6e:	2b00      	cmp	r3, #0
    7a70:	d10b      	bne.n	7a8a <_strtol_l.isra.0+0xf6>
    7a72:	b007      	add	sp, #28
    7a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a76:	9a01      	ldr	r2, [sp, #4]
    7a78:	2a00      	cmp	r2, #0
    7a7a:	d000      	beq.n	7a7e <_strtol_l.isra.0+0xea>
    7a7c:	4240      	negs	r0, r0
    7a7e:	9a02      	ldr	r2, [sp, #8]
    7a80:	2a00      	cmp	r2, #0
    7a82:	d0f6      	beq.n	7a72 <_strtol_l.isra.0+0xde>
    7a84:	9a03      	ldr	r2, [sp, #12]
    7a86:	2b00      	cmp	r3, #0
    7a88:	d000      	beq.n	7a8c <_strtol_l.isra.0+0xf8>
    7a8a:	1e6a      	subs	r2, r5, #1
    7a8c:	9b02      	ldr	r3, [sp, #8]
    7a8e:	601a      	str	r2, [r3, #0]
    7a90:	e7ef      	b.n	7a72 <_strtol_l.isra.0+0xde>
    7a92:	2430      	movs	r4, #48	; 0x30
    7a94:	2f00      	cmp	r7, #0
    7a96:	d1ad      	bne.n	79f4 <_strtol_l.isra.0+0x60>
    7a98:	3708      	adds	r7, #8
    7a9a:	e7ab      	b.n	79f4 <_strtol_l.isra.0+0x60>
    7a9c:	7fffffff 	.word	0x7fffffff

00007aa0 <strtol>:
    7aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7aa2:	0013      	movs	r3, r2
    7aa4:	4a06      	ldr	r2, [pc, #24]	; (7ac0 <strtol+0x20>)
    7aa6:	0005      	movs	r5, r0
    7aa8:	6810      	ldr	r0, [r2, #0]
    7aaa:	6a04      	ldr	r4, [r0, #32]
    7aac:	2c00      	cmp	r4, #0
    7aae:	d100      	bne.n	7ab2 <strtol+0x12>
    7ab0:	4c04      	ldr	r4, [pc, #16]	; (7ac4 <strtol+0x24>)
    7ab2:	000a      	movs	r2, r1
    7ab4:	9400      	str	r4, [sp, #0]
    7ab6:	0029      	movs	r1, r5
    7ab8:	f7ff ff6c 	bl	7994 <_strtol_l.isra.0>
    7abc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7abe:	46c0      	nop			; (mov r8, r8)
    7ac0:	200000b8 	.word	0x200000b8
    7ac4:	2000011c 	.word	0x2000011c

00007ac8 <__swbuf_r>:
    7ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7aca:	0005      	movs	r5, r0
    7acc:	000e      	movs	r6, r1
    7ace:	0014      	movs	r4, r2
    7ad0:	2800      	cmp	r0, #0
    7ad2:	d004      	beq.n	7ade <__swbuf_r+0x16>
    7ad4:	6983      	ldr	r3, [r0, #24]
    7ad6:	2b00      	cmp	r3, #0
    7ad8:	d101      	bne.n	7ade <__swbuf_r+0x16>
    7ada:	f000 f9b9 	bl	7e50 <__sinit>
    7ade:	4b22      	ldr	r3, [pc, #136]	; (7b68 <__swbuf_r+0xa0>)
    7ae0:	429c      	cmp	r4, r3
    7ae2:	d12d      	bne.n	7b40 <__swbuf_r+0x78>
    7ae4:	686c      	ldr	r4, [r5, #4]
    7ae6:	69a3      	ldr	r3, [r4, #24]
    7ae8:	60a3      	str	r3, [r4, #8]
    7aea:	89a3      	ldrh	r3, [r4, #12]
    7aec:	071b      	lsls	r3, r3, #28
    7aee:	d531      	bpl.n	7b54 <__swbuf_r+0x8c>
    7af0:	6923      	ldr	r3, [r4, #16]
    7af2:	2b00      	cmp	r3, #0
    7af4:	d02e      	beq.n	7b54 <__swbuf_r+0x8c>
    7af6:	6823      	ldr	r3, [r4, #0]
    7af8:	6922      	ldr	r2, [r4, #16]
    7afa:	b2f7      	uxtb	r7, r6
    7afc:	1a98      	subs	r0, r3, r2
    7afe:	6963      	ldr	r3, [r4, #20]
    7b00:	b2f6      	uxtb	r6, r6
    7b02:	4298      	cmp	r0, r3
    7b04:	db05      	blt.n	7b12 <__swbuf_r+0x4a>
    7b06:	0021      	movs	r1, r4
    7b08:	0028      	movs	r0, r5
    7b0a:	f000 f933 	bl	7d74 <_fflush_r>
    7b0e:	2800      	cmp	r0, #0
    7b10:	d126      	bne.n	7b60 <__swbuf_r+0x98>
    7b12:	68a3      	ldr	r3, [r4, #8]
    7b14:	3001      	adds	r0, #1
    7b16:	3b01      	subs	r3, #1
    7b18:	60a3      	str	r3, [r4, #8]
    7b1a:	6823      	ldr	r3, [r4, #0]
    7b1c:	1c5a      	adds	r2, r3, #1
    7b1e:	6022      	str	r2, [r4, #0]
    7b20:	701f      	strb	r7, [r3, #0]
    7b22:	6963      	ldr	r3, [r4, #20]
    7b24:	4298      	cmp	r0, r3
    7b26:	d004      	beq.n	7b32 <__swbuf_r+0x6a>
    7b28:	89a3      	ldrh	r3, [r4, #12]
    7b2a:	07db      	lsls	r3, r3, #31
    7b2c:	d51a      	bpl.n	7b64 <__swbuf_r+0x9c>
    7b2e:	2e0a      	cmp	r6, #10
    7b30:	d118      	bne.n	7b64 <__swbuf_r+0x9c>
    7b32:	0021      	movs	r1, r4
    7b34:	0028      	movs	r0, r5
    7b36:	f000 f91d 	bl	7d74 <_fflush_r>
    7b3a:	2800      	cmp	r0, #0
    7b3c:	d012      	beq.n	7b64 <__swbuf_r+0x9c>
    7b3e:	e00f      	b.n	7b60 <__swbuf_r+0x98>
    7b40:	4b0a      	ldr	r3, [pc, #40]	; (7b6c <__swbuf_r+0xa4>)
    7b42:	429c      	cmp	r4, r3
    7b44:	d101      	bne.n	7b4a <__swbuf_r+0x82>
    7b46:	68ac      	ldr	r4, [r5, #8]
    7b48:	e7cd      	b.n	7ae6 <__swbuf_r+0x1e>
    7b4a:	4b09      	ldr	r3, [pc, #36]	; (7b70 <__swbuf_r+0xa8>)
    7b4c:	429c      	cmp	r4, r3
    7b4e:	d1ca      	bne.n	7ae6 <__swbuf_r+0x1e>
    7b50:	68ec      	ldr	r4, [r5, #12]
    7b52:	e7c8      	b.n	7ae6 <__swbuf_r+0x1e>
    7b54:	0021      	movs	r1, r4
    7b56:	0028      	movs	r0, r5
    7b58:	f000 f80c 	bl	7b74 <__swsetup_r>
    7b5c:	2800      	cmp	r0, #0
    7b5e:	d0ca      	beq.n	7af6 <__swbuf_r+0x2e>
    7b60:	2601      	movs	r6, #1
    7b62:	4276      	negs	r6, r6
    7b64:	0030      	movs	r0, r6
    7b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b68:	00009e60 	.word	0x00009e60
    7b6c:	00009e80 	.word	0x00009e80
    7b70:	00009e40 	.word	0x00009e40

00007b74 <__swsetup_r>:
    7b74:	4b36      	ldr	r3, [pc, #216]	; (7c50 <__swsetup_r+0xdc>)
    7b76:	b570      	push	{r4, r5, r6, lr}
    7b78:	681d      	ldr	r5, [r3, #0]
    7b7a:	0006      	movs	r6, r0
    7b7c:	000c      	movs	r4, r1
    7b7e:	2d00      	cmp	r5, #0
    7b80:	d005      	beq.n	7b8e <__swsetup_r+0x1a>
    7b82:	69ab      	ldr	r3, [r5, #24]
    7b84:	2b00      	cmp	r3, #0
    7b86:	d102      	bne.n	7b8e <__swsetup_r+0x1a>
    7b88:	0028      	movs	r0, r5
    7b8a:	f000 f961 	bl	7e50 <__sinit>
    7b8e:	4b31      	ldr	r3, [pc, #196]	; (7c54 <__swsetup_r+0xe0>)
    7b90:	429c      	cmp	r4, r3
    7b92:	d10f      	bne.n	7bb4 <__swsetup_r+0x40>
    7b94:	686c      	ldr	r4, [r5, #4]
    7b96:	230c      	movs	r3, #12
    7b98:	5ee2      	ldrsh	r2, [r4, r3]
    7b9a:	b293      	uxth	r3, r2
    7b9c:	0719      	lsls	r1, r3, #28
    7b9e:	d42d      	bmi.n	7bfc <__swsetup_r+0x88>
    7ba0:	06d9      	lsls	r1, r3, #27
    7ba2:	d411      	bmi.n	7bc8 <__swsetup_r+0x54>
    7ba4:	2309      	movs	r3, #9
    7ba6:	2001      	movs	r0, #1
    7ba8:	6033      	str	r3, [r6, #0]
    7baa:	3337      	adds	r3, #55	; 0x37
    7bac:	4313      	orrs	r3, r2
    7bae:	81a3      	strh	r3, [r4, #12]
    7bb0:	4240      	negs	r0, r0
    7bb2:	bd70      	pop	{r4, r5, r6, pc}
    7bb4:	4b28      	ldr	r3, [pc, #160]	; (7c58 <__swsetup_r+0xe4>)
    7bb6:	429c      	cmp	r4, r3
    7bb8:	d101      	bne.n	7bbe <__swsetup_r+0x4a>
    7bba:	68ac      	ldr	r4, [r5, #8]
    7bbc:	e7eb      	b.n	7b96 <__swsetup_r+0x22>
    7bbe:	4b27      	ldr	r3, [pc, #156]	; (7c5c <__swsetup_r+0xe8>)
    7bc0:	429c      	cmp	r4, r3
    7bc2:	d1e8      	bne.n	7b96 <__swsetup_r+0x22>
    7bc4:	68ec      	ldr	r4, [r5, #12]
    7bc6:	e7e6      	b.n	7b96 <__swsetup_r+0x22>
    7bc8:	075b      	lsls	r3, r3, #29
    7bca:	d513      	bpl.n	7bf4 <__swsetup_r+0x80>
    7bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7bce:	2900      	cmp	r1, #0
    7bd0:	d008      	beq.n	7be4 <__swsetup_r+0x70>
    7bd2:	0023      	movs	r3, r4
    7bd4:	3344      	adds	r3, #68	; 0x44
    7bd6:	4299      	cmp	r1, r3
    7bd8:	d002      	beq.n	7be0 <__swsetup_r+0x6c>
    7bda:	0030      	movs	r0, r6
    7bdc:	f7ff fc64 	bl	74a8 <_free_r>
    7be0:	2300      	movs	r3, #0
    7be2:	6363      	str	r3, [r4, #52]	; 0x34
    7be4:	2224      	movs	r2, #36	; 0x24
    7be6:	89a3      	ldrh	r3, [r4, #12]
    7be8:	4393      	bics	r3, r2
    7bea:	81a3      	strh	r3, [r4, #12]
    7bec:	2300      	movs	r3, #0
    7bee:	6063      	str	r3, [r4, #4]
    7bf0:	6923      	ldr	r3, [r4, #16]
    7bf2:	6023      	str	r3, [r4, #0]
    7bf4:	2308      	movs	r3, #8
    7bf6:	89a2      	ldrh	r2, [r4, #12]
    7bf8:	4313      	orrs	r3, r2
    7bfa:	81a3      	strh	r3, [r4, #12]
    7bfc:	6923      	ldr	r3, [r4, #16]
    7bfe:	2b00      	cmp	r3, #0
    7c00:	d10b      	bne.n	7c1a <__swsetup_r+0xa6>
    7c02:	21a0      	movs	r1, #160	; 0xa0
    7c04:	2280      	movs	r2, #128	; 0x80
    7c06:	89a3      	ldrh	r3, [r4, #12]
    7c08:	0089      	lsls	r1, r1, #2
    7c0a:	0092      	lsls	r2, r2, #2
    7c0c:	400b      	ands	r3, r1
    7c0e:	4293      	cmp	r3, r2
    7c10:	d003      	beq.n	7c1a <__swsetup_r+0xa6>
    7c12:	0021      	movs	r1, r4
    7c14:	0030      	movs	r0, r6
    7c16:	f000 f9db 	bl	7fd0 <__smakebuf_r>
    7c1a:	2301      	movs	r3, #1
    7c1c:	89a2      	ldrh	r2, [r4, #12]
    7c1e:	4013      	ands	r3, r2
    7c20:	d011      	beq.n	7c46 <__swsetup_r+0xd2>
    7c22:	2300      	movs	r3, #0
    7c24:	60a3      	str	r3, [r4, #8]
    7c26:	6963      	ldr	r3, [r4, #20]
    7c28:	425b      	negs	r3, r3
    7c2a:	61a3      	str	r3, [r4, #24]
    7c2c:	2000      	movs	r0, #0
    7c2e:	6923      	ldr	r3, [r4, #16]
    7c30:	4283      	cmp	r3, r0
    7c32:	d1be      	bne.n	7bb2 <__swsetup_r+0x3e>
    7c34:	230c      	movs	r3, #12
    7c36:	5ee2      	ldrsh	r2, [r4, r3]
    7c38:	0613      	lsls	r3, r2, #24
    7c3a:	d5ba      	bpl.n	7bb2 <__swsetup_r+0x3e>
    7c3c:	2340      	movs	r3, #64	; 0x40
    7c3e:	4313      	orrs	r3, r2
    7c40:	81a3      	strh	r3, [r4, #12]
    7c42:	3801      	subs	r0, #1
    7c44:	e7b5      	b.n	7bb2 <__swsetup_r+0x3e>
    7c46:	0792      	lsls	r2, r2, #30
    7c48:	d400      	bmi.n	7c4c <__swsetup_r+0xd8>
    7c4a:	6963      	ldr	r3, [r4, #20]
    7c4c:	60a3      	str	r3, [r4, #8]
    7c4e:	e7ed      	b.n	7c2c <__swsetup_r+0xb8>
    7c50:	200000b8 	.word	0x200000b8
    7c54:	00009e60 	.word	0x00009e60
    7c58:	00009e80 	.word	0x00009e80
    7c5c:	00009e40 	.word	0x00009e40

00007c60 <__sflush_r>:
    7c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7c62:	898a      	ldrh	r2, [r1, #12]
    7c64:	0005      	movs	r5, r0
    7c66:	000c      	movs	r4, r1
    7c68:	0713      	lsls	r3, r2, #28
    7c6a:	d460      	bmi.n	7d2e <__sflush_r+0xce>
    7c6c:	684b      	ldr	r3, [r1, #4]
    7c6e:	2b00      	cmp	r3, #0
    7c70:	dc04      	bgt.n	7c7c <__sflush_r+0x1c>
    7c72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7c74:	2b00      	cmp	r3, #0
    7c76:	dc01      	bgt.n	7c7c <__sflush_r+0x1c>
    7c78:	2000      	movs	r0, #0
    7c7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7c7c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7c7e:	2f00      	cmp	r7, #0
    7c80:	d0fa      	beq.n	7c78 <__sflush_r+0x18>
    7c82:	2300      	movs	r3, #0
    7c84:	682e      	ldr	r6, [r5, #0]
    7c86:	602b      	str	r3, [r5, #0]
    7c88:	2380      	movs	r3, #128	; 0x80
    7c8a:	015b      	lsls	r3, r3, #5
    7c8c:	401a      	ands	r2, r3
    7c8e:	d034      	beq.n	7cfa <__sflush_r+0x9a>
    7c90:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7c92:	89a3      	ldrh	r3, [r4, #12]
    7c94:	075b      	lsls	r3, r3, #29
    7c96:	d506      	bpl.n	7ca6 <__sflush_r+0x46>
    7c98:	6863      	ldr	r3, [r4, #4]
    7c9a:	1ac0      	subs	r0, r0, r3
    7c9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	d001      	beq.n	7ca6 <__sflush_r+0x46>
    7ca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7ca4:	1ac0      	subs	r0, r0, r3
    7ca6:	0002      	movs	r2, r0
    7ca8:	6a21      	ldr	r1, [r4, #32]
    7caa:	2300      	movs	r3, #0
    7cac:	0028      	movs	r0, r5
    7cae:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7cb0:	47b8      	blx	r7
    7cb2:	89a1      	ldrh	r1, [r4, #12]
    7cb4:	1c43      	adds	r3, r0, #1
    7cb6:	d106      	bne.n	7cc6 <__sflush_r+0x66>
    7cb8:	682b      	ldr	r3, [r5, #0]
    7cba:	2b1d      	cmp	r3, #29
    7cbc:	d831      	bhi.n	7d22 <__sflush_r+0xc2>
    7cbe:	4a2c      	ldr	r2, [pc, #176]	; (7d70 <__sflush_r+0x110>)
    7cc0:	40da      	lsrs	r2, r3
    7cc2:	07d3      	lsls	r3, r2, #31
    7cc4:	d52d      	bpl.n	7d22 <__sflush_r+0xc2>
    7cc6:	2300      	movs	r3, #0
    7cc8:	6063      	str	r3, [r4, #4]
    7cca:	6923      	ldr	r3, [r4, #16]
    7ccc:	6023      	str	r3, [r4, #0]
    7cce:	04cb      	lsls	r3, r1, #19
    7cd0:	d505      	bpl.n	7cde <__sflush_r+0x7e>
    7cd2:	1c43      	adds	r3, r0, #1
    7cd4:	d102      	bne.n	7cdc <__sflush_r+0x7c>
    7cd6:	682b      	ldr	r3, [r5, #0]
    7cd8:	2b00      	cmp	r3, #0
    7cda:	d100      	bne.n	7cde <__sflush_r+0x7e>
    7cdc:	6560      	str	r0, [r4, #84]	; 0x54
    7cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7ce0:	602e      	str	r6, [r5, #0]
    7ce2:	2900      	cmp	r1, #0
    7ce4:	d0c8      	beq.n	7c78 <__sflush_r+0x18>
    7ce6:	0023      	movs	r3, r4
    7ce8:	3344      	adds	r3, #68	; 0x44
    7cea:	4299      	cmp	r1, r3
    7cec:	d002      	beq.n	7cf4 <__sflush_r+0x94>
    7cee:	0028      	movs	r0, r5
    7cf0:	f7ff fbda 	bl	74a8 <_free_r>
    7cf4:	2000      	movs	r0, #0
    7cf6:	6360      	str	r0, [r4, #52]	; 0x34
    7cf8:	e7bf      	b.n	7c7a <__sflush_r+0x1a>
    7cfa:	2301      	movs	r3, #1
    7cfc:	6a21      	ldr	r1, [r4, #32]
    7cfe:	0028      	movs	r0, r5
    7d00:	47b8      	blx	r7
    7d02:	1c43      	adds	r3, r0, #1
    7d04:	d1c5      	bne.n	7c92 <__sflush_r+0x32>
    7d06:	682b      	ldr	r3, [r5, #0]
    7d08:	2b00      	cmp	r3, #0
    7d0a:	d0c2      	beq.n	7c92 <__sflush_r+0x32>
    7d0c:	2b1d      	cmp	r3, #29
    7d0e:	d001      	beq.n	7d14 <__sflush_r+0xb4>
    7d10:	2b16      	cmp	r3, #22
    7d12:	d101      	bne.n	7d18 <__sflush_r+0xb8>
    7d14:	602e      	str	r6, [r5, #0]
    7d16:	e7af      	b.n	7c78 <__sflush_r+0x18>
    7d18:	2340      	movs	r3, #64	; 0x40
    7d1a:	89a2      	ldrh	r2, [r4, #12]
    7d1c:	4313      	orrs	r3, r2
    7d1e:	81a3      	strh	r3, [r4, #12]
    7d20:	e7ab      	b.n	7c7a <__sflush_r+0x1a>
    7d22:	2340      	movs	r3, #64	; 0x40
    7d24:	430b      	orrs	r3, r1
    7d26:	2001      	movs	r0, #1
    7d28:	81a3      	strh	r3, [r4, #12]
    7d2a:	4240      	negs	r0, r0
    7d2c:	e7a5      	b.n	7c7a <__sflush_r+0x1a>
    7d2e:	690f      	ldr	r7, [r1, #16]
    7d30:	2f00      	cmp	r7, #0
    7d32:	d0a1      	beq.n	7c78 <__sflush_r+0x18>
    7d34:	680b      	ldr	r3, [r1, #0]
    7d36:	600f      	str	r7, [r1, #0]
    7d38:	1bdb      	subs	r3, r3, r7
    7d3a:	9301      	str	r3, [sp, #4]
    7d3c:	2300      	movs	r3, #0
    7d3e:	0792      	lsls	r2, r2, #30
    7d40:	d100      	bne.n	7d44 <__sflush_r+0xe4>
    7d42:	694b      	ldr	r3, [r1, #20]
    7d44:	60a3      	str	r3, [r4, #8]
    7d46:	9b01      	ldr	r3, [sp, #4]
    7d48:	2b00      	cmp	r3, #0
    7d4a:	dc00      	bgt.n	7d4e <__sflush_r+0xee>
    7d4c:	e794      	b.n	7c78 <__sflush_r+0x18>
    7d4e:	9b01      	ldr	r3, [sp, #4]
    7d50:	003a      	movs	r2, r7
    7d52:	6a21      	ldr	r1, [r4, #32]
    7d54:	0028      	movs	r0, r5
    7d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7d58:	47b0      	blx	r6
    7d5a:	2800      	cmp	r0, #0
    7d5c:	dc03      	bgt.n	7d66 <__sflush_r+0x106>
    7d5e:	2340      	movs	r3, #64	; 0x40
    7d60:	89a2      	ldrh	r2, [r4, #12]
    7d62:	4313      	orrs	r3, r2
    7d64:	e7df      	b.n	7d26 <__sflush_r+0xc6>
    7d66:	9b01      	ldr	r3, [sp, #4]
    7d68:	183f      	adds	r7, r7, r0
    7d6a:	1a1b      	subs	r3, r3, r0
    7d6c:	9301      	str	r3, [sp, #4]
    7d6e:	e7ea      	b.n	7d46 <__sflush_r+0xe6>
    7d70:	20400001 	.word	0x20400001

00007d74 <_fflush_r>:
    7d74:	690b      	ldr	r3, [r1, #16]
    7d76:	b570      	push	{r4, r5, r6, lr}
    7d78:	0005      	movs	r5, r0
    7d7a:	000c      	movs	r4, r1
    7d7c:	2b00      	cmp	r3, #0
    7d7e:	d101      	bne.n	7d84 <_fflush_r+0x10>
    7d80:	2000      	movs	r0, #0
    7d82:	bd70      	pop	{r4, r5, r6, pc}
    7d84:	2800      	cmp	r0, #0
    7d86:	d004      	beq.n	7d92 <_fflush_r+0x1e>
    7d88:	6983      	ldr	r3, [r0, #24]
    7d8a:	2b00      	cmp	r3, #0
    7d8c:	d101      	bne.n	7d92 <_fflush_r+0x1e>
    7d8e:	f000 f85f 	bl	7e50 <__sinit>
    7d92:	4b0b      	ldr	r3, [pc, #44]	; (7dc0 <_fflush_r+0x4c>)
    7d94:	429c      	cmp	r4, r3
    7d96:	d109      	bne.n	7dac <_fflush_r+0x38>
    7d98:	686c      	ldr	r4, [r5, #4]
    7d9a:	220c      	movs	r2, #12
    7d9c:	5ea3      	ldrsh	r3, [r4, r2]
    7d9e:	2b00      	cmp	r3, #0
    7da0:	d0ee      	beq.n	7d80 <_fflush_r+0xc>
    7da2:	0021      	movs	r1, r4
    7da4:	0028      	movs	r0, r5
    7da6:	f7ff ff5b 	bl	7c60 <__sflush_r>
    7daa:	e7ea      	b.n	7d82 <_fflush_r+0xe>
    7dac:	4b05      	ldr	r3, [pc, #20]	; (7dc4 <_fflush_r+0x50>)
    7dae:	429c      	cmp	r4, r3
    7db0:	d101      	bne.n	7db6 <_fflush_r+0x42>
    7db2:	68ac      	ldr	r4, [r5, #8]
    7db4:	e7f1      	b.n	7d9a <_fflush_r+0x26>
    7db6:	4b04      	ldr	r3, [pc, #16]	; (7dc8 <_fflush_r+0x54>)
    7db8:	429c      	cmp	r4, r3
    7dba:	d1ee      	bne.n	7d9a <_fflush_r+0x26>
    7dbc:	68ec      	ldr	r4, [r5, #12]
    7dbe:	e7ec      	b.n	7d9a <_fflush_r+0x26>
    7dc0:	00009e60 	.word	0x00009e60
    7dc4:	00009e80 	.word	0x00009e80
    7dc8:	00009e40 	.word	0x00009e40

00007dcc <_cleanup_r>:
    7dcc:	b510      	push	{r4, lr}
    7dce:	4902      	ldr	r1, [pc, #8]	; (7dd8 <_cleanup_r+0xc>)
    7dd0:	f000 f8b2 	bl	7f38 <_fwalk_reent>
    7dd4:	bd10      	pop	{r4, pc}
    7dd6:	46c0      	nop			; (mov r8, r8)
    7dd8:	00007d75 	.word	0x00007d75

00007ddc <std.isra.0>:
    7ddc:	2300      	movs	r3, #0
    7dde:	b510      	push	{r4, lr}
    7de0:	0004      	movs	r4, r0
    7de2:	6003      	str	r3, [r0, #0]
    7de4:	6043      	str	r3, [r0, #4]
    7de6:	6083      	str	r3, [r0, #8]
    7de8:	8181      	strh	r1, [r0, #12]
    7dea:	6643      	str	r3, [r0, #100]	; 0x64
    7dec:	81c2      	strh	r2, [r0, #14]
    7dee:	6103      	str	r3, [r0, #16]
    7df0:	6143      	str	r3, [r0, #20]
    7df2:	6183      	str	r3, [r0, #24]
    7df4:	0019      	movs	r1, r3
    7df6:	2208      	movs	r2, #8
    7df8:	305c      	adds	r0, #92	; 0x5c
    7dfa:	f7ff fb4d 	bl	7498 <memset>
    7dfe:	4b05      	ldr	r3, [pc, #20]	; (7e14 <std.isra.0+0x38>)
    7e00:	6224      	str	r4, [r4, #32]
    7e02:	6263      	str	r3, [r4, #36]	; 0x24
    7e04:	4b04      	ldr	r3, [pc, #16]	; (7e18 <std.isra.0+0x3c>)
    7e06:	62a3      	str	r3, [r4, #40]	; 0x28
    7e08:	4b04      	ldr	r3, [pc, #16]	; (7e1c <std.isra.0+0x40>)
    7e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
    7e0c:	4b04      	ldr	r3, [pc, #16]	; (7e20 <std.isra.0+0x44>)
    7e0e:	6323      	str	r3, [r4, #48]	; 0x30
    7e10:	bd10      	pop	{r4, pc}
    7e12:	46c0      	nop			; (mov r8, r8)
    7e14:	00008685 	.word	0x00008685
    7e18:	000086ad 	.word	0x000086ad
    7e1c:	000086e5 	.word	0x000086e5
    7e20:	00008711 	.word	0x00008711

00007e24 <__sfmoreglue>:
    7e24:	b570      	push	{r4, r5, r6, lr}
    7e26:	2568      	movs	r5, #104	; 0x68
    7e28:	1e4a      	subs	r2, r1, #1
    7e2a:	4355      	muls	r5, r2
    7e2c:	000e      	movs	r6, r1
    7e2e:	0029      	movs	r1, r5
    7e30:	3174      	adds	r1, #116	; 0x74
    7e32:	f7ff fb83 	bl	753c <_malloc_r>
    7e36:	1e04      	subs	r4, r0, #0
    7e38:	d008      	beq.n	7e4c <__sfmoreglue+0x28>
    7e3a:	2100      	movs	r1, #0
    7e3c:	002a      	movs	r2, r5
    7e3e:	6001      	str	r1, [r0, #0]
    7e40:	6046      	str	r6, [r0, #4]
    7e42:	300c      	adds	r0, #12
    7e44:	60a0      	str	r0, [r4, #8]
    7e46:	3268      	adds	r2, #104	; 0x68
    7e48:	f7ff fb26 	bl	7498 <memset>
    7e4c:	0020      	movs	r0, r4
    7e4e:	bd70      	pop	{r4, r5, r6, pc}

00007e50 <__sinit>:
    7e50:	6983      	ldr	r3, [r0, #24]
    7e52:	b513      	push	{r0, r1, r4, lr}
    7e54:	0004      	movs	r4, r0
    7e56:	2b00      	cmp	r3, #0
    7e58:	d128      	bne.n	7eac <__sinit+0x5c>
    7e5a:	6483      	str	r3, [r0, #72]	; 0x48
    7e5c:	64c3      	str	r3, [r0, #76]	; 0x4c
    7e5e:	6503      	str	r3, [r0, #80]	; 0x50
    7e60:	4b13      	ldr	r3, [pc, #76]	; (7eb0 <__sinit+0x60>)
    7e62:	4a14      	ldr	r2, [pc, #80]	; (7eb4 <__sinit+0x64>)
    7e64:	681b      	ldr	r3, [r3, #0]
    7e66:	6282      	str	r2, [r0, #40]	; 0x28
    7e68:	9301      	str	r3, [sp, #4]
    7e6a:	4298      	cmp	r0, r3
    7e6c:	d101      	bne.n	7e72 <__sinit+0x22>
    7e6e:	2301      	movs	r3, #1
    7e70:	6183      	str	r3, [r0, #24]
    7e72:	0020      	movs	r0, r4
    7e74:	f000 f820 	bl	7eb8 <__sfp>
    7e78:	6060      	str	r0, [r4, #4]
    7e7a:	0020      	movs	r0, r4
    7e7c:	f000 f81c 	bl	7eb8 <__sfp>
    7e80:	60a0      	str	r0, [r4, #8]
    7e82:	0020      	movs	r0, r4
    7e84:	f000 f818 	bl	7eb8 <__sfp>
    7e88:	2200      	movs	r2, #0
    7e8a:	60e0      	str	r0, [r4, #12]
    7e8c:	2104      	movs	r1, #4
    7e8e:	6860      	ldr	r0, [r4, #4]
    7e90:	f7ff ffa4 	bl	7ddc <std.isra.0>
    7e94:	2201      	movs	r2, #1
    7e96:	2109      	movs	r1, #9
    7e98:	68a0      	ldr	r0, [r4, #8]
    7e9a:	f7ff ff9f 	bl	7ddc <std.isra.0>
    7e9e:	2202      	movs	r2, #2
    7ea0:	2112      	movs	r1, #18
    7ea2:	68e0      	ldr	r0, [r4, #12]
    7ea4:	f7ff ff9a 	bl	7ddc <std.isra.0>
    7ea8:	2301      	movs	r3, #1
    7eaa:	61a3      	str	r3, [r4, #24]
    7eac:	bd13      	pop	{r0, r1, r4, pc}
    7eae:	46c0      	nop			; (mov r8, r8)
    7eb0:	00009e3c 	.word	0x00009e3c
    7eb4:	00007dcd 	.word	0x00007dcd

00007eb8 <__sfp>:
    7eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7eba:	4b1e      	ldr	r3, [pc, #120]	; (7f34 <__sfp+0x7c>)
    7ebc:	0007      	movs	r7, r0
    7ebe:	681e      	ldr	r6, [r3, #0]
    7ec0:	69b3      	ldr	r3, [r6, #24]
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	d102      	bne.n	7ecc <__sfp+0x14>
    7ec6:	0030      	movs	r0, r6
    7ec8:	f7ff ffc2 	bl	7e50 <__sinit>
    7ecc:	3648      	adds	r6, #72	; 0x48
    7ece:	68b4      	ldr	r4, [r6, #8]
    7ed0:	6873      	ldr	r3, [r6, #4]
    7ed2:	3b01      	subs	r3, #1
    7ed4:	d504      	bpl.n	7ee0 <__sfp+0x28>
    7ed6:	6833      	ldr	r3, [r6, #0]
    7ed8:	2b00      	cmp	r3, #0
    7eda:	d007      	beq.n	7eec <__sfp+0x34>
    7edc:	6836      	ldr	r6, [r6, #0]
    7ede:	e7f6      	b.n	7ece <__sfp+0x16>
    7ee0:	220c      	movs	r2, #12
    7ee2:	5ea5      	ldrsh	r5, [r4, r2]
    7ee4:	2d00      	cmp	r5, #0
    7ee6:	d00d      	beq.n	7f04 <__sfp+0x4c>
    7ee8:	3468      	adds	r4, #104	; 0x68
    7eea:	e7f2      	b.n	7ed2 <__sfp+0x1a>
    7eec:	2104      	movs	r1, #4
    7eee:	0038      	movs	r0, r7
    7ef0:	f7ff ff98 	bl	7e24 <__sfmoreglue>
    7ef4:	6030      	str	r0, [r6, #0]
    7ef6:	2800      	cmp	r0, #0
    7ef8:	d1f0      	bne.n	7edc <__sfp+0x24>
    7efa:	230c      	movs	r3, #12
    7efc:	0004      	movs	r4, r0
    7efe:	603b      	str	r3, [r7, #0]
    7f00:	0020      	movs	r0, r4
    7f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f04:	2301      	movs	r3, #1
    7f06:	0020      	movs	r0, r4
    7f08:	425b      	negs	r3, r3
    7f0a:	81e3      	strh	r3, [r4, #14]
    7f0c:	3302      	adds	r3, #2
    7f0e:	81a3      	strh	r3, [r4, #12]
    7f10:	6665      	str	r5, [r4, #100]	; 0x64
    7f12:	6025      	str	r5, [r4, #0]
    7f14:	60a5      	str	r5, [r4, #8]
    7f16:	6065      	str	r5, [r4, #4]
    7f18:	6125      	str	r5, [r4, #16]
    7f1a:	6165      	str	r5, [r4, #20]
    7f1c:	61a5      	str	r5, [r4, #24]
    7f1e:	2208      	movs	r2, #8
    7f20:	0029      	movs	r1, r5
    7f22:	305c      	adds	r0, #92	; 0x5c
    7f24:	f7ff fab8 	bl	7498 <memset>
    7f28:	6365      	str	r5, [r4, #52]	; 0x34
    7f2a:	63a5      	str	r5, [r4, #56]	; 0x38
    7f2c:	64a5      	str	r5, [r4, #72]	; 0x48
    7f2e:	64e5      	str	r5, [r4, #76]	; 0x4c
    7f30:	e7e6      	b.n	7f00 <__sfp+0x48>
    7f32:	46c0      	nop			; (mov r8, r8)
    7f34:	00009e3c 	.word	0x00009e3c

00007f38 <_fwalk_reent>:
    7f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7f3a:	0004      	movs	r4, r0
    7f3c:	0007      	movs	r7, r0
    7f3e:	2600      	movs	r6, #0
    7f40:	9101      	str	r1, [sp, #4]
    7f42:	3448      	adds	r4, #72	; 0x48
    7f44:	2c00      	cmp	r4, #0
    7f46:	d101      	bne.n	7f4c <_fwalk_reent+0x14>
    7f48:	0030      	movs	r0, r6
    7f4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7f4c:	6863      	ldr	r3, [r4, #4]
    7f4e:	68a5      	ldr	r5, [r4, #8]
    7f50:	9300      	str	r3, [sp, #0]
    7f52:	9b00      	ldr	r3, [sp, #0]
    7f54:	3b01      	subs	r3, #1
    7f56:	9300      	str	r3, [sp, #0]
    7f58:	d501      	bpl.n	7f5e <_fwalk_reent+0x26>
    7f5a:	6824      	ldr	r4, [r4, #0]
    7f5c:	e7f2      	b.n	7f44 <_fwalk_reent+0xc>
    7f5e:	89ab      	ldrh	r3, [r5, #12]
    7f60:	2b01      	cmp	r3, #1
    7f62:	d908      	bls.n	7f76 <_fwalk_reent+0x3e>
    7f64:	220e      	movs	r2, #14
    7f66:	5eab      	ldrsh	r3, [r5, r2]
    7f68:	3301      	adds	r3, #1
    7f6a:	d004      	beq.n	7f76 <_fwalk_reent+0x3e>
    7f6c:	0029      	movs	r1, r5
    7f6e:	0038      	movs	r0, r7
    7f70:	9b01      	ldr	r3, [sp, #4]
    7f72:	4798      	blx	r3
    7f74:	4306      	orrs	r6, r0
    7f76:	3568      	adds	r5, #104	; 0x68
    7f78:	e7eb      	b.n	7f52 <_fwalk_reent+0x1a>

00007f7a <__locale_ctype_ptr_l>:
    7f7a:	30ec      	adds	r0, #236	; 0xec
    7f7c:	6800      	ldr	r0, [r0, #0]
    7f7e:	4770      	bx	lr

00007f80 <__swhatbuf_r>:
    7f80:	b570      	push	{r4, r5, r6, lr}
    7f82:	000e      	movs	r6, r1
    7f84:	001d      	movs	r5, r3
    7f86:	230e      	movs	r3, #14
    7f88:	5ec9      	ldrsh	r1, [r1, r3]
    7f8a:	b090      	sub	sp, #64	; 0x40
    7f8c:	0014      	movs	r4, r2
    7f8e:	2900      	cmp	r1, #0
    7f90:	da07      	bge.n	7fa2 <__swhatbuf_r+0x22>
    7f92:	2300      	movs	r3, #0
    7f94:	602b      	str	r3, [r5, #0]
    7f96:	89b3      	ldrh	r3, [r6, #12]
    7f98:	061b      	lsls	r3, r3, #24
    7f9a:	d411      	bmi.n	7fc0 <__swhatbuf_r+0x40>
    7f9c:	2380      	movs	r3, #128	; 0x80
    7f9e:	00db      	lsls	r3, r3, #3
    7fa0:	e00f      	b.n	7fc2 <__swhatbuf_r+0x42>
    7fa2:	aa01      	add	r2, sp, #4
    7fa4:	f000 fbec 	bl	8780 <_fstat_r>
    7fa8:	2800      	cmp	r0, #0
    7faa:	dbf2      	blt.n	7f92 <__swhatbuf_r+0x12>
    7fac:	22f0      	movs	r2, #240	; 0xf0
    7fae:	9b02      	ldr	r3, [sp, #8]
    7fb0:	0212      	lsls	r2, r2, #8
    7fb2:	4013      	ands	r3, r2
    7fb4:	4a05      	ldr	r2, [pc, #20]	; (7fcc <__swhatbuf_r+0x4c>)
    7fb6:	189b      	adds	r3, r3, r2
    7fb8:	425a      	negs	r2, r3
    7fba:	4153      	adcs	r3, r2
    7fbc:	602b      	str	r3, [r5, #0]
    7fbe:	e7ed      	b.n	7f9c <__swhatbuf_r+0x1c>
    7fc0:	2340      	movs	r3, #64	; 0x40
    7fc2:	2000      	movs	r0, #0
    7fc4:	6023      	str	r3, [r4, #0]
    7fc6:	b010      	add	sp, #64	; 0x40
    7fc8:	bd70      	pop	{r4, r5, r6, pc}
    7fca:	46c0      	nop			; (mov r8, r8)
    7fcc:	ffffe000 	.word	0xffffe000

00007fd0 <__smakebuf_r>:
    7fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7fd2:	2602      	movs	r6, #2
    7fd4:	898b      	ldrh	r3, [r1, #12]
    7fd6:	0005      	movs	r5, r0
    7fd8:	000c      	movs	r4, r1
    7fda:	4233      	tst	r3, r6
    7fdc:	d006      	beq.n	7fec <__smakebuf_r+0x1c>
    7fde:	0023      	movs	r3, r4
    7fe0:	3347      	adds	r3, #71	; 0x47
    7fe2:	6023      	str	r3, [r4, #0]
    7fe4:	6123      	str	r3, [r4, #16]
    7fe6:	2301      	movs	r3, #1
    7fe8:	6163      	str	r3, [r4, #20]
    7fea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7fec:	ab01      	add	r3, sp, #4
    7fee:	466a      	mov	r2, sp
    7ff0:	f7ff ffc6 	bl	7f80 <__swhatbuf_r>
    7ff4:	9900      	ldr	r1, [sp, #0]
    7ff6:	0007      	movs	r7, r0
    7ff8:	0028      	movs	r0, r5
    7ffa:	f7ff fa9f 	bl	753c <_malloc_r>
    7ffe:	2800      	cmp	r0, #0
    8000:	d108      	bne.n	8014 <__smakebuf_r+0x44>
    8002:	220c      	movs	r2, #12
    8004:	5ea3      	ldrsh	r3, [r4, r2]
    8006:	059a      	lsls	r2, r3, #22
    8008:	d4ef      	bmi.n	7fea <__smakebuf_r+0x1a>
    800a:	2203      	movs	r2, #3
    800c:	4393      	bics	r3, r2
    800e:	431e      	orrs	r6, r3
    8010:	81a6      	strh	r6, [r4, #12]
    8012:	e7e4      	b.n	7fde <__smakebuf_r+0xe>
    8014:	4b0f      	ldr	r3, [pc, #60]	; (8054 <__smakebuf_r+0x84>)
    8016:	62ab      	str	r3, [r5, #40]	; 0x28
    8018:	2380      	movs	r3, #128	; 0x80
    801a:	89a2      	ldrh	r2, [r4, #12]
    801c:	6020      	str	r0, [r4, #0]
    801e:	4313      	orrs	r3, r2
    8020:	81a3      	strh	r3, [r4, #12]
    8022:	9b00      	ldr	r3, [sp, #0]
    8024:	6120      	str	r0, [r4, #16]
    8026:	6163      	str	r3, [r4, #20]
    8028:	9b01      	ldr	r3, [sp, #4]
    802a:	2b00      	cmp	r3, #0
    802c:	d00d      	beq.n	804a <__smakebuf_r+0x7a>
    802e:	230e      	movs	r3, #14
    8030:	5ee1      	ldrsh	r1, [r4, r3]
    8032:	0028      	movs	r0, r5
    8034:	f000 fbb6 	bl	87a4 <_isatty_r>
    8038:	2800      	cmp	r0, #0
    803a:	d006      	beq.n	804a <__smakebuf_r+0x7a>
    803c:	2203      	movs	r2, #3
    803e:	89a3      	ldrh	r3, [r4, #12]
    8040:	4393      	bics	r3, r2
    8042:	001a      	movs	r2, r3
    8044:	2301      	movs	r3, #1
    8046:	4313      	orrs	r3, r2
    8048:	81a3      	strh	r3, [r4, #12]
    804a:	89a0      	ldrh	r0, [r4, #12]
    804c:	4338      	orrs	r0, r7
    804e:	81a0      	strh	r0, [r4, #12]
    8050:	e7cb      	b.n	7fea <__smakebuf_r+0x1a>
    8052:	46c0      	nop			; (mov r8, r8)
    8054:	00007dcd 	.word	0x00007dcd

00008058 <__ascii_mbtowc>:
    8058:	b082      	sub	sp, #8
    805a:	2900      	cmp	r1, #0
    805c:	d100      	bne.n	8060 <__ascii_mbtowc+0x8>
    805e:	a901      	add	r1, sp, #4
    8060:	1e10      	subs	r0, r2, #0
    8062:	d006      	beq.n	8072 <__ascii_mbtowc+0x1a>
    8064:	2b00      	cmp	r3, #0
    8066:	d006      	beq.n	8076 <__ascii_mbtowc+0x1e>
    8068:	7813      	ldrb	r3, [r2, #0]
    806a:	600b      	str	r3, [r1, #0]
    806c:	7810      	ldrb	r0, [r2, #0]
    806e:	1e43      	subs	r3, r0, #1
    8070:	4198      	sbcs	r0, r3
    8072:	b002      	add	sp, #8
    8074:	4770      	bx	lr
    8076:	2002      	movs	r0, #2
    8078:	4240      	negs	r0, r0
    807a:	e7fa      	b.n	8072 <__ascii_mbtowc+0x1a>

0000807c <__malloc_lock>:
    807c:	4770      	bx	lr

0000807e <__malloc_unlock>:
    807e:	4770      	bx	lr

00008080 <__sfputc_r>:
    8080:	6893      	ldr	r3, [r2, #8]
    8082:	b510      	push	{r4, lr}
    8084:	3b01      	subs	r3, #1
    8086:	6093      	str	r3, [r2, #8]
    8088:	2b00      	cmp	r3, #0
    808a:	da05      	bge.n	8098 <__sfputc_r+0x18>
    808c:	6994      	ldr	r4, [r2, #24]
    808e:	42a3      	cmp	r3, r4
    8090:	db08      	blt.n	80a4 <__sfputc_r+0x24>
    8092:	b2cb      	uxtb	r3, r1
    8094:	2b0a      	cmp	r3, #10
    8096:	d005      	beq.n	80a4 <__sfputc_r+0x24>
    8098:	6813      	ldr	r3, [r2, #0]
    809a:	1c58      	adds	r0, r3, #1
    809c:	6010      	str	r0, [r2, #0]
    809e:	7019      	strb	r1, [r3, #0]
    80a0:	b2c8      	uxtb	r0, r1
    80a2:	bd10      	pop	{r4, pc}
    80a4:	f7ff fd10 	bl	7ac8 <__swbuf_r>
    80a8:	e7fb      	b.n	80a2 <__sfputc_r+0x22>

000080aa <__sfputs_r>:
    80aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80ac:	0006      	movs	r6, r0
    80ae:	000f      	movs	r7, r1
    80b0:	0014      	movs	r4, r2
    80b2:	18d5      	adds	r5, r2, r3
    80b4:	42ac      	cmp	r4, r5
    80b6:	d101      	bne.n	80bc <__sfputs_r+0x12>
    80b8:	2000      	movs	r0, #0
    80ba:	e007      	b.n	80cc <__sfputs_r+0x22>
    80bc:	7821      	ldrb	r1, [r4, #0]
    80be:	003a      	movs	r2, r7
    80c0:	0030      	movs	r0, r6
    80c2:	f7ff ffdd 	bl	8080 <__sfputc_r>
    80c6:	3401      	adds	r4, #1
    80c8:	1c43      	adds	r3, r0, #1
    80ca:	d1f3      	bne.n	80b4 <__sfputs_r+0xa>
    80cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000080d0 <_vfiprintf_r>:
    80d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    80d2:	b09f      	sub	sp, #124	; 0x7c
    80d4:	0006      	movs	r6, r0
    80d6:	000f      	movs	r7, r1
    80d8:	0014      	movs	r4, r2
    80da:	9305      	str	r3, [sp, #20]
    80dc:	2800      	cmp	r0, #0
    80de:	d004      	beq.n	80ea <_vfiprintf_r+0x1a>
    80e0:	6983      	ldr	r3, [r0, #24]
    80e2:	2b00      	cmp	r3, #0
    80e4:	d101      	bne.n	80ea <_vfiprintf_r+0x1a>
    80e6:	f7ff feb3 	bl	7e50 <__sinit>
    80ea:	4b7f      	ldr	r3, [pc, #508]	; (82e8 <_vfiprintf_r+0x218>)
    80ec:	429f      	cmp	r7, r3
    80ee:	d15c      	bne.n	81aa <_vfiprintf_r+0xda>
    80f0:	6877      	ldr	r7, [r6, #4]
    80f2:	89bb      	ldrh	r3, [r7, #12]
    80f4:	071b      	lsls	r3, r3, #28
    80f6:	d562      	bpl.n	81be <_vfiprintf_r+0xee>
    80f8:	693b      	ldr	r3, [r7, #16]
    80fa:	2b00      	cmp	r3, #0
    80fc:	d05f      	beq.n	81be <_vfiprintf_r+0xee>
    80fe:	2300      	movs	r3, #0
    8100:	ad06      	add	r5, sp, #24
    8102:	616b      	str	r3, [r5, #20]
    8104:	3320      	adds	r3, #32
    8106:	766b      	strb	r3, [r5, #25]
    8108:	3310      	adds	r3, #16
    810a:	76ab      	strb	r3, [r5, #26]
    810c:	9402      	str	r4, [sp, #8]
    810e:	9c02      	ldr	r4, [sp, #8]
    8110:	7823      	ldrb	r3, [r4, #0]
    8112:	2b00      	cmp	r3, #0
    8114:	d15d      	bne.n	81d2 <_vfiprintf_r+0x102>
    8116:	9b02      	ldr	r3, [sp, #8]
    8118:	1ae3      	subs	r3, r4, r3
    811a:	9304      	str	r3, [sp, #16]
    811c:	d00d      	beq.n	813a <_vfiprintf_r+0x6a>
    811e:	9b04      	ldr	r3, [sp, #16]
    8120:	9a02      	ldr	r2, [sp, #8]
    8122:	0039      	movs	r1, r7
    8124:	0030      	movs	r0, r6
    8126:	f7ff ffc0 	bl	80aa <__sfputs_r>
    812a:	1c43      	adds	r3, r0, #1
    812c:	d100      	bne.n	8130 <_vfiprintf_r+0x60>
    812e:	e0cc      	b.n	82ca <_vfiprintf_r+0x1fa>
    8130:	696a      	ldr	r2, [r5, #20]
    8132:	9b04      	ldr	r3, [sp, #16]
    8134:	4694      	mov	ip, r2
    8136:	4463      	add	r3, ip
    8138:	616b      	str	r3, [r5, #20]
    813a:	7823      	ldrb	r3, [r4, #0]
    813c:	2b00      	cmp	r3, #0
    813e:	d100      	bne.n	8142 <_vfiprintf_r+0x72>
    8140:	e0c3      	b.n	82ca <_vfiprintf_r+0x1fa>
    8142:	2201      	movs	r2, #1
    8144:	2300      	movs	r3, #0
    8146:	4252      	negs	r2, r2
    8148:	606a      	str	r2, [r5, #4]
    814a:	a902      	add	r1, sp, #8
    814c:	3254      	adds	r2, #84	; 0x54
    814e:	1852      	adds	r2, r2, r1
    8150:	3401      	adds	r4, #1
    8152:	602b      	str	r3, [r5, #0]
    8154:	60eb      	str	r3, [r5, #12]
    8156:	60ab      	str	r3, [r5, #8]
    8158:	7013      	strb	r3, [r2, #0]
    815a:	65ab      	str	r3, [r5, #88]	; 0x58
    815c:	7821      	ldrb	r1, [r4, #0]
    815e:	2205      	movs	r2, #5
    8160:	4862      	ldr	r0, [pc, #392]	; (82ec <_vfiprintf_r+0x21c>)
    8162:	f000 fb45 	bl	87f0 <memchr>
    8166:	1c63      	adds	r3, r4, #1
    8168:	469c      	mov	ip, r3
    816a:	2800      	cmp	r0, #0
    816c:	d135      	bne.n	81da <_vfiprintf_r+0x10a>
    816e:	6829      	ldr	r1, [r5, #0]
    8170:	06cb      	lsls	r3, r1, #27
    8172:	d504      	bpl.n	817e <_vfiprintf_r+0xae>
    8174:	2353      	movs	r3, #83	; 0x53
    8176:	aa02      	add	r2, sp, #8
    8178:	3020      	adds	r0, #32
    817a:	189b      	adds	r3, r3, r2
    817c:	7018      	strb	r0, [r3, #0]
    817e:	070b      	lsls	r3, r1, #28
    8180:	d504      	bpl.n	818c <_vfiprintf_r+0xbc>
    8182:	2353      	movs	r3, #83	; 0x53
    8184:	202b      	movs	r0, #43	; 0x2b
    8186:	aa02      	add	r2, sp, #8
    8188:	189b      	adds	r3, r3, r2
    818a:	7018      	strb	r0, [r3, #0]
    818c:	7823      	ldrb	r3, [r4, #0]
    818e:	2b2a      	cmp	r3, #42	; 0x2a
    8190:	d02c      	beq.n	81ec <_vfiprintf_r+0x11c>
    8192:	2000      	movs	r0, #0
    8194:	210a      	movs	r1, #10
    8196:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8198:	7822      	ldrb	r2, [r4, #0]
    819a:	3a30      	subs	r2, #48	; 0x30
    819c:	2a09      	cmp	r2, #9
    819e:	d800      	bhi.n	81a2 <_vfiprintf_r+0xd2>
    81a0:	e06b      	b.n	827a <_vfiprintf_r+0x1aa>
    81a2:	2800      	cmp	r0, #0
    81a4:	d02a      	beq.n	81fc <_vfiprintf_r+0x12c>
    81a6:	9309      	str	r3, [sp, #36]	; 0x24
    81a8:	e028      	b.n	81fc <_vfiprintf_r+0x12c>
    81aa:	4b51      	ldr	r3, [pc, #324]	; (82f0 <_vfiprintf_r+0x220>)
    81ac:	429f      	cmp	r7, r3
    81ae:	d101      	bne.n	81b4 <_vfiprintf_r+0xe4>
    81b0:	68b7      	ldr	r7, [r6, #8]
    81b2:	e79e      	b.n	80f2 <_vfiprintf_r+0x22>
    81b4:	4b4f      	ldr	r3, [pc, #316]	; (82f4 <_vfiprintf_r+0x224>)
    81b6:	429f      	cmp	r7, r3
    81b8:	d19b      	bne.n	80f2 <_vfiprintf_r+0x22>
    81ba:	68f7      	ldr	r7, [r6, #12]
    81bc:	e799      	b.n	80f2 <_vfiprintf_r+0x22>
    81be:	0039      	movs	r1, r7
    81c0:	0030      	movs	r0, r6
    81c2:	f7ff fcd7 	bl	7b74 <__swsetup_r>
    81c6:	2800      	cmp	r0, #0
    81c8:	d099      	beq.n	80fe <_vfiprintf_r+0x2e>
    81ca:	2001      	movs	r0, #1
    81cc:	4240      	negs	r0, r0
    81ce:	b01f      	add	sp, #124	; 0x7c
    81d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81d2:	2b25      	cmp	r3, #37	; 0x25
    81d4:	d09f      	beq.n	8116 <_vfiprintf_r+0x46>
    81d6:	3401      	adds	r4, #1
    81d8:	e79a      	b.n	8110 <_vfiprintf_r+0x40>
    81da:	4b44      	ldr	r3, [pc, #272]	; (82ec <_vfiprintf_r+0x21c>)
    81dc:	6829      	ldr	r1, [r5, #0]
    81de:	1ac0      	subs	r0, r0, r3
    81e0:	2301      	movs	r3, #1
    81e2:	4083      	lsls	r3, r0
    81e4:	430b      	orrs	r3, r1
    81e6:	602b      	str	r3, [r5, #0]
    81e8:	4664      	mov	r4, ip
    81ea:	e7b7      	b.n	815c <_vfiprintf_r+0x8c>
    81ec:	9b05      	ldr	r3, [sp, #20]
    81ee:	1d18      	adds	r0, r3, #4
    81f0:	681b      	ldr	r3, [r3, #0]
    81f2:	9005      	str	r0, [sp, #20]
    81f4:	2b00      	cmp	r3, #0
    81f6:	db3a      	blt.n	826e <_vfiprintf_r+0x19e>
    81f8:	9309      	str	r3, [sp, #36]	; 0x24
    81fa:	4664      	mov	r4, ip
    81fc:	7823      	ldrb	r3, [r4, #0]
    81fe:	2b2e      	cmp	r3, #46	; 0x2e
    8200:	d10b      	bne.n	821a <_vfiprintf_r+0x14a>
    8202:	7863      	ldrb	r3, [r4, #1]
    8204:	1c62      	adds	r2, r4, #1
    8206:	2b2a      	cmp	r3, #42	; 0x2a
    8208:	d13f      	bne.n	828a <_vfiprintf_r+0x1ba>
    820a:	9b05      	ldr	r3, [sp, #20]
    820c:	3402      	adds	r4, #2
    820e:	1d1a      	adds	r2, r3, #4
    8210:	681b      	ldr	r3, [r3, #0]
    8212:	9205      	str	r2, [sp, #20]
    8214:	2b00      	cmp	r3, #0
    8216:	db35      	blt.n	8284 <_vfiprintf_r+0x1b4>
    8218:	9307      	str	r3, [sp, #28]
    821a:	7821      	ldrb	r1, [r4, #0]
    821c:	2203      	movs	r2, #3
    821e:	4836      	ldr	r0, [pc, #216]	; (82f8 <_vfiprintf_r+0x228>)
    8220:	f000 fae6 	bl	87f0 <memchr>
    8224:	2800      	cmp	r0, #0
    8226:	d007      	beq.n	8238 <_vfiprintf_r+0x168>
    8228:	4b33      	ldr	r3, [pc, #204]	; (82f8 <_vfiprintf_r+0x228>)
    822a:	682a      	ldr	r2, [r5, #0]
    822c:	1ac0      	subs	r0, r0, r3
    822e:	2340      	movs	r3, #64	; 0x40
    8230:	4083      	lsls	r3, r0
    8232:	4313      	orrs	r3, r2
    8234:	602b      	str	r3, [r5, #0]
    8236:	3401      	adds	r4, #1
    8238:	7821      	ldrb	r1, [r4, #0]
    823a:	1c63      	adds	r3, r4, #1
    823c:	2206      	movs	r2, #6
    823e:	482f      	ldr	r0, [pc, #188]	; (82fc <_vfiprintf_r+0x22c>)
    8240:	9302      	str	r3, [sp, #8]
    8242:	7629      	strb	r1, [r5, #24]
    8244:	f000 fad4 	bl	87f0 <memchr>
    8248:	2800      	cmp	r0, #0
    824a:	d044      	beq.n	82d6 <_vfiprintf_r+0x206>
    824c:	4b2c      	ldr	r3, [pc, #176]	; (8300 <_vfiprintf_r+0x230>)
    824e:	2b00      	cmp	r3, #0
    8250:	d12f      	bne.n	82b2 <_vfiprintf_r+0x1e2>
    8252:	6829      	ldr	r1, [r5, #0]
    8254:	9b05      	ldr	r3, [sp, #20]
    8256:	2207      	movs	r2, #7
    8258:	05c9      	lsls	r1, r1, #23
    825a:	d528      	bpl.n	82ae <_vfiprintf_r+0x1de>
    825c:	189b      	adds	r3, r3, r2
    825e:	4393      	bics	r3, r2
    8260:	3308      	adds	r3, #8
    8262:	9305      	str	r3, [sp, #20]
    8264:	696b      	ldr	r3, [r5, #20]
    8266:	9a03      	ldr	r2, [sp, #12]
    8268:	189b      	adds	r3, r3, r2
    826a:	616b      	str	r3, [r5, #20]
    826c:	e74f      	b.n	810e <_vfiprintf_r+0x3e>
    826e:	425b      	negs	r3, r3
    8270:	60eb      	str	r3, [r5, #12]
    8272:	2302      	movs	r3, #2
    8274:	430b      	orrs	r3, r1
    8276:	602b      	str	r3, [r5, #0]
    8278:	e7bf      	b.n	81fa <_vfiprintf_r+0x12a>
    827a:	434b      	muls	r3, r1
    827c:	3401      	adds	r4, #1
    827e:	189b      	adds	r3, r3, r2
    8280:	2001      	movs	r0, #1
    8282:	e789      	b.n	8198 <_vfiprintf_r+0xc8>
    8284:	2301      	movs	r3, #1
    8286:	425b      	negs	r3, r3
    8288:	e7c6      	b.n	8218 <_vfiprintf_r+0x148>
    828a:	2300      	movs	r3, #0
    828c:	0014      	movs	r4, r2
    828e:	200a      	movs	r0, #10
    8290:	001a      	movs	r2, r3
    8292:	606b      	str	r3, [r5, #4]
    8294:	7821      	ldrb	r1, [r4, #0]
    8296:	3930      	subs	r1, #48	; 0x30
    8298:	2909      	cmp	r1, #9
    829a:	d903      	bls.n	82a4 <_vfiprintf_r+0x1d4>
    829c:	2b00      	cmp	r3, #0
    829e:	d0bc      	beq.n	821a <_vfiprintf_r+0x14a>
    82a0:	9207      	str	r2, [sp, #28]
    82a2:	e7ba      	b.n	821a <_vfiprintf_r+0x14a>
    82a4:	4342      	muls	r2, r0
    82a6:	3401      	adds	r4, #1
    82a8:	1852      	adds	r2, r2, r1
    82aa:	2301      	movs	r3, #1
    82ac:	e7f2      	b.n	8294 <_vfiprintf_r+0x1c4>
    82ae:	3307      	adds	r3, #7
    82b0:	e7d5      	b.n	825e <_vfiprintf_r+0x18e>
    82b2:	ab05      	add	r3, sp, #20
    82b4:	9300      	str	r3, [sp, #0]
    82b6:	003a      	movs	r2, r7
    82b8:	4b12      	ldr	r3, [pc, #72]	; (8304 <_vfiprintf_r+0x234>)
    82ba:	0029      	movs	r1, r5
    82bc:	0030      	movs	r0, r6
    82be:	e000      	b.n	82c2 <_vfiprintf_r+0x1f2>
    82c0:	bf00      	nop
    82c2:	9003      	str	r0, [sp, #12]
    82c4:	9b03      	ldr	r3, [sp, #12]
    82c6:	3301      	adds	r3, #1
    82c8:	d1cc      	bne.n	8264 <_vfiprintf_r+0x194>
    82ca:	89bb      	ldrh	r3, [r7, #12]
    82cc:	065b      	lsls	r3, r3, #25
    82ce:	d500      	bpl.n	82d2 <_vfiprintf_r+0x202>
    82d0:	e77b      	b.n	81ca <_vfiprintf_r+0xfa>
    82d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    82d4:	e77b      	b.n	81ce <_vfiprintf_r+0xfe>
    82d6:	ab05      	add	r3, sp, #20
    82d8:	9300      	str	r3, [sp, #0]
    82da:	003a      	movs	r2, r7
    82dc:	4b09      	ldr	r3, [pc, #36]	; (8304 <_vfiprintf_r+0x234>)
    82de:	0029      	movs	r1, r5
    82e0:	0030      	movs	r0, r6
    82e2:	f000 f87f 	bl	83e4 <_printf_i>
    82e6:	e7ec      	b.n	82c2 <_vfiprintf_r+0x1f2>
    82e8:	00009e60 	.word	0x00009e60
    82ec:	00009eaa 	.word	0x00009eaa
    82f0:	00009e80 	.word	0x00009e80
    82f4:	00009e40 	.word	0x00009e40
    82f8:	00009eb0 	.word	0x00009eb0
    82fc:	00009eb4 	.word	0x00009eb4
    8300:	00000000 	.word	0x00000000
    8304:	000080ab 	.word	0x000080ab

00008308 <_printf_common>:
    8308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    830a:	0015      	movs	r5, r2
    830c:	9301      	str	r3, [sp, #4]
    830e:	688a      	ldr	r2, [r1, #8]
    8310:	690b      	ldr	r3, [r1, #16]
    8312:	9000      	str	r0, [sp, #0]
    8314:	000c      	movs	r4, r1
    8316:	4293      	cmp	r3, r2
    8318:	da00      	bge.n	831c <_printf_common+0x14>
    831a:	0013      	movs	r3, r2
    831c:	0022      	movs	r2, r4
    831e:	602b      	str	r3, [r5, #0]
    8320:	3243      	adds	r2, #67	; 0x43
    8322:	7812      	ldrb	r2, [r2, #0]
    8324:	2a00      	cmp	r2, #0
    8326:	d001      	beq.n	832c <_printf_common+0x24>
    8328:	3301      	adds	r3, #1
    832a:	602b      	str	r3, [r5, #0]
    832c:	6823      	ldr	r3, [r4, #0]
    832e:	069b      	lsls	r3, r3, #26
    8330:	d502      	bpl.n	8338 <_printf_common+0x30>
    8332:	682b      	ldr	r3, [r5, #0]
    8334:	3302      	adds	r3, #2
    8336:	602b      	str	r3, [r5, #0]
    8338:	2706      	movs	r7, #6
    833a:	6823      	ldr	r3, [r4, #0]
    833c:	401f      	ands	r7, r3
    833e:	d027      	beq.n	8390 <_printf_common+0x88>
    8340:	0023      	movs	r3, r4
    8342:	3343      	adds	r3, #67	; 0x43
    8344:	781b      	ldrb	r3, [r3, #0]
    8346:	1e5a      	subs	r2, r3, #1
    8348:	4193      	sbcs	r3, r2
    834a:	6822      	ldr	r2, [r4, #0]
    834c:	0692      	lsls	r2, r2, #26
    834e:	d430      	bmi.n	83b2 <_printf_common+0xaa>
    8350:	0022      	movs	r2, r4
    8352:	9901      	ldr	r1, [sp, #4]
    8354:	3243      	adds	r2, #67	; 0x43
    8356:	9800      	ldr	r0, [sp, #0]
    8358:	9e08      	ldr	r6, [sp, #32]
    835a:	47b0      	blx	r6
    835c:	1c43      	adds	r3, r0, #1
    835e:	d025      	beq.n	83ac <_printf_common+0xa4>
    8360:	2306      	movs	r3, #6
    8362:	6820      	ldr	r0, [r4, #0]
    8364:	682a      	ldr	r2, [r5, #0]
    8366:	68e1      	ldr	r1, [r4, #12]
    8368:	4003      	ands	r3, r0
    836a:	2500      	movs	r5, #0
    836c:	2b04      	cmp	r3, #4
    836e:	d103      	bne.n	8378 <_printf_common+0x70>
    8370:	1a8d      	subs	r5, r1, r2
    8372:	43eb      	mvns	r3, r5
    8374:	17db      	asrs	r3, r3, #31
    8376:	401d      	ands	r5, r3
    8378:	68a3      	ldr	r3, [r4, #8]
    837a:	6922      	ldr	r2, [r4, #16]
    837c:	4293      	cmp	r3, r2
    837e:	dd01      	ble.n	8384 <_printf_common+0x7c>
    8380:	1a9b      	subs	r3, r3, r2
    8382:	18ed      	adds	r5, r5, r3
    8384:	2700      	movs	r7, #0
    8386:	42bd      	cmp	r5, r7
    8388:	d120      	bne.n	83cc <_printf_common+0xc4>
    838a:	2000      	movs	r0, #0
    838c:	e010      	b.n	83b0 <_printf_common+0xa8>
    838e:	3701      	adds	r7, #1
    8390:	68e3      	ldr	r3, [r4, #12]
    8392:	682a      	ldr	r2, [r5, #0]
    8394:	1a9b      	subs	r3, r3, r2
    8396:	429f      	cmp	r7, r3
    8398:	dad2      	bge.n	8340 <_printf_common+0x38>
    839a:	0022      	movs	r2, r4
    839c:	2301      	movs	r3, #1
    839e:	3219      	adds	r2, #25
    83a0:	9901      	ldr	r1, [sp, #4]
    83a2:	9800      	ldr	r0, [sp, #0]
    83a4:	9e08      	ldr	r6, [sp, #32]
    83a6:	47b0      	blx	r6
    83a8:	1c43      	adds	r3, r0, #1
    83aa:	d1f0      	bne.n	838e <_printf_common+0x86>
    83ac:	2001      	movs	r0, #1
    83ae:	4240      	negs	r0, r0
    83b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    83b2:	2030      	movs	r0, #48	; 0x30
    83b4:	18e1      	adds	r1, r4, r3
    83b6:	3143      	adds	r1, #67	; 0x43
    83b8:	7008      	strb	r0, [r1, #0]
    83ba:	0021      	movs	r1, r4
    83bc:	1c5a      	adds	r2, r3, #1
    83be:	3145      	adds	r1, #69	; 0x45
    83c0:	7809      	ldrb	r1, [r1, #0]
    83c2:	18a2      	adds	r2, r4, r2
    83c4:	3243      	adds	r2, #67	; 0x43
    83c6:	3302      	adds	r3, #2
    83c8:	7011      	strb	r1, [r2, #0]
    83ca:	e7c1      	b.n	8350 <_printf_common+0x48>
    83cc:	0022      	movs	r2, r4
    83ce:	2301      	movs	r3, #1
    83d0:	321a      	adds	r2, #26
    83d2:	9901      	ldr	r1, [sp, #4]
    83d4:	9800      	ldr	r0, [sp, #0]
    83d6:	9e08      	ldr	r6, [sp, #32]
    83d8:	47b0      	blx	r6
    83da:	1c43      	adds	r3, r0, #1
    83dc:	d0e6      	beq.n	83ac <_printf_common+0xa4>
    83de:	3701      	adds	r7, #1
    83e0:	e7d1      	b.n	8386 <_printf_common+0x7e>
	...

000083e4 <_printf_i>:
    83e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    83e6:	b08b      	sub	sp, #44	; 0x2c
    83e8:	9206      	str	r2, [sp, #24]
    83ea:	000a      	movs	r2, r1
    83ec:	3243      	adds	r2, #67	; 0x43
    83ee:	9307      	str	r3, [sp, #28]
    83f0:	9005      	str	r0, [sp, #20]
    83f2:	9204      	str	r2, [sp, #16]
    83f4:	7e0a      	ldrb	r2, [r1, #24]
    83f6:	000c      	movs	r4, r1
    83f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    83fa:	2a6e      	cmp	r2, #110	; 0x6e
    83fc:	d100      	bne.n	8400 <_printf_i+0x1c>
    83fe:	e08f      	b.n	8520 <_printf_i+0x13c>
    8400:	d817      	bhi.n	8432 <_printf_i+0x4e>
    8402:	2a63      	cmp	r2, #99	; 0x63
    8404:	d02c      	beq.n	8460 <_printf_i+0x7c>
    8406:	d808      	bhi.n	841a <_printf_i+0x36>
    8408:	2a00      	cmp	r2, #0
    840a:	d100      	bne.n	840e <_printf_i+0x2a>
    840c:	e099      	b.n	8542 <_printf_i+0x15e>
    840e:	2a58      	cmp	r2, #88	; 0x58
    8410:	d054      	beq.n	84bc <_printf_i+0xd8>
    8412:	0026      	movs	r6, r4
    8414:	3642      	adds	r6, #66	; 0x42
    8416:	7032      	strb	r2, [r6, #0]
    8418:	e029      	b.n	846e <_printf_i+0x8a>
    841a:	2a64      	cmp	r2, #100	; 0x64
    841c:	d001      	beq.n	8422 <_printf_i+0x3e>
    841e:	2a69      	cmp	r2, #105	; 0x69
    8420:	d1f7      	bne.n	8412 <_printf_i+0x2e>
    8422:	6821      	ldr	r1, [r4, #0]
    8424:	681a      	ldr	r2, [r3, #0]
    8426:	0608      	lsls	r0, r1, #24
    8428:	d523      	bpl.n	8472 <_printf_i+0x8e>
    842a:	1d11      	adds	r1, r2, #4
    842c:	6019      	str	r1, [r3, #0]
    842e:	6815      	ldr	r5, [r2, #0]
    8430:	e025      	b.n	847e <_printf_i+0x9a>
    8432:	2a73      	cmp	r2, #115	; 0x73
    8434:	d100      	bne.n	8438 <_printf_i+0x54>
    8436:	e088      	b.n	854a <_printf_i+0x166>
    8438:	d808      	bhi.n	844c <_printf_i+0x68>
    843a:	2a6f      	cmp	r2, #111	; 0x6f
    843c:	d029      	beq.n	8492 <_printf_i+0xae>
    843e:	2a70      	cmp	r2, #112	; 0x70
    8440:	d1e7      	bne.n	8412 <_printf_i+0x2e>
    8442:	2220      	movs	r2, #32
    8444:	6809      	ldr	r1, [r1, #0]
    8446:	430a      	orrs	r2, r1
    8448:	6022      	str	r2, [r4, #0]
    844a:	e003      	b.n	8454 <_printf_i+0x70>
    844c:	2a75      	cmp	r2, #117	; 0x75
    844e:	d020      	beq.n	8492 <_printf_i+0xae>
    8450:	2a78      	cmp	r2, #120	; 0x78
    8452:	d1de      	bne.n	8412 <_printf_i+0x2e>
    8454:	0022      	movs	r2, r4
    8456:	2178      	movs	r1, #120	; 0x78
    8458:	3245      	adds	r2, #69	; 0x45
    845a:	7011      	strb	r1, [r2, #0]
    845c:	4a6c      	ldr	r2, [pc, #432]	; (8610 <_printf_i+0x22c>)
    845e:	e030      	b.n	84c2 <_printf_i+0xde>
    8460:	000e      	movs	r6, r1
    8462:	681a      	ldr	r2, [r3, #0]
    8464:	3642      	adds	r6, #66	; 0x42
    8466:	1d11      	adds	r1, r2, #4
    8468:	6019      	str	r1, [r3, #0]
    846a:	6813      	ldr	r3, [r2, #0]
    846c:	7033      	strb	r3, [r6, #0]
    846e:	2301      	movs	r3, #1
    8470:	e079      	b.n	8566 <_printf_i+0x182>
    8472:	0649      	lsls	r1, r1, #25
    8474:	d5d9      	bpl.n	842a <_printf_i+0x46>
    8476:	1d11      	adds	r1, r2, #4
    8478:	6019      	str	r1, [r3, #0]
    847a:	2300      	movs	r3, #0
    847c:	5ed5      	ldrsh	r5, [r2, r3]
    847e:	2d00      	cmp	r5, #0
    8480:	da03      	bge.n	848a <_printf_i+0xa6>
    8482:	232d      	movs	r3, #45	; 0x2d
    8484:	9a04      	ldr	r2, [sp, #16]
    8486:	426d      	negs	r5, r5
    8488:	7013      	strb	r3, [r2, #0]
    848a:	4b62      	ldr	r3, [pc, #392]	; (8614 <_printf_i+0x230>)
    848c:	270a      	movs	r7, #10
    848e:	9303      	str	r3, [sp, #12]
    8490:	e02f      	b.n	84f2 <_printf_i+0x10e>
    8492:	6820      	ldr	r0, [r4, #0]
    8494:	6819      	ldr	r1, [r3, #0]
    8496:	0605      	lsls	r5, r0, #24
    8498:	d503      	bpl.n	84a2 <_printf_i+0xbe>
    849a:	1d08      	adds	r0, r1, #4
    849c:	6018      	str	r0, [r3, #0]
    849e:	680d      	ldr	r5, [r1, #0]
    84a0:	e005      	b.n	84ae <_printf_i+0xca>
    84a2:	0640      	lsls	r0, r0, #25
    84a4:	d5f9      	bpl.n	849a <_printf_i+0xb6>
    84a6:	680d      	ldr	r5, [r1, #0]
    84a8:	1d08      	adds	r0, r1, #4
    84aa:	6018      	str	r0, [r3, #0]
    84ac:	b2ad      	uxth	r5, r5
    84ae:	4b59      	ldr	r3, [pc, #356]	; (8614 <_printf_i+0x230>)
    84b0:	2708      	movs	r7, #8
    84b2:	9303      	str	r3, [sp, #12]
    84b4:	2a6f      	cmp	r2, #111	; 0x6f
    84b6:	d018      	beq.n	84ea <_printf_i+0x106>
    84b8:	270a      	movs	r7, #10
    84ba:	e016      	b.n	84ea <_printf_i+0x106>
    84bc:	3145      	adds	r1, #69	; 0x45
    84be:	700a      	strb	r2, [r1, #0]
    84c0:	4a54      	ldr	r2, [pc, #336]	; (8614 <_printf_i+0x230>)
    84c2:	9203      	str	r2, [sp, #12]
    84c4:	681a      	ldr	r2, [r3, #0]
    84c6:	6821      	ldr	r1, [r4, #0]
    84c8:	1d10      	adds	r0, r2, #4
    84ca:	6018      	str	r0, [r3, #0]
    84cc:	6815      	ldr	r5, [r2, #0]
    84ce:	0608      	lsls	r0, r1, #24
    84d0:	d522      	bpl.n	8518 <_printf_i+0x134>
    84d2:	07cb      	lsls	r3, r1, #31
    84d4:	d502      	bpl.n	84dc <_printf_i+0xf8>
    84d6:	2320      	movs	r3, #32
    84d8:	4319      	orrs	r1, r3
    84da:	6021      	str	r1, [r4, #0]
    84dc:	2710      	movs	r7, #16
    84de:	2d00      	cmp	r5, #0
    84e0:	d103      	bne.n	84ea <_printf_i+0x106>
    84e2:	2320      	movs	r3, #32
    84e4:	6822      	ldr	r2, [r4, #0]
    84e6:	439a      	bics	r2, r3
    84e8:	6022      	str	r2, [r4, #0]
    84ea:	0023      	movs	r3, r4
    84ec:	2200      	movs	r2, #0
    84ee:	3343      	adds	r3, #67	; 0x43
    84f0:	701a      	strb	r2, [r3, #0]
    84f2:	6863      	ldr	r3, [r4, #4]
    84f4:	60a3      	str	r3, [r4, #8]
    84f6:	2b00      	cmp	r3, #0
    84f8:	db5c      	blt.n	85b4 <_printf_i+0x1d0>
    84fa:	2204      	movs	r2, #4
    84fc:	6821      	ldr	r1, [r4, #0]
    84fe:	4391      	bics	r1, r2
    8500:	6021      	str	r1, [r4, #0]
    8502:	2d00      	cmp	r5, #0
    8504:	d158      	bne.n	85b8 <_printf_i+0x1d4>
    8506:	9e04      	ldr	r6, [sp, #16]
    8508:	2b00      	cmp	r3, #0
    850a:	d064      	beq.n	85d6 <_printf_i+0x1f2>
    850c:	0026      	movs	r6, r4
    850e:	9b03      	ldr	r3, [sp, #12]
    8510:	3642      	adds	r6, #66	; 0x42
    8512:	781b      	ldrb	r3, [r3, #0]
    8514:	7033      	strb	r3, [r6, #0]
    8516:	e05e      	b.n	85d6 <_printf_i+0x1f2>
    8518:	0648      	lsls	r0, r1, #25
    851a:	d5da      	bpl.n	84d2 <_printf_i+0xee>
    851c:	b2ad      	uxth	r5, r5
    851e:	e7d8      	b.n	84d2 <_printf_i+0xee>
    8520:	6809      	ldr	r1, [r1, #0]
    8522:	681a      	ldr	r2, [r3, #0]
    8524:	0608      	lsls	r0, r1, #24
    8526:	d505      	bpl.n	8534 <_printf_i+0x150>
    8528:	1d11      	adds	r1, r2, #4
    852a:	6019      	str	r1, [r3, #0]
    852c:	6813      	ldr	r3, [r2, #0]
    852e:	6962      	ldr	r2, [r4, #20]
    8530:	601a      	str	r2, [r3, #0]
    8532:	e006      	b.n	8542 <_printf_i+0x15e>
    8534:	0649      	lsls	r1, r1, #25
    8536:	d5f7      	bpl.n	8528 <_printf_i+0x144>
    8538:	1d11      	adds	r1, r2, #4
    853a:	6019      	str	r1, [r3, #0]
    853c:	6813      	ldr	r3, [r2, #0]
    853e:	8aa2      	ldrh	r2, [r4, #20]
    8540:	801a      	strh	r2, [r3, #0]
    8542:	2300      	movs	r3, #0
    8544:	9e04      	ldr	r6, [sp, #16]
    8546:	6123      	str	r3, [r4, #16]
    8548:	e054      	b.n	85f4 <_printf_i+0x210>
    854a:	681a      	ldr	r2, [r3, #0]
    854c:	1d11      	adds	r1, r2, #4
    854e:	6019      	str	r1, [r3, #0]
    8550:	6816      	ldr	r6, [r2, #0]
    8552:	2100      	movs	r1, #0
    8554:	6862      	ldr	r2, [r4, #4]
    8556:	0030      	movs	r0, r6
    8558:	f000 f94a 	bl	87f0 <memchr>
    855c:	2800      	cmp	r0, #0
    855e:	d001      	beq.n	8564 <_printf_i+0x180>
    8560:	1b80      	subs	r0, r0, r6
    8562:	6060      	str	r0, [r4, #4]
    8564:	6863      	ldr	r3, [r4, #4]
    8566:	6123      	str	r3, [r4, #16]
    8568:	2300      	movs	r3, #0
    856a:	9a04      	ldr	r2, [sp, #16]
    856c:	7013      	strb	r3, [r2, #0]
    856e:	e041      	b.n	85f4 <_printf_i+0x210>
    8570:	6923      	ldr	r3, [r4, #16]
    8572:	0032      	movs	r2, r6
    8574:	9906      	ldr	r1, [sp, #24]
    8576:	9805      	ldr	r0, [sp, #20]
    8578:	9d07      	ldr	r5, [sp, #28]
    857a:	47a8      	blx	r5
    857c:	1c43      	adds	r3, r0, #1
    857e:	d043      	beq.n	8608 <_printf_i+0x224>
    8580:	6823      	ldr	r3, [r4, #0]
    8582:	2500      	movs	r5, #0
    8584:	079b      	lsls	r3, r3, #30
    8586:	d40f      	bmi.n	85a8 <_printf_i+0x1c4>
    8588:	9b09      	ldr	r3, [sp, #36]	; 0x24
    858a:	68e0      	ldr	r0, [r4, #12]
    858c:	4298      	cmp	r0, r3
    858e:	da3d      	bge.n	860c <_printf_i+0x228>
    8590:	0018      	movs	r0, r3
    8592:	e03b      	b.n	860c <_printf_i+0x228>
    8594:	0022      	movs	r2, r4
    8596:	2301      	movs	r3, #1
    8598:	3219      	adds	r2, #25
    859a:	9906      	ldr	r1, [sp, #24]
    859c:	9805      	ldr	r0, [sp, #20]
    859e:	9e07      	ldr	r6, [sp, #28]
    85a0:	47b0      	blx	r6
    85a2:	1c43      	adds	r3, r0, #1
    85a4:	d030      	beq.n	8608 <_printf_i+0x224>
    85a6:	3501      	adds	r5, #1
    85a8:	68e3      	ldr	r3, [r4, #12]
    85aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    85ac:	1a9b      	subs	r3, r3, r2
    85ae:	429d      	cmp	r5, r3
    85b0:	dbf0      	blt.n	8594 <_printf_i+0x1b0>
    85b2:	e7e9      	b.n	8588 <_printf_i+0x1a4>
    85b4:	2d00      	cmp	r5, #0
    85b6:	d0a9      	beq.n	850c <_printf_i+0x128>
    85b8:	9e04      	ldr	r6, [sp, #16]
    85ba:	0028      	movs	r0, r5
    85bc:	0039      	movs	r1, r7
    85be:	f7fe fe01 	bl	71c4 <__aeabi_uidivmod>
    85c2:	9b03      	ldr	r3, [sp, #12]
    85c4:	3e01      	subs	r6, #1
    85c6:	5c5b      	ldrb	r3, [r3, r1]
    85c8:	0028      	movs	r0, r5
    85ca:	7033      	strb	r3, [r6, #0]
    85cc:	0039      	movs	r1, r7
    85ce:	f7fe fd73 	bl	70b8 <__udivsi3>
    85d2:	1e05      	subs	r5, r0, #0
    85d4:	d1f1      	bne.n	85ba <_printf_i+0x1d6>
    85d6:	2f08      	cmp	r7, #8
    85d8:	d109      	bne.n	85ee <_printf_i+0x20a>
    85da:	6823      	ldr	r3, [r4, #0]
    85dc:	07db      	lsls	r3, r3, #31
    85de:	d506      	bpl.n	85ee <_printf_i+0x20a>
    85e0:	6863      	ldr	r3, [r4, #4]
    85e2:	6922      	ldr	r2, [r4, #16]
    85e4:	4293      	cmp	r3, r2
    85e6:	dc02      	bgt.n	85ee <_printf_i+0x20a>
    85e8:	2330      	movs	r3, #48	; 0x30
    85ea:	3e01      	subs	r6, #1
    85ec:	7033      	strb	r3, [r6, #0]
    85ee:	9b04      	ldr	r3, [sp, #16]
    85f0:	1b9b      	subs	r3, r3, r6
    85f2:	6123      	str	r3, [r4, #16]
    85f4:	9b07      	ldr	r3, [sp, #28]
    85f6:	aa09      	add	r2, sp, #36	; 0x24
    85f8:	9300      	str	r3, [sp, #0]
    85fa:	0021      	movs	r1, r4
    85fc:	9b06      	ldr	r3, [sp, #24]
    85fe:	9805      	ldr	r0, [sp, #20]
    8600:	f7ff fe82 	bl	8308 <_printf_common>
    8604:	1c43      	adds	r3, r0, #1
    8606:	d1b3      	bne.n	8570 <_printf_i+0x18c>
    8608:	2001      	movs	r0, #1
    860a:	4240      	negs	r0, r0
    860c:	b00b      	add	sp, #44	; 0x2c
    860e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8610:	00009ecc 	.word	0x00009ecc
    8614:	00009ebb 	.word	0x00009ebb

00008618 <_putc_r>:
    8618:	b570      	push	{r4, r5, r6, lr}
    861a:	0006      	movs	r6, r0
    861c:	000d      	movs	r5, r1
    861e:	0014      	movs	r4, r2
    8620:	2800      	cmp	r0, #0
    8622:	d004      	beq.n	862e <_putc_r+0x16>
    8624:	6983      	ldr	r3, [r0, #24]
    8626:	2b00      	cmp	r3, #0
    8628:	d101      	bne.n	862e <_putc_r+0x16>
    862a:	f7ff fc11 	bl	7e50 <__sinit>
    862e:	4b12      	ldr	r3, [pc, #72]	; (8678 <_putc_r+0x60>)
    8630:	429c      	cmp	r4, r3
    8632:	d111      	bne.n	8658 <_putc_r+0x40>
    8634:	6874      	ldr	r4, [r6, #4]
    8636:	68a3      	ldr	r3, [r4, #8]
    8638:	3b01      	subs	r3, #1
    863a:	60a3      	str	r3, [r4, #8]
    863c:	2b00      	cmp	r3, #0
    863e:	da05      	bge.n	864c <_putc_r+0x34>
    8640:	69a2      	ldr	r2, [r4, #24]
    8642:	4293      	cmp	r3, r2
    8644:	db12      	blt.n	866c <_putc_r+0x54>
    8646:	b2eb      	uxtb	r3, r5
    8648:	2b0a      	cmp	r3, #10
    864a:	d00f      	beq.n	866c <_putc_r+0x54>
    864c:	6823      	ldr	r3, [r4, #0]
    864e:	b2e8      	uxtb	r0, r5
    8650:	1c5a      	adds	r2, r3, #1
    8652:	6022      	str	r2, [r4, #0]
    8654:	701d      	strb	r5, [r3, #0]
    8656:	bd70      	pop	{r4, r5, r6, pc}
    8658:	4b08      	ldr	r3, [pc, #32]	; (867c <_putc_r+0x64>)
    865a:	429c      	cmp	r4, r3
    865c:	d101      	bne.n	8662 <_putc_r+0x4a>
    865e:	68b4      	ldr	r4, [r6, #8]
    8660:	e7e9      	b.n	8636 <_putc_r+0x1e>
    8662:	4b07      	ldr	r3, [pc, #28]	; (8680 <_putc_r+0x68>)
    8664:	429c      	cmp	r4, r3
    8666:	d1e6      	bne.n	8636 <_putc_r+0x1e>
    8668:	68f4      	ldr	r4, [r6, #12]
    866a:	e7e4      	b.n	8636 <_putc_r+0x1e>
    866c:	0022      	movs	r2, r4
    866e:	0029      	movs	r1, r5
    8670:	0030      	movs	r0, r6
    8672:	f7ff fa29 	bl	7ac8 <__swbuf_r>
    8676:	e7ee      	b.n	8656 <_putc_r+0x3e>
    8678:	00009e60 	.word	0x00009e60
    867c:	00009e80 	.word	0x00009e80
    8680:	00009e40 	.word	0x00009e40

00008684 <__sread>:
    8684:	b570      	push	{r4, r5, r6, lr}
    8686:	000c      	movs	r4, r1
    8688:	250e      	movs	r5, #14
    868a:	5f49      	ldrsh	r1, [r1, r5]
    868c:	f000 f8bc 	bl	8808 <_read_r>
    8690:	2800      	cmp	r0, #0
    8692:	db03      	blt.n	869c <__sread+0x18>
    8694:	6d63      	ldr	r3, [r4, #84]	; 0x54
    8696:	181b      	adds	r3, r3, r0
    8698:	6563      	str	r3, [r4, #84]	; 0x54
    869a:	bd70      	pop	{r4, r5, r6, pc}
    869c:	89a3      	ldrh	r3, [r4, #12]
    869e:	4a02      	ldr	r2, [pc, #8]	; (86a8 <__sread+0x24>)
    86a0:	4013      	ands	r3, r2
    86a2:	81a3      	strh	r3, [r4, #12]
    86a4:	e7f9      	b.n	869a <__sread+0x16>
    86a6:	46c0      	nop			; (mov r8, r8)
    86a8:	ffffefff 	.word	0xffffefff

000086ac <__swrite>:
    86ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86ae:	001f      	movs	r7, r3
    86b0:	898b      	ldrh	r3, [r1, #12]
    86b2:	0005      	movs	r5, r0
    86b4:	000c      	movs	r4, r1
    86b6:	0016      	movs	r6, r2
    86b8:	05db      	lsls	r3, r3, #23
    86ba:	d505      	bpl.n	86c8 <__swrite+0x1c>
    86bc:	230e      	movs	r3, #14
    86be:	5ec9      	ldrsh	r1, [r1, r3]
    86c0:	2200      	movs	r2, #0
    86c2:	2302      	movs	r3, #2
    86c4:	f000 f880 	bl	87c8 <_lseek_r>
    86c8:	89a3      	ldrh	r3, [r4, #12]
    86ca:	4a05      	ldr	r2, [pc, #20]	; (86e0 <__swrite+0x34>)
    86cc:	0028      	movs	r0, r5
    86ce:	4013      	ands	r3, r2
    86d0:	81a3      	strh	r3, [r4, #12]
    86d2:	0032      	movs	r2, r6
    86d4:	230e      	movs	r3, #14
    86d6:	5ee1      	ldrsh	r1, [r4, r3]
    86d8:	003b      	movs	r3, r7
    86da:	f000 f82b 	bl	8734 <_write_r>
    86de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    86e0:	ffffefff 	.word	0xffffefff

000086e4 <__sseek>:
    86e4:	b570      	push	{r4, r5, r6, lr}
    86e6:	000c      	movs	r4, r1
    86e8:	250e      	movs	r5, #14
    86ea:	5f49      	ldrsh	r1, [r1, r5]
    86ec:	f000 f86c 	bl	87c8 <_lseek_r>
    86f0:	89a3      	ldrh	r3, [r4, #12]
    86f2:	1c42      	adds	r2, r0, #1
    86f4:	d103      	bne.n	86fe <__sseek+0x1a>
    86f6:	4a05      	ldr	r2, [pc, #20]	; (870c <__sseek+0x28>)
    86f8:	4013      	ands	r3, r2
    86fa:	81a3      	strh	r3, [r4, #12]
    86fc:	bd70      	pop	{r4, r5, r6, pc}
    86fe:	2280      	movs	r2, #128	; 0x80
    8700:	0152      	lsls	r2, r2, #5
    8702:	4313      	orrs	r3, r2
    8704:	81a3      	strh	r3, [r4, #12]
    8706:	6560      	str	r0, [r4, #84]	; 0x54
    8708:	e7f8      	b.n	86fc <__sseek+0x18>
    870a:	46c0      	nop			; (mov r8, r8)
    870c:	ffffefff 	.word	0xffffefff

00008710 <__sclose>:
    8710:	b510      	push	{r4, lr}
    8712:	230e      	movs	r3, #14
    8714:	5ec9      	ldrsh	r1, [r1, r3]
    8716:	f000 f821 	bl	875c <_close_r>
    871a:	bd10      	pop	{r4, pc}

0000871c <__ascii_wctomb>:
    871c:	1e0b      	subs	r3, r1, #0
    871e:	d004      	beq.n	872a <__ascii_wctomb+0xe>
    8720:	2aff      	cmp	r2, #255	; 0xff
    8722:	d904      	bls.n	872e <__ascii_wctomb+0x12>
    8724:	238a      	movs	r3, #138	; 0x8a
    8726:	6003      	str	r3, [r0, #0]
    8728:	3b8b      	subs	r3, #139	; 0x8b
    872a:	0018      	movs	r0, r3
    872c:	4770      	bx	lr
    872e:	700a      	strb	r2, [r1, #0]
    8730:	2301      	movs	r3, #1
    8732:	e7fa      	b.n	872a <__ascii_wctomb+0xe>

00008734 <_write_r>:
    8734:	b570      	push	{r4, r5, r6, lr}
    8736:	0005      	movs	r5, r0
    8738:	0008      	movs	r0, r1
    873a:	0011      	movs	r1, r2
    873c:	2200      	movs	r2, #0
    873e:	4c06      	ldr	r4, [pc, #24]	; (8758 <_write_r+0x24>)
    8740:	6022      	str	r2, [r4, #0]
    8742:	001a      	movs	r2, r3
    8744:	f7fd fe08 	bl	6358 <_write>
    8748:	1c43      	adds	r3, r0, #1
    874a:	d103      	bne.n	8754 <_write_r+0x20>
    874c:	6823      	ldr	r3, [r4, #0]
    874e:	2b00      	cmp	r3, #0
    8750:	d000      	beq.n	8754 <_write_r+0x20>
    8752:	602b      	str	r3, [r5, #0]
    8754:	bd70      	pop	{r4, r5, r6, pc}
    8756:	46c0      	nop			; (mov r8, r8)
    8758:	20001e34 	.word	0x20001e34

0000875c <_close_r>:
    875c:	2300      	movs	r3, #0
    875e:	b570      	push	{r4, r5, r6, lr}
    8760:	4c06      	ldr	r4, [pc, #24]	; (877c <_close_r+0x20>)
    8762:	0005      	movs	r5, r0
    8764:	0008      	movs	r0, r1
    8766:	6023      	str	r3, [r4, #0]
    8768:	f7fd fe30 	bl	63cc <_close>
    876c:	1c43      	adds	r3, r0, #1
    876e:	d103      	bne.n	8778 <_close_r+0x1c>
    8770:	6823      	ldr	r3, [r4, #0]
    8772:	2b00      	cmp	r3, #0
    8774:	d000      	beq.n	8778 <_close_r+0x1c>
    8776:	602b      	str	r3, [r5, #0]
    8778:	bd70      	pop	{r4, r5, r6, pc}
    877a:	46c0      	nop			; (mov r8, r8)
    877c:	20001e34 	.word	0x20001e34

00008780 <_fstat_r>:
    8780:	2300      	movs	r3, #0
    8782:	b570      	push	{r4, r5, r6, lr}
    8784:	4c06      	ldr	r4, [pc, #24]	; (87a0 <_fstat_r+0x20>)
    8786:	0005      	movs	r5, r0
    8788:	0008      	movs	r0, r1
    878a:	0011      	movs	r1, r2
    878c:	6023      	str	r3, [r4, #0]
    878e:	f7fd fe20 	bl	63d2 <_fstat>
    8792:	1c43      	adds	r3, r0, #1
    8794:	d103      	bne.n	879e <_fstat_r+0x1e>
    8796:	6823      	ldr	r3, [r4, #0]
    8798:	2b00      	cmp	r3, #0
    879a:	d000      	beq.n	879e <_fstat_r+0x1e>
    879c:	602b      	str	r3, [r5, #0]
    879e:	bd70      	pop	{r4, r5, r6, pc}
    87a0:	20001e34 	.word	0x20001e34

000087a4 <_isatty_r>:
    87a4:	2300      	movs	r3, #0
    87a6:	b570      	push	{r4, r5, r6, lr}
    87a8:	4c06      	ldr	r4, [pc, #24]	; (87c4 <_isatty_r+0x20>)
    87aa:	0005      	movs	r5, r0
    87ac:	0008      	movs	r0, r1
    87ae:	6023      	str	r3, [r4, #0]
    87b0:	f7fd fe14 	bl	63dc <_isatty>
    87b4:	1c43      	adds	r3, r0, #1
    87b6:	d103      	bne.n	87c0 <_isatty_r+0x1c>
    87b8:	6823      	ldr	r3, [r4, #0]
    87ba:	2b00      	cmp	r3, #0
    87bc:	d000      	beq.n	87c0 <_isatty_r+0x1c>
    87be:	602b      	str	r3, [r5, #0]
    87c0:	bd70      	pop	{r4, r5, r6, pc}
    87c2:	46c0      	nop			; (mov r8, r8)
    87c4:	20001e34 	.word	0x20001e34

000087c8 <_lseek_r>:
    87c8:	b570      	push	{r4, r5, r6, lr}
    87ca:	0005      	movs	r5, r0
    87cc:	0008      	movs	r0, r1
    87ce:	0011      	movs	r1, r2
    87d0:	2200      	movs	r2, #0
    87d2:	4c06      	ldr	r4, [pc, #24]	; (87ec <_lseek_r+0x24>)
    87d4:	6022      	str	r2, [r4, #0]
    87d6:	001a      	movs	r2, r3
    87d8:	f7fd fe02 	bl	63e0 <_lseek>
    87dc:	1c43      	adds	r3, r0, #1
    87de:	d103      	bne.n	87e8 <_lseek_r+0x20>
    87e0:	6823      	ldr	r3, [r4, #0]
    87e2:	2b00      	cmp	r3, #0
    87e4:	d000      	beq.n	87e8 <_lseek_r+0x20>
    87e6:	602b      	str	r3, [r5, #0]
    87e8:	bd70      	pop	{r4, r5, r6, pc}
    87ea:	46c0      	nop			; (mov r8, r8)
    87ec:	20001e34 	.word	0x20001e34

000087f0 <memchr>:
    87f0:	b2c9      	uxtb	r1, r1
    87f2:	1882      	adds	r2, r0, r2
    87f4:	4290      	cmp	r0, r2
    87f6:	d101      	bne.n	87fc <memchr+0xc>
    87f8:	2000      	movs	r0, #0
    87fa:	4770      	bx	lr
    87fc:	7803      	ldrb	r3, [r0, #0]
    87fe:	428b      	cmp	r3, r1
    8800:	d0fb      	beq.n	87fa <memchr+0xa>
    8802:	3001      	adds	r0, #1
    8804:	e7f6      	b.n	87f4 <memchr+0x4>
	...

00008808 <_read_r>:
    8808:	b570      	push	{r4, r5, r6, lr}
    880a:	0005      	movs	r5, r0
    880c:	0008      	movs	r0, r1
    880e:	0011      	movs	r1, r2
    8810:	2200      	movs	r2, #0
    8812:	4c06      	ldr	r4, [pc, #24]	; (882c <_read_r+0x24>)
    8814:	6022      	str	r2, [r4, #0]
    8816:	001a      	movs	r2, r3
    8818:	f7fd fd7c 	bl	6314 <_read>
    881c:	1c43      	adds	r3, r0, #1
    881e:	d103      	bne.n	8828 <_read_r+0x20>
    8820:	6823      	ldr	r3, [r4, #0]
    8822:	2b00      	cmp	r3, #0
    8824:	d000      	beq.n	8828 <_read_r+0x20>
    8826:	602b      	str	r3, [r5, #0]
    8828:	bd70      	pop	{r4, r5, r6, pc}
    882a:	46c0      	nop			; (mov r8, r8)
    882c:	20001e34 	.word	0x20001e34
    8830:	000001ca 	.word	0x000001ca
    8834:	0000019e 	.word	0x0000019e
    8838:	000001a2 	.word	0x000001a2
    883c:	000001aa 	.word	0x000001aa
    8840:	000001ae 	.word	0x000001ae
    8844:	000001b2 	.word	0x000001b2
    8848:	000001b6 	.word	0x000001b6
    884c:	000001ba 	.word	0x000001ba
    8850:	000001be 	.word	0x000001be
    8854:	000001c2 	.word	0x000001c2
    8858:	000001a6 	.word	0x000001a6
    885c:	0000026c 	.word	0x0000026c
    8860:	00000244 	.word	0x00000244
    8864:	0000024a 	.word	0x0000024a
    8868:	00000250 	.word	0x00000250
    886c:	00000250 	.word	0x00000250
    8870:	00000256 	.word	0x00000256
    8874:	00000256 	.word	0x00000256
    8878:	00000256 	.word	0x00000256
    887c:	0000025c 	.word	0x0000025c
    8880:	00000262 	.word	0x00000262
    8884:	0000024a 	.word	0x0000024a
    8888:	00000100 	.word	0x00000100
    888c:	0000036e 	.word	0x0000036e
    8890:	00000346 	.word	0x00000346
    8894:	0000034c 	.word	0x0000034c
    8898:	00000352 	.word	0x00000352
    889c:	00000352 	.word	0x00000352
    88a0:	00000358 	.word	0x00000358
    88a4:	00000358 	.word	0x00000358
    88a8:	00000358 	.word	0x00000358
    88ac:	0000035e 	.word	0x0000035e
    88b0:	00000364 	.word	0x00000364
    88b4:	0000034c 	.word	0x0000034c
    88b8:	0000079a 	.word	0x0000079a
    88bc:	00000776 	.word	0x00000776
    88c0:	0000077c 	.word	0x0000077c
    88c4:	00000782 	.word	0x00000782
    88c8:	00000782 	.word	0x00000782
    88cc:	00000788 	.word	0x00000788
    88d0:	00000788 	.word	0x00000788
    88d4:	00000788 	.word	0x00000788
    88d8:	0000078e 	.word	0x0000078e
    88dc:	00000794 	.word	0x00000794
    88e0:	0000077c 	.word	0x0000077c
    88e4:	00000aa2 	.word	0x00000aa2
    88e8:	00000a7e 	.word	0x00000a7e
    88ec:	00000a84 	.word	0x00000a84
    88f0:	00000a8a 	.word	0x00000a8a
    88f4:	00000a8a 	.word	0x00000a8a
    88f8:	00000a90 	.word	0x00000a90
    88fc:	00000a90 	.word	0x00000a90
    8900:	00000a90 	.word	0x00000a90
    8904:	00000a96 	.word	0x00000a96
    8908:	00000a9c 	.word	0x00000a9c
    890c:	00000a84 	.word	0x00000a84

00008910 <__FUNCTION__.13707>:
    8910:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    8920:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    8930:	00005d64 61766e69 2064696c 6c636f69     d]..invalid iocl
    8940:	6d632074 00000064 000019b4 00001984     t cmd...........
    8950:	0000197c 00001994 0000198c 000019ac     |...............
    8960:	0000199c 000019a4                       ........

00008968 <__FUNCTION__.13241>:
    8968:	5f666968 646e6573 00000000              hif_send....

00008974 <__FUNCTION__.13251>:
    8974:	5f666968 00727369                       hif_isr.

0000897c <__FUNCTION__.13261>:
    897c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000898c <__FUNCTION__.13273>:
    898c:	5f666968 65636572 00657669              hif_receive.

00008998 <__FUNCTION__.13289>:
    8998:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    89a8:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    89b8:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    89c8:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    89d8:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    89e8:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    89f8:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    8a08:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    8a18:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
    8a28:	6c616320 6361626c 7369206b 746f6e20      callback is not
    8a38:	67657220 65747369 00646572 6b636f53      registered.Sock
    8a48:	63207465 626c6c61 206b6361 6e207369     et callback is n
    8a58:	7220746f 73696765 65726574 00000064     ot registered...
    8a68:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
    8a78:	20746f6e 69676572 72657473 00006465     not registered..
    8a88:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
    8a98:	6e207369 7220746f 73696765 65726574     is not registere
    8aa8:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
    8ab8:	69206b63 6f6e2073 65722074 74736967     ck is not regist
    8ac8:	64657265 00000000 204c5353 6c6c6163     ered....SSL call
    8ad8:	6b636162 20736920 20746f6e 69676572     back is not regi
    8ae8:	72657473 00006465 66696828 6e692029     stered..(hif) in
    8af8:	696c6176 72672064 2070756f 00004449     valid group ID..
    8b08:	66696828 6f682029 61207473 64207070     (hif) host app d
    8b18:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
    8b28:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
    8b38:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    8b48:	66696828 61462029 2065736c 65746e69     (hif) False inte
    8b58:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    8b68:	61462029 64656c69 206f7420 64616552     ) Failed to Read
    8b78:	746e6920 75727265 72207470 00006765      interrupt reg..
    8b88:	46494828 61462029 64656c69 206f7420     (HIF) Failed to 
    8b98:	646e6168 6920656c 7265746e 74707572     handle interrupt
    8ba8:	2c642520 6f626120 6e697472 75642067      %d, aborting du
    8bb8:	6f742065 6f6f7420 6e616d20 65722079     e to too many re
    8bc8:	65697274 00000a73 46494828 61462029     tries...(HIF) Fa
    8bd8:	64656c69 206f7420 646e6168 6920656c     iled to handle i
    8be8:	7265746e 74707572 20642520 20797274     nterrupt %d try 
    8bf8:	69616761 2e2e2e6e 75252820 00000a29     again... (%u)...
    8c08:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    8c18:	696c6176 72612064 656d7567 0000746e     valid argument..
    8c28:	20505041 75716552 65747365 69532064     APP Requested Si
    8c38:	6920657a 616c2073 72656772 61687420     ze is larger tha
    8c48:	6874206e 65722065 76696563 62206465     n the received b
    8c58:	65666675 69732072 3c20657a 3c3e7525     uffer size <%u><
    8c68:	3e756c25 0000000a 20505041 75716552     %lu>....APP Requ
    8c78:	65747365 64412064 73657264 65622073     ested Address be
    8c88:	646e6f79 65687420 63657220 65766965     yond the receive
    8c98:	75622064 72656666 64646120 73736572     d buffer address
    8ca8:	646e6120 6e656c20 00687467 20705247      and length.GRp 
    8cb8:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    8cc8:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    8cd8:	002e2e2e 46494828 69614629 2064656c     ....(HIF)Failed 
    8ce8:	77206f74 75656b61 68742070 68632065     to wakeup the ch
    8cf8:	00007069 20464948 7373656d 20656761     ip..HIF message 
    8d08:	676e656c 28206874 20296425 65637865     length (%d) exce
    8d18:	20736465 2078616d 676e656c 28206874     eds max length (
    8d28:	0a296425 00000000                       %d).....

00008d30 <__FUNCTION__.13518>:
    8d30:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00008d3c <__FUNCTION__.13527>:
    8d3c:	5f6d326d 696c6176 65746164 5f70615f     m2m_validate_ap_
    8d4c:	61726170 6574656d 00007372              parameters..

00008d58 <__FUNCTION__.13550>:
    8d58:	5f6d326d 69666977 696e695f 74735f74     m2m_wifi_init_st
    8d68:	00747261                                art.

00008d6c <__FUNCTION__.13852>:
    8d6c:	5f6d326d 69666977 6174735f 705f7472     m2m_wifi_start_p
    8d7c:	69766f72 6e6f6973 646f6d5f 78655f65     rovision_mode_ex
    8d8c:	00000074 41564e49 2044494c 4e494f50     t...INVALID POIN
    8d9c:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
    8dac:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
    8dbc:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
    8dcc:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
    8ddc:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
    8dec:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
    8dfc:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
    8e0c:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
    8e1c:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
    8e2c:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
    8e3c:	49544143 4d204e4f 0045444f 666e6f43     CATION MODE.Conf
    8e4c:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
    8e5c:	75252e75 2075252e 000a2022 20514552     u.%u.%u " ..REQ 
    8e6c:	20746f4e 69666564 2064656e 000a6425     Not defined %d..
    8e7c:	6d726946 65726177 72657620 3a202020     Firmware ver   :
    8e8c:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
    8e9c:	0a752520 00000000 6d726946 65726177      %u.....Firmware
    8eac:	69754220 2520646c 69542073 2520656d      Build %s Time %
    8ebc:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
    8ecc:	69726420 20726576 20726576 7525203a      driver ver : %u
    8edc:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
    8eec:	203a7265 252e7525 75252e75 00000a20     er: %u.%u.%u ...
    8efc:	323a3131 39323a39 00000000 206e614a     11:29:29....Jan 
    8f0c:	32203432 00393130 76697244 62207265     24 2019.Driver b
    8f1c:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
    8f2c:	6d73694d 68637461 72694620 7261776d     Mismatch Firmwar
    8f3c:	65562065 6f697372 0000006e 41564e49     e Version...INVA
    8f4c:	2044494c 414d4f44 4e204e49 00454d41     LID DOMAIN NAME.

00008f5c <__FUNCTION__.13080>:
    8f5c:	70696863 6b61775f 00000065              chip_wake...

00008f68 <__FUNCTION__.13129>:
    8f68:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    8f78:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    8f88:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    8f98:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    8fa8:	74206465 6177206f 7520656b 68742070     ed to wake up th
    8fb8:	68632065 00007069 76697244 65567265     e chip..DriverVe
    8fc8:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

00008fd8 <__FUNCTION__.13131>:
    8fd8:	645f6d6e 695f7672 5f74696e 646c6f68     nm_drv_init_hold
    8fe8:	00000000                                ....

00008fec <__FUNCTION__.13140>:
    8fec:	645f6d6e 695f7672 5f74696e 72617473     nm_drv_init_star
    8ffc:	00000074                                t...

00009000 <__FUNCTION__.13149>:
    9000:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    9010:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    9020:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    9030:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    9040:	73616c66 69642068 6c626173 61662065     flash disable fa
    9050:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    9060:	6c696166 696e6920 75622074 00000073     fail init bus...
    9070:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    9080:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    9090:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
    90a0:	74206465 6e65206f 656c6261 746e6920     ed to enable int
    90b0:	75727265 2e737470 0000002e 00003204     errupts......2..
    90c0:	00003204 00003234 000031b6 000031da     .2..42...1...1..
    90d0:	000031e8 0000321a 0000321a 00003262     .1...2...2..b2..
    90e0:	0000319a 0000329c 0000329c 0000329c     .1...2...2...2..
    90f0:	0000329c 000031f6 cac4c9c3              .2...1......

000090fc <__FUNCTION__.12276>:
    90fc:	5f697073 00646d63                       spi_cmd.

00009104 <__FUNCTION__.12283>:
    9104:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00009114 <__FUNCTION__.12292>:
    9114:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00009120 <__FUNCTION__.12308>:
    9120:	5f697073 61746164 6165725f 00000064     spi_data_read...

00009130 <__FUNCTION__.12323>:
    9130:	5f697073 61746164 6972775f 00006574     spi_data_write..

00009140 <__FUNCTION__.12335>:
    9140:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00009150 <__FUNCTION__.12346>:
    9150:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00009160 <__FUNCTION__.12358>:
    9160:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00009170 <__FUNCTION__.12371>:
    9170:	735f6d6e 725f6970 00646165              nm_spi_read.

0000917c <__FUNCTION__.12392>:
    917c:	735f6d6e 695f6970 0074696e              nm_spi_init.

00009188 <crc7_syndrome_table>:
    9188:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    9198:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    91a8:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    91b8:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    91c8:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    91d8:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    91e8:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    91f8:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    9208:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    9218:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    9228:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    9238:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    9248:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    9258:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    9268:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    9278:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    9288:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9298:	6e692064 6e726574 72206c61 20646165     d internal read 
    92a8:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    92b8:	6e6f2043 6572202c 69797274 7720676e     C on, retrying w
    92c8:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    92d8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    92e8:	6e692064 6e726574 72206c61 20646165     d internal read 
    92f8:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    9308:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    9318:	6e726574 77206c61 65746972 6f727020     ternal write pro
    9328:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    9338:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    9348:	20646d63 64616572 69686320 64692070     cmd read chip id
    9358:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9368:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    9378:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    9388:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9398:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    93a8:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    93b8:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    93c8:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    93d8:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    93e8:	00000000 65736552 6e612074 65722064     ....Reset and re
    93f8:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    9408:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9418:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    9428:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    9438:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    9448:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    9458:	69727720 62206574 6b636f6c 30252820      write block (%0
    9468:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    9478:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    9488:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    9498:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    94a8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    94b8:	61642064 62206174 6b636f6c 69727720     d data block wri
    94c8:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    94d8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    94e8:	656c6961 61642064 62206174 6b636f6c     ailed data block
    94f8:	63726320 69727720 202c6574 20737562      crc write, bus 
    9508:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    9518:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    9528:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    9538:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    9548:	72206174 6f707365 2065736e 64616572     ta response read
    9558:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    9568:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    9578:	206b636f 61746164 69727720 2e2e6574     ock data write..
    9588:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9598:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    95a8:	73756220 72726520 2e2e726f 0000002e      bus error......
    95b8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    95c8:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    95d8:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    95e8:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    95f8:	656c6961 61642064 72206174 6f707365     ailed data respo
    9608:	2065736e 64616572 7562202c 72652073     nse read, bus er
    9618:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    9628:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    9638:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    9648:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    9658:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    9668:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    9678:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    9688:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    9698:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    96a8:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    96b8:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    96c8:	72202c64 20646165 20676572 38302528     d, read reg (%08
    96d8:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    96e8:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    96f8:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    9708:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    9718:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    9728:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    9738:	6e612074 65722064 20797274 25206425     t and retry %d %
    9748:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    9758:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    9768:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    9778:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9788:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    9798:	74697277 65722065 25282067 29783830     write reg (%08x)
    97a8:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    97b8:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    97c8:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
    97d8:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
    97e8:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    97f8:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
    9808:	4449206e 25203d20 000a0d64 42000800     n ID = %d......B
    9818:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    9828:	42001c00 00005a9e 00005a9a 00005a9a     ...B.Z...Z...Z..
    9838:	00005b00 00005b00 00005ab2 00005aa4     .[...[...Z...Z..
    9848:	00005ab8 00005aee 00005cc0 00005ca0     .Z...Z...\...\..
    9858:	00005ca0 00005d2c 00005cb2 00005cce     .\..,]...\...\..
    9868:	00005ca4 00005cdc 00005d1c 00006740     .\...\...]..@g..
    9878:	0000674e 00006784 00006740 000067bc     Ng...g..@g...g..
    9888:	000067fe 0000683a 00006828 6b636f73     .g..:h..(h..sock
    9898:	635f7465 63203a62 656e6e6f 73207463     et_cb: connect s
    98a8:	65636375 0d217373 00000000 6b636f73     uccess!.....sock
    98b8:	635f7465 63203a62 656e6e6f 65207463     et_cb: connect e
    98c8:	726f7272 00000d21 6b636f73 635f7465     rror!...socket_c
    98d8:	73203a62 20646e65 63637573 21737365     b: send success!
    98e8:	0000000d 6b636f73 635f7465 72203a62     ....socket_cb: r
    98f8:	20766365 63637573 21737365 0000000d     ecv success!....
    9908:	6b636f73 635f7465 72203a62 20766365     socket_cb: recv 
    9918:	6f727265 000d2172 74726f50 6d756e20     error!..Port num
    9928:	20726562 25207369 000a0d64 6e69616d     ber is %d...main
    9938:	6166203a 64656c69 206f7420 61657263     : failed to crea
    9948:	54206574 63205043 6e65696c 6f732074     te TCP client so
    9958:	74656b63 72652034 21726f72 0000000d     cket4 error!....
    9968:	6e6e6f63 65746365 6f742064 65687420     connected to the
    9978:	74786520 616e7265 4354206c 65732050      external TCP se
    9988:	72657672 00000d20                       rver ...

00009990 <gacHttpProvDomainName>:
    9990:	6f727261 6e6f6377 2e676966 006d6f63     arrowconfig.com.
    99a0:	20656854 75706e69 656d2074 67617373     The input messag
    99b0:	73692065 0d732520 0000000a 00000020     e is %s..... ...
    99c0:	00504354 4e4e4f43 00544345 444e4553     TCP.CONNECT.SEND
    99d0:	00000000 746e6553 20732520 74206f74     ....Sent %s to t
    99e0:	73206568 65767265 000a0d72 57202d2d     he server...-- W
    99f0:	31434e49 20303035 50545448 6f727020     INC1500 HTTP pro
    9a00:	69736976 77206e6f 20687469 20504354     vision with TCP 
    9a10:	76726553 61207265 5320646e 61697265     Server and Seria
    9a20:	6c46206c 20687361 6f6d654d 2d207972     l Flash Memory -
    9a30:	2d0a0d2d 4153202d 3132444d 4c50585f     -..-- SAMD21_XPL
    9a40:	454e4941 52505f44 2d2d204f 2d2d0a0d     AINED_PRO --..--
    9a50:	6d6f4320 656c6970 46203a64 31206265      Compiled: Feb 1
    9a60:	30322032 31203931 30323a35 2039333a     2 2019 15:20:39 
    9a70:	000d2d2d 70696843 20736920 65726e75     --..Chip is unre
    9a80:	6e6f7073 65766973 0000000d 6e69616d     sponsive....main
    9a90:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
    9aa0:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
    9ab0:	0000000a 44495353 20736920 696c6176     ....SSID is vali
    9ac0:	77202c64 206c6c69 746e6f63 65756e69     d, will continue
    9ad0:	206f7420 6e6e6f63 20746365 77206f74      to connect to w
    9ae0:	0d696669 00000000 44495353 65722020     ifi.....SSID  re
    9af0:	69206461 73252073 00000a0d 73736150     ad is %s....Pass
    9b00:	64726f77 61657220 73692064 7325203a     word read is: %s
    9b10:	00000a0d 44495353 20736920 20746f6e     ....SSID is not 
    9b20:	696c6176 57202c64 20696669 766f7270     valid, Wifi prov
    9b30:	6f697369 676e696e 6c697720 7473206c     isioning will st
    9b40:	00747261 6f727261 6e6f6377 2e676966     art.arrowconfig.
    9b50:	006d6f63 766f7250 6f697369 6f4d206e     com.Provision Mo
    9b60:	73206564 74726174 0d2e6465 6e6f430a     de started...Con
    9b70:	7463656e 206f7420 5d73255b 61697620     nect to [%s] via
    9b80:	5b504120 205d7325 20646e61 6c6c6966      AP[%s] and fill
    9b90:	20707520 20656874 65676170 000a0d2e      up the page....
    9ba0:	63206f54 656e6e6f 74207463 2061206f     To connect to a 
    9bb0:	20504354 76726573 65207265 7265746e     TCP server enter
    9bc0:	6d6f6320 646e616d 43542720 4f432050      command 'TCP CO
    9bd0:	43454e4e 497b2054 44412050 53455244     NNECT {IP ADDRES
    9be0:	50207d53 2754524f 0000000d 73206f54     S} PORT'....To s
    9bf0:	20646e65 6f632061 6e616d6d 6f742064     end a command to
    9c00:	65687420 50435420 72657320 20726576      the TCP server 
    9c10:	20657375 6d6d6f63 20646e61 50435427     use command 'TCP
    9c20:	4e455320 437b2044 414d4d4f 277d444e      SEND {COMMAND}'
    9c30:	0000000d 6e69616d 6166203a 64656c69     ....main: failed
    9c40:	206f7420 61657263 54206574 73205043      to create TCP s
    9c50:	65767265 6f732072 74656b63 72726520     erver socket err
    9c60:	0d21726f 00000000 7373656d 20656761     or!.....message 
    9c70:	74206f74 73206568 65767265 73692072     to the server is
    9c80:	7325203a 00000a0d 6b636f73 635f7465     : %s....socket_c
    9c90:	62203a62 20646e69 63637573 21737365     b: bind success!
    9ca0:	0000000d 6b636f73 635f7465 62203a62     ....socket_cb: b
    9cb0:	20646e69 6f727265 000d2172 6b636f73     ind error!..sock
    9cc0:	635f7465 6c203a62 65747369 7573206e     et_cb: listen su
    9cd0:	73656363 000d2173 6b636f73 635f7465     ccess!..socket_c
    9ce0:	6c203a62 65747369 7265206e 21726f72     b: listen error!
    9cf0:	0000000d 6b636f73 635f7465 61203a62     ....socket_cb: a
    9d00:	70656363 75732074 73656363 000d2173     ccept success!..
    9d10:	6b636f73 635f7465 61203a62 70656363     socket_cb: accep
    9d20:	72652074 21726f72 0000000d 6b636f73     t error!....sock
    9d30:	635f7465 63203a62 656e6e6f 73207463     et_cb: connect s
    9d40:	65636375 0d2e7373 00000000 20656854     uccess......The 
    9d50:	7373656d 20656761 65636572 64657669     message received
    9d60:	20736920 0a0d7325 00000000 462d6957      is %s......Wi-F
    9d70:	6f632069 63656e6e 0d646574 00000000     i connected.....
    9d80:	462d6957 69642069 6e6f6373 7463656e     Wi-Fi disconnect
    9d90:	000d6465 462d6957 50492069 20736920     ed..Wi-Fi IP is 
    9da0:	252e7525 75252e75 0d75252e 0000000a     %u.%u.%u.%u.....
    9db0:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
    9dc0:	45525f49 505f5053 49564f52 4e4f4953     I_RESP_PROVISION
    9dd0:	464e495f 000d2e4f 44495353 0d732520     _INFO...SSID %s.
    9de0:	0000000a 44495353 61657220 72662064     ....SSID read fr
    9df0:	66206d6f 6873616c 2520203a 000a0d73     om flash:  %s...
    9e00:	73736150 64726f77 61657220 72662064     Password read fr
    9e10:	66206d6f 6873616c 2520203a 000a0d73     om flash:  %s...
    9e20:	69666977 3a62635f 6f725020 69736976     wifi_cb: Provisi
    9e30:	66206e6f 656c6961 000d2e64              on failed...

00009e3c <_global_impure_ptr>:
    9e3c:	200000bc                                ... 

00009e40 <__sf_fake_stderr>:
	...

00009e60 <__sf_fake_stdin>:
	...

00009e80 <__sf_fake_stdout>:
	...
    9ea0:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    9eb0:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    9ec0:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    9ed0:	37363534 62613938 66656463 20200000              456789abcdef.

00009edd <_ctype_>:
    9edd:	20202000 20202020 28282020 20282828     .         ((((( 
    9eed:	20202020 20202020 20202020 20202020                     
    9efd:	10108820 10101010 10101010 10101010      ...............
    9f0d:	04040410 04040404 10040404 10101010     ................
    9f1d:	41411010 41414141 01010101 01010101     ..AAAAAA........
    9f2d:	01010101 01010101 01010101 10101010     ................
    9f3d:	42421010 42424242 02020202 02020202     ..BBBBBB........
    9f4d:	02020202 02020202 02020202 10101010     ................
    9f5d:	00000020 00000000 00000000 00000000      ...............
	...

00009fe0 <_init>:
    9fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fe2:	46c0      	nop			; (mov r8, r8)
    9fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9fe6:	bc08      	pop	{r3}
    9fe8:	469e      	mov	lr, r3
    9fea:	4770      	bx	lr

00009fec <__init_array_start>:
    9fec:	000000dd 	.word	0x000000dd

00009ff0 <_fini>:
    9ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ff2:	46c0      	nop			; (mov r8, r8)
    9ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9ff6:	bc08      	pop	{r3}
    9ff8:	469e      	mov	lr, r3
    9ffa:	4770      	bx	lr

00009ffc <__fini_array_start>:
    9ffc:	000000b5 	.word	0x000000b5
